###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        13/Apr/2020  09:25:26
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl_G29.cpp
#    Command line =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl_G29.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\
#        -lA
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/Obj\
#        --debug --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Src\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/variant\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/libstmf4/include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui/Multi_language\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui/QRENCODE\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\..\Middlewares\GUI\
#        -Oh --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\ubl_G29.lst
#    Object file  =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/Obj\ubl_G29.o
#
###############################################################################

D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl_G29.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          
     23          #include "MarlinConfig.h"

  #define UNUSED(x) ((void)(x))
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pe047]: 
          incompatible redefinition of macro "UNUSED" (declared at line 101 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\macros.h")

  		volatile volatile float desireBedTempBak;
  		         ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Inc\mks_cfg.h",626  Warning[Pe083]: 
          type qualifier specified more than once
     24          
     25          #if 1//ENABLED(AUTO_BED_LEVELING_UBL)
     26          
     27            #include "ubl.h"

  #define strcpy_P(dest, src) strcpy((dest), (src))
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",23  Warning[Pe047]: 
          incompatible redefinition of macro "strcpy_P" (declared at line 93
          of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

  #define strstr_P(a, b) strstr((a), (b))
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",26  Warning[Pe047]: 
          incompatible redefinition of macro "strstr_P" (declared at line 94
          of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

  #define sprintf_P(s, f, ...) sprintf((s), (f), __VA_ARGS__)
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",28  Warning[Pe047]: 
          incompatible redefinition of macro "sprintf_P" (declared at line 95
          of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

  #define pgm_read_word_near(addr) pgm_read_word(addr)
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",38  Warning[Pe047]: 
          incompatible redefinition of macro "pgm_read_word_near" (declared at
          line 65 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

   \                                 In section .text, align 4
   \   __interwork __softfp void serialprintPGM(char const *)
   \                     _Z14serialprintPGMPKc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4D05             LDR.N    R5,??serialprintPGM_0
   \   00000006   0xE003             B.N      ??serialprintPGM_1
   \                     ??serialprintPGM_2: (+1)
   \   00000008   0xB2C9             UXTB     R1,R1
   \   0000000A   0x4628             MOV      R0,R5
   \   0000000C   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??serialprintPGM_1: (+1)
   \   00000010   0xF914 0x1B01      LDRSB    R1,[R4], #+1
   \   00000014   0x0008             MOVS     R0,R1
   \   00000016   0xD1F7             BNE.N    ??serialprintPGM_2
   \   00000018   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   \   0000001A   0xBF00             Nop      
   \                     ??serialprintPGM_0:
   \   0000001C   0x........         DC32     Serial3

   \                                 In section .text, align 4
   \   __interwork __softfp bool position_is_reachable_IS_KINEMATIC(float const &, float const &)
   \                     _Z34position_is_reachable_IS_KINEMATICRKfS0_: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x4842             LDR.N    R0,??position_is_reachable_IS_KINEMATIC_0
   \   00000008   0x460C             MOV      R4,R1
   \   0000000A   0xF9B0 0x1058      LDRSH    R1,[R0, #+88]
   \   0000000E   0x078A             LSLS     R2,R1,#+30
   \   00000010   0xD527             BPL.N    ??position_is_reachable_IS_KINEMATIC_1
   \   00000012   0x6D46             LDR      R6,[R0, #+84]
   \   00000014   0xF04F 0x587E      MOV      R8,#+1065353216
   \   00000018   0x2702             MOVS     R7,#+2
   \   0000001A   0x46C1             MOV      R9,R8
   \   0000001C   0xE004             B.N      ??position_is_reachable_IS_KINEMATIC_2
   \                     ??position_is_reachable_IS_KINEMATIC_3: (+1)
   \   0000001E   0x4630             MOV      R0,R6
   \   00000020   0x4631             MOV      R1,R6
   \   00000022   0x.... 0x....      BL       __aeabi_fmul
   \   00000026   0x4606             MOV      R6,R0
   \                     ??position_is_reachable_IS_KINEMATIC_2: (+1)
   \   00000028   0x07F8             LSLS     R0,R7,#+31
   \   0000002A   0xD504             BPL.N    ??position_is_reachable_IS_KINEMATIC_4
   \   0000002C   0x4648             MOV      R0,R9
   \   0000002E   0x4631             MOV      R1,R6
   \   00000030   0x.... 0x....      BL       __aeabi_fmul
   \   00000034   0x4681             MOV      R9,R0
   \                     ??position_is_reachable_IS_KINEMATIC_4: (+1)
   \   00000036   0x087F             LSRS     R7,R7,#+1
   \   00000038   0xD1F1             BNE.N    ??position_is_reachable_IS_KINEMATIC_3
   \   0000003A   0x682E             LDR      R6,[R5, #+0]
   \   0000003C   0x2702             MOVS     R7,#+2
   \   0000003E   0x4645             MOV      R5,R8
   \   00000040   0xE004             B.N      ??position_is_reachable_IS_KINEMATIC_5
   \                     ??position_is_reachable_IS_KINEMATIC_6: (+1)
   \   00000042   0x4630             MOV      R0,R6
   \   00000044   0x4631             MOV      R1,R6
   \   00000046   0x.... 0x....      BL       __aeabi_fmul
   \   0000004A   0x4606             MOV      R6,R0
   \                     ??position_is_reachable_IS_KINEMATIC_5: (+1)
   \   0000004C   0x07F8             LSLS     R0,R7,#+31
   \   0000004E   0xD504             BPL.N    ??position_is_reachable_IS_KINEMATIC_7
   \   00000050   0x4628             MOV      R0,R5
   \   00000052   0x4631             MOV      R1,R6
   \   00000054   0x.... 0x....      BL       __aeabi_fmul
   \   00000058   0x4605             MOV      R5,R0
   \                     ??position_is_reachable_IS_KINEMATIC_7: (+1)
   \   0000005A   0x087F             LSRS     R7,R7,#+1
   \   0000005C   0xD1F1             BNE.N    ??position_is_reachable_IS_KINEMATIC_6
   \   0000005E   0x6824             LDR      R4,[R4, #+0]
   \   00000060   0xE038             B.N      ??position_is_reachable_IS_KINEMATIC_8
   \                     ??position_is_reachable_IS_KINEMATIC_1: (+1)
   \   00000062   0xF44F 0x7040      MOV      R0,#+768
   \   00000066   0x4201             TST      R1,R0
   \   00000068   0xD04F             BEQ.N    ??position_is_reachable_IS_KINEMATIC_9
   \   0000006A   0x482A             LDR.N    R0,??position_is_reachable_IS_KINEMATIC_0+0x4
   \   0000006C   0x6801             LDR      R1,[R0, #+0]
   \   0000006E   0x482A             LDR.N    R0,??position_is_reachable_IS_KINEMATIC_0+0x8
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x.... 0x....      BL       __aeabi_fadd
   \   00000076   0xF04F 0x587E      MOV      R8,#+1065353216
   \   0000007A   0x4606             MOV      R6,R0
   \   0000007C   0x2702             MOVS     R7,#+2
   \   0000007E   0x46C1             MOV      R9,R8
   \   00000080   0xE004             B.N      ??position_is_reachable_IS_KINEMATIC_10
   \                     ??position_is_reachable_IS_KINEMATIC_11: (+1)
   \   00000082   0x4630             MOV      R0,R6
   \   00000084   0x4631             MOV      R1,R6
   \   00000086   0x.... 0x....      BL       __aeabi_fmul
   \   0000008A   0x4606             MOV      R6,R0
   \                     ??position_is_reachable_IS_KINEMATIC_10: (+1)
   \   0000008C   0x07F8             LSLS     R0,R7,#+31
   \   0000008E   0xD504             BPL.N    ??position_is_reachable_IS_KINEMATIC_12
   \   00000090   0x4648             MOV      R0,R9
   \   00000092   0x4631             MOV      R1,R6
   \   00000094   0x.... 0x....      BL       __aeabi_fmul
   \   00000098   0x4681             MOV      R9,R0
   \                     ??position_is_reachable_IS_KINEMATIC_12: (+1)
   \   0000009A   0x087F             LSRS     R7,R7,#+1
   \   0000009C   0xD1F1             BNE.N    ??position_is_reachable_IS_KINEMATIC_11
   \   0000009E   0x6829             LDR      R1,[R5, #+0]
   \   000000A0   0x481E             LDR.N    R0,??position_is_reachable_IS_KINEMATIC_0+0xC  ;; 0xc2c80000
   \   000000A2   0x.... 0x....      BL       __aeabi_fadd
   \   000000A6   0x4606             MOV      R6,R0
   \   000000A8   0x2702             MOVS     R7,#+2
   \   000000AA   0x4645             MOV      R5,R8
   \   000000AC   0xE004             B.N      ??position_is_reachable_IS_KINEMATIC_13
   \                     ??position_is_reachable_IS_KINEMATIC_14: (+1)
   \   000000AE   0x4630             MOV      R0,R6
   \   000000B0   0x4631             MOV      R1,R6
   \   000000B2   0x.... 0x....      BL       __aeabi_fmul
   \   000000B6   0x4606             MOV      R6,R0
   \                     ??position_is_reachable_IS_KINEMATIC_13: (+1)
   \   000000B8   0x07F8             LSLS     R0,R7,#+31
   \   000000BA   0xD504             BPL.N    ??position_is_reachable_IS_KINEMATIC_15
   \   000000BC   0x4628             MOV      R0,R5
   \   000000BE   0x4631             MOV      R1,R6
   \   000000C0   0x.... 0x....      BL       __aeabi_fmul
   \   000000C4   0x4605             MOV      R5,R0
   \                     ??position_is_reachable_IS_KINEMATIC_15: (+1)
   \   000000C6   0x087F             LSRS     R7,R7,#+1
   \   000000C8   0xD1F1             BNE.N    ??position_is_reachable_IS_KINEMATIC_14
   \   000000CA   0x6821             LDR      R1,[R4, #+0]
   \   000000CC   0x4814             LDR.N    R0,??position_is_reachable_IS_KINEMATIC_0+0x10  ;; 0x42600000
   \   000000CE   0x.... 0x....      BL       __aeabi_fadd
   \   000000D2   0x4604             MOV      R4,R0
   \                     ??position_is_reachable_IS_KINEMATIC_8: (+1)
   \   000000D4   0x2602             MOVS     R6,#+2
   \   000000D6   0xE004             B.N      ??position_is_reachable_IS_KINEMATIC_16
   \                     ??position_is_reachable_IS_KINEMATIC_17: (+1)
   \   000000D8   0x4620             MOV      R0,R4
   \   000000DA   0x4621             MOV      R1,R4
   \   000000DC   0x.... 0x....      BL       __aeabi_fmul
   \   000000E0   0x4604             MOV      R4,R0
   \                     ??position_is_reachable_IS_KINEMATIC_16: (+1)
   \   000000E2   0x07F0             LSLS     R0,R6,#+31
   \   000000E4   0xD504             BPL.N    ??position_is_reachable_IS_KINEMATIC_18
   \   000000E6   0x4640             MOV      R0,R8
   \   000000E8   0x4621             MOV      R1,R4
   \   000000EA   0x.... 0x....      BL       __aeabi_fmul
   \   000000EE   0x4680             MOV      R8,R0
   \                     ??position_is_reachable_IS_KINEMATIC_18: (+1)
   \   000000F0   0x0876             LSRS     R6,R6,#+1
   \   000000F2   0xD1F1             BNE.N    ??position_is_reachable_IS_KINEMATIC_17
   \   000000F4   0x4628             MOV      R0,R5
   \   000000F6   0x4641             MOV      R1,R8
   \   000000F8   0x.... 0x....      BL       __aeabi_fadd
   \   000000FC   0x4601             MOV      R1,R0
   \   000000FE   0x4648             MOV      R0,R9
   \   00000100   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000104   0xBF94             ITE      LS 
   \   00000106   0x2001             MOVLS    R0,#+1
   \   00000108   0x2000             MOVHI    R0,#+0

    }
    ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\Marlin.h",537  Warning[Pe940]: 
          missing return statement at end of non-void function
          "position_is_reachable_IS_KINEMATIC"
   \                     ??position_is_reachable_IS_KINEMATIC_9: (+1)
   \   0000010A   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   \   0000010E   0xBF00             Nop      
   \                     ??position_is_reachable_IS_KINEMATIC_0:
   \   00000110   0x........         DC32     mksCfg
   \   00000114   0x........         DC32     L1
   \   00000118   0x........         DC32     L2
   \   0000011C   0xC2C80000         DC32     0xc2c80000
   \   00000120   0x42600000         DC32     0x42600000

      static constexpr int8_t next_block_index(const int8_t block_index) { return BLOCK_MOD(block_index + 1); }
             ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\planner.h",627  Warning[Pe815]: 
          type qualifier on return type is meaningless

      static constexpr int8_t prev_block_index(const int8_t block_index) { return BLOCK_MOD(block_index - 1); }
             ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\planner.h",628  Warning[Pe815]: 
          type qualifier on return type is meaningless

   \                                 In section .text, align 4
   \   __interwork __softfp int8_t unified_bed_leveling::get_cell_index_x(float const &)
   \                     _ZN20unified_bed_leveling16get_cell_index_xERKf: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4E41             LDR.N    R6,??get_cell_index_x_0
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0xF896 0x0098      LDRB     R0,[R6, #+152]
   \   0000000C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000010   0x4680             MOV      R8,R0
   \   00000012   0xF106 0x0008      ADD      R0,R6,#+8
   \   00000016   0xF240 0x3202      MOVW     R2,#+770
   \   0000001A   0xF8B0 0x1050      LDRH     R1,[R0, #+80]
   \   0000001E   0x4211             TST      R1,R2
   \   00000020   0xD013             BEQ.N    ??get_cell_index_x_1

          	cx = (x - (MESH_MIN_X_IS_KINEMATIC)) * (1.0 / (MESH_X_DIST_IS_KINEMATIC));
          	   ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",182  Warning[Pa093]: 
          implicit conversion from floating point to integer
   \   00000022   0x4F3B             LDR.N    R7,??get_cell_index_x_0+0x4
   \   00000024   0x6838             LDR      R0,[R7, #+0]
   \   00000026   0x4641             MOV      R1,R8
   \   00000028   0x.... 0x....      BL       __aeabi_fadd
   \   0000002C   0x4681             MOV      R9,R0
   \   0000002E   0x6820             LDR      R0,[R4, #+0]
   \   00000030   0x4649             MOV      R1,R9
   \   00000032   0x.... 0x....      BL       __aeabi_fsub
   \   00000036   0x.... 0x....      BL       __aeabi_f2d
   \   0000003A   0x4604             MOV      R4,R0
   \   0000003C   0x460D             MOV      R5,R1
   \   0000003E   0x6878             LDR      R0,[R7, #+4]
   \   00000040   0x4641             MOV      R1,R8
   \   00000042   0x.... 0x....      BL       __aeabi_fsub
   \   00000046   0x4649             MOV      R1,R9
   \   00000048   0xE037             B.N      ??get_cell_index_x_2

  					cx = (x - (MESH_MIN_X_IS_Cartesian)) * (1.0 / (MESH_X_DIST_IS_Cartesian));
  					   ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",184  Warning[Pa093]: 
          implicit conversion from floating point to integer
   \                     ??get_cell_index_x_1: (+1)
   \   0000004A   0x68C5             LDR      R5,[R0, #+12]
   \   0000004C   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000050   0x4629             MOV      R1,R5
   \   00000052   0x.... 0x....      BL       __aeabi_fmul
   \   00000056   0x4682             MOV      R10,R0
   \   00000058   0x4651             MOV      R1,R10
   \   0000005A   0x.... 0x....      BL       __aeabi_fsub
   \   0000005E   0x4641             MOV      R1,R8
   \   00000060   0x.... 0x....      BL       __aeabi_fadd
   \   00000064   0x4607             MOV      R7,R0
   \   00000066   0xF106 0x0060      ADD      R0,R6,#+96
   \   0000006A   0xF8D0 0x900C      LDR      R9,[R0, #+12]
   \   0000006E   0x68B0             LDR      R0,[R6, #+8]
   \   00000070   0x4649             MOV      R1,R9
   \   00000072   0x.... 0x....      BL       __aeabi_fadd
   \   00000076   0x4639             MOV      R1,R7
   \   00000078   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000007C   0xBF28             IT       CS 
   \   0000007E   0x4607             MOVCS    R7,R0
   \   00000080   0xF04F 0x4080      MOV      R0,#+1073741824
   \   00000084   0x4651             MOV      R1,R10
   \   00000086   0x.... 0x....      BL       __aeabi_fmul
   \   0000008A   0x4641             MOV      R1,R8
   \   0000008C   0x.... 0x....      BL       __aeabi_fsub
   \   00000090   0x4680             MOV      R8,R0
   \   00000092   0x4628             MOV      R0,R5
   \   00000094   0x4649             MOV      R1,R9
   \   00000096   0x.... 0x....      BL       __aeabi_fadd
   \   0000009A   0x4601             MOV      R1,R0
   \   0000009C   0x4640             MOV      R0,R8
   \   0000009E   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000A2   0xBF28             IT       CS 
   \   000000A4   0x4688             MOVCS    R8,R1
   \   000000A6   0x6820             LDR      R0,[R4, #+0]
   \   000000A8   0x4639             MOV      R1,R7
   \   000000AA   0x.... 0x....      BL       __aeabi_fsub
   \   000000AE   0x.... 0x....      BL       __aeabi_f2d
   \   000000B2   0x4604             MOV      R4,R0
   \   000000B4   0x460D             MOV      R5,R1
   \   000000B6   0x4640             MOV      R0,R8
   \   000000B8   0x4639             MOV      R1,R7
   \                     ??get_cell_index_x_2: (+1)
   \   000000BA   0x.... 0x....      BL       __aeabi_fsub
   \   000000BE   0x4607             MOV      R7,R0
   \   000000C0   0xF896 0x0060      LDRB     R0,[R6, #+96]
   \   000000C4   0x1E40             SUBS     R0,R0,#+1
   \   000000C6   0x.... 0x....      BL       __aeabi_i2f
   \   000000CA   0x4601             MOV      R1,R0
   \   000000CC   0x4638             MOV      R0,R7
   \   000000CE   0x.... 0x....      BL       __aeabi_fdiv
   \   000000D2   0x.... 0x....      BL       __aeabi_f2d
   \   000000D6   0x4602             MOV      R2,R0
   \   000000D8   0x460B             MOV      R3,R1
   \   000000DA   0x2000             MOVS     R0,#+0
   \   000000DC   0x490D             LDR.N    R1,??get_cell_index_x_0+0x8  ;; 0x3ff00000
   \   000000DE   0x.... 0x....      BL       __aeabi_ddiv
   \   000000E2   0x4622             MOV      R2,R4
   \   000000E4   0x462B             MOV      R3,R5
   \   000000E6   0x.... 0x....      BL       __aeabi_dmul
   \   000000EA   0x.... 0x....      BL       __aeabi_d2iz
   \   000000EE   0xB240             SXTB     R0,R0
   \   000000F0   0x0001             MOVS     R1,R0
   \   000000F2   0xBF48             IT       MI 
   \   000000F4   0x2000             MOVMI    R0,#+0
   \   000000F6   0xD405             BMI.N    ??get_cell_index_x_3
   \   000000F8   0xF896 0x2060      LDRB     R2,[R6, #+96]
   \   000000FC   0x1E53             SUBS     R3,R2,#+1
   \   000000FE   0x4283             CMP      R3,R0
   \   00000100   0xBFB8             IT       LT 
   \   00000102   0x1E50             SUBLT    R0,R2,#+1
   \                     ??get_cell_index_x_3: (+1)
   \   00000104   0xB240             SXTB     R0,R0
   \   00000106   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \   0000010A   0xBF00             Nop      
   \                     ??get_cell_index_x_0:
   \   0000010C   0x........         DC32     mksCfg
   \   00000110   0x........         DC32     mksTmp
   \   00000114   0x3FF00000         DC32     0x3ff00000

   \                                 In section .text, align 4
   \   __interwork __softfp int8_t unified_bed_leveling::get_cell_index_y(float const &)
   \                     _ZN20unified_bed_leveling16get_cell_index_yERKf: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4E40             LDR.N    R6,??get_cell_index_y_0
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0xF896 0x0098      LDRB     R0,[R6, #+152]
   \   0000000C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000010   0x4680             MOV      R8,R0
   \   00000012   0xF106 0x000C      ADD      R0,R6,#+12
   \   00000016   0xF240 0x3202      MOVW     R2,#+770
   \   0000001A   0xF8B0 0x104C      LDRH     R1,[R0, #+76]
   \   0000001E   0x4211             TST      R1,R2
   \   00000020   0xD013             BEQ.N    ??get_cell_index_y_1

  					cy = (y - (MESH_MIN_Y_IS_KINEMATIC)) * (1.0 / (MESH_Y_DIST_IS_KINEMATIC));
  					   ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",195  Warning[Pa093]: 
          implicit conversion from floating point to integer
   \   00000022   0x4F3A             LDR.N    R7,??get_cell_index_y_0+0x4
   \   00000024   0x68B8             LDR      R0,[R7, #+8]
   \   00000026   0x4641             MOV      R1,R8
   \   00000028   0x.... 0x....      BL       __aeabi_fadd
   \   0000002C   0x4681             MOV      R9,R0
   \   0000002E   0x6820             LDR      R0,[R4, #+0]
   \   00000030   0x4649             MOV      R1,R9
   \   00000032   0x.... 0x....      BL       __aeabi_fsub
   \   00000036   0x.... 0x....      BL       __aeabi_f2d
   \   0000003A   0x4604             MOV      R4,R0
   \   0000003C   0x460D             MOV      R5,R1
   \   0000003E   0x68F8             LDR      R0,[R7, #+12]
   \   00000040   0x4641             MOV      R1,R8
   \   00000042   0x.... 0x....      BL       __aeabi_fsub
   \   00000046   0x4649             MOV      R1,R9
   \   00000048   0xE035             B.N      ??get_cell_index_y_2

  					cy = (y - (MESH_MIN_Y_IS_Cartesian)) * (1.0 / (MESH_Y_DIST_IS_Cartesian));
  					   ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",197  Warning[Pa093]: 
          implicit conversion from floating point to integer
   \                     ??get_cell_index_y_1: (+1)
   \   0000004A   0x68C5             LDR      R5,[R0, #+12]
   \   0000004C   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000050   0x4629             MOV      R1,R5
   \   00000052   0x.... 0x....      BL       __aeabi_fmul
   \   00000056   0x4682             MOV      R10,R0
   \   00000058   0x4651             MOV      R1,R10
   \   0000005A   0x.... 0x....      BL       __aeabi_fsub
   \   0000005E   0x4641             MOV      R1,R8
   \   00000060   0x.... 0x....      BL       __aeabi_fadd
   \   00000064   0x4607             MOV      R7,R0
   \   00000066   0xF8D6 0x9070      LDR      R9,[R6, #+112]
   \   0000006A   0x68F0             LDR      R0,[R6, #+12]
   \   0000006C   0x4649             MOV      R1,R9
   \   0000006E   0x.... 0x....      BL       __aeabi_fadd
   \   00000072   0x4639             MOV      R1,R7
   \   00000074   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000078   0xBF28             IT       CS 
   \   0000007A   0x4607             MOVCS    R7,R0
   \   0000007C   0xF04F 0x4080      MOV      R0,#+1073741824
   \   00000080   0x4651             MOV      R1,R10
   \   00000082   0x.... 0x....      BL       __aeabi_fmul
   \   00000086   0x4641             MOV      R1,R8
   \   00000088   0x.... 0x....      BL       __aeabi_fsub
   \   0000008C   0x4680             MOV      R8,R0
   \   0000008E   0x4628             MOV      R0,R5
   \   00000090   0x4649             MOV      R1,R9
   \   00000092   0x.... 0x....      BL       __aeabi_fadd
   \   00000096   0x4601             MOV      R1,R0
   \   00000098   0x4640             MOV      R0,R8
   \   0000009A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000009E   0xBF28             IT       CS 
   \   000000A0   0x4688             MOVCS    R8,R1
   \   000000A2   0x6820             LDR      R0,[R4, #+0]
   \   000000A4   0x4639             MOV      R1,R7
   \   000000A6   0x.... 0x....      BL       __aeabi_fsub
   \   000000AA   0x.... 0x....      BL       __aeabi_f2d
   \   000000AE   0x4604             MOV      R4,R0
   \   000000B0   0x460D             MOV      R5,R1
   \   000000B2   0x4640             MOV      R0,R8
   \   000000B4   0x4639             MOV      R1,R7
   \                     ??get_cell_index_y_2: (+1)
   \   000000B6   0x.... 0x....      BL       __aeabi_fsub
   \   000000BA   0x4607             MOV      R7,R0
   \   000000BC   0xF896 0x0061      LDRB     R0,[R6, #+97]
   \   000000C0   0x1E40             SUBS     R0,R0,#+1
   \   000000C2   0x.... 0x....      BL       __aeabi_i2f
   \   000000C6   0x4601             MOV      R1,R0
   \   000000C8   0x4638             MOV      R0,R7
   \   000000CA   0x.... 0x....      BL       __aeabi_fdiv
   \   000000CE   0x.... 0x....      BL       __aeabi_f2d
   \   000000D2   0x4602             MOV      R2,R0
   \   000000D4   0x460B             MOV      R3,R1
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x490D             LDR.N    R1,??get_cell_index_y_0+0x8  ;; 0x3ff00000
   \   000000DA   0x.... 0x....      BL       __aeabi_ddiv
   \   000000DE   0x4622             MOV      R2,R4
   \   000000E0   0x462B             MOV      R3,R5
   \   000000E2   0x.... 0x....      BL       __aeabi_dmul
   \   000000E6   0x.... 0x....      BL       __aeabi_d2iz
   \   000000EA   0xB240             SXTB     R0,R0
   \   000000EC   0x0001             MOVS     R1,R0
   \   000000EE   0xBF48             IT       MI 
   \   000000F0   0x2000             MOVMI    R0,#+0
   \   000000F2   0xD405             BMI.N    ??get_cell_index_y_3
   \   000000F4   0xF896 0x2061      LDRB     R2,[R6, #+97]
   \   000000F8   0x1E53             SUBS     R3,R2,#+1
   \   000000FA   0x4283             CMP      R3,R0
   \   000000FC   0xBFB8             IT       LT 
   \   000000FE   0x1E50             SUBLT    R0,R2,#+1
   \                     ??get_cell_index_y_3: (+1)
   \   00000100   0xB240             SXTB     R0,R0
   \   00000102   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \   00000106   0xBF00             Nop      
   \                     ??get_cell_index_y_0:
   \   00000108   0x........         DC32     mksCfg
   \   0000010C   0x........         DC32     mksTmp
   \   00000110   0x3FF00000         DC32     0x3ff00000

  					px= (x - (MESH_MIN_X_IS_KINEMATIC) + (MESH_X_DIST_IS_KINEMATIC) * 0.5) * (1.0 / (MESH_X_DIST_IS_KINEMATIC));
  					  ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",208  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					px= (x - (MESH_MIN_X_IS_Cartesian) + (MESH_X_DIST_IS_Cartesian) * 0.5) * (1.0 / (MESH_X_DIST_IS_Cartesian));
  					  ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",210  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					py = (y - (MESH_MIN_Y_IS_KINEMATIC) + (MESH_Y_DIST_IS_KINEMATIC) * 0.5) * (1.0 / (MESH_Y_DIST_IS_KINEMATIC));
  					   ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",219  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					py = (y - (MESH_MIN_Y_IS_Cartesian) + (MESH_Y_DIST_IS_Cartesian) * 0.5) * (1.0 / (MESH_Y_DIST_IS_Cartesian));
  					   ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",221  Warning[Pa093]: 
          implicit conversion from floating point to integer

   \                                 In section .text, align 4
   \   __interwork __softfp float unified_bed_leveling::get_z_correction(float const &, float const &)
   \                     _ZN20unified_bed_leveling16get_z_correctionERKfS1_: (+1)
   \   00000000   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_cell_index_xERKf
   \   0000000C   0x4605             MOV      R5,R0
   \   0000000E   0x9804             LDR      R0,[SP, #+16]
   \   00000010   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_cell_index_yERKf
   \   00000014   0x4606             MOV      R6,R0
   \   00000016   0xB2E8             UXTB     R0,R5
   \   00000018   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   0000001C   0x4680             MOV      R8,R0
   \   0000001E   0x1C68             ADDS     R0,R5,#+1
   \   00000020   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000024   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000028   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   0000002C   0x4F4A             LDR.N    R7,??get_z_correction_0
   \   0000002E   0x9003             STR      R0,[SP, #+12]
   \   00000030   0x46A9             MOV      R9,R5
   \   00000032   0xF897 0x0060      LDRB     R0,[R7, #+96]
   \   00000036   0x1E80             SUBS     R0,R0,#+2
   \   00000038   0x4285             CMP      R5,R0
   \   0000003A   0xBFC8             IT       GT 
   \   0000003C   0x4681             MOVGT    R9,R0
   \   0000003E   0xF8DF 0xA11C      LDR.W    R10,??get_z_correction_0+0x4
   \   00000042   0xEB05 0x0045      ADD      R0,R5,R5, LSL #+1
   \   00000046   0xEB0A 0x1000      ADD      R0,R10,R0, LSL #+4
   \   0000004A   0x9002             STR      R0,[SP, #+8]
   \   0000004C   0xEB00 0x0086      ADD      R0,R0,R6, LSL #+2
   \   00000050   0xF8D0 0xB000      LDR      R11,[R0, #+0]
   \   00000054   0xEB09 0x0049      ADD      R0,R9,R9, LSL #+1
   \   00000058   0xEB0A 0x1000      ADD      R0,R10,R0, LSL #+4
   \   0000005C   0xEB00 0x0086      ADD      R0,R0,R6, LSL #+2
   \   00000060   0x4659             MOV      R1,R11
   \   00000062   0x6B00             LDR      R0,[R0, #+48]
   \   00000064   0x.... 0x....      BL       __aeabi_fsub
   \   00000068   0x9000             STR      R0,[SP, #+0]
   \   0000006A   0x4641             MOV      R1,R8
   \   0000006C   0x6820             LDR      R0,[R4, #+0]
   \   0000006E   0x.... 0x....      BL       __aeabi_fsub
   \   00000072   0x9900             LDR      R1,[SP, #+0]
   \   00000074   0x.... 0x....      BL       __aeabi_fmul
   \   00000078   0x9000             STR      R0,[SP, #+0]
   \   0000007A   0x4641             MOV      R1,R8
   \   0000007C   0x9803             LDR      R0,[SP, #+12]
   \   0000007E   0x.... 0x....      BL       __aeabi_fsub
   \   00000082   0x4601             MOV      R1,R0
   \   00000084   0x9800             LDR      R0,[SP, #+0]
   \   00000086   0x.... 0x....      BL       __aeabi_fdiv
   \   0000008A   0x4659             MOV      R1,R11
   \   0000008C   0x.... 0x....      BL       __aeabi_fadd
   \   00000090   0x4680             MOV      R8,R0
   \   00000092   0xB2E8             UXTB     R0,R5
   \   00000094   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   00000098   0x4605             MOV      R5,R0
   \   0000009A   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000009E   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   000000A2   0x4683             MOV      R11,R0
   \   000000A4   0xF107 0x0060      ADD      R0,R7,#+96
   \   000000A8   0x7840             LDRB     R0,[R0, #+1]
   \   000000AA   0x1E80             SUBS     R0,R0,#+2
   \   000000AC   0x4286             CMP      R6,R0
   \   000000AE   0xBFBA             ITTE     LT 
   \   000000B0   0x4630             MOVLT    R0,R6
   \   000000B2   0x4631             MOVLT    R1,R6
   \   000000B4   0x4601             MOVGE    R1,R0
   \   000000B6   0x9A02             LDR      R2,[SP, #+8]
   \   000000B8   0xEB02 0x0181      ADD      R1,R2,R1, LSL #+2
   \   000000BC   0xF851 0x7F04      LDR      R7,[R1, #+4]!
   \   000000C0   0xEB09 0x0149      ADD      R1,R9,R9, LSL #+1
   \   000000C4   0xEB0A 0x1101      ADD      R1,R10,R1, LSL #+4
   \   000000C8   0xEB01 0x0080      ADD      R0,R1,R0, LSL #+2
   \   000000CC   0x4639             MOV      R1,R7
   \   000000CE   0x6B40             LDR      R0,[R0, #+52]
   \   000000D0   0x.... 0x....      BL       __aeabi_fsub
   \   000000D4   0x4681             MOV      R9,R0
   \   000000D6   0x6820             LDR      R0,[R4, #+0]
   \   000000D8   0x4629             MOV      R1,R5
   \   000000DA   0x.... 0x....      BL       __aeabi_fsub
   \   000000DE   0x4649             MOV      R1,R9
   \   000000E0   0x.... 0x....      BL       __aeabi_fmul
   \   000000E4   0x4604             MOV      R4,R0
   \   000000E6   0x4658             MOV      R0,R11
   \   000000E8   0x4629             MOV      R1,R5
   \   000000EA   0x.... 0x....      BL       __aeabi_fsub
   \   000000EE   0x4601             MOV      R1,R0
   \   000000F0   0x4620             MOV      R0,R4
   \   000000F2   0x.... 0x....      BL       __aeabi_fdiv
   \   000000F6   0x4639             MOV      R1,R7
   \   000000F8   0x.... 0x....      BL       __aeabi_fadd
   \   000000FC   0x4604             MOV      R4,R0
   \   000000FE   0xB2F0             UXTB     R0,R6
   \   00000100   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   00000104   0x4605             MOV      R5,R0
   \   00000106   0x1C70             ADDS     R0,R6,#+1
   \   00000108   0xB2C0             UXTB     R0,R0
   \   0000010A   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   0000010E   0x4606             MOV      R6,R0
   \   00000110   0x4620             MOV      R0,R4
   \   00000112   0x4641             MOV      R1,R8
   \   00000114   0x.... 0x....      BL       __aeabi_fsub
   \   00000118   0x4604             MOV      R4,R0
   \   0000011A   0x9804             LDR      R0,[SP, #+16]
   \   0000011C   0x6800             LDR      R0,[R0, #+0]
   \   0000011E   0x4629             MOV      R1,R5
   \   00000120   0x.... 0x....      BL       __aeabi_fsub
   \   00000124   0x4621             MOV      R1,R4
   \   00000126   0x.... 0x....      BL       __aeabi_fmul
   \   0000012A   0x4604             MOV      R4,R0
   \   0000012C   0x4630             MOV      R0,R6
   \   0000012E   0x4629             MOV      R1,R5
   \   00000130   0x.... 0x....      BL       __aeabi_fsub
   \   00000134   0x4601             MOV      R1,R0
   \   00000136   0x4620             MOV      R0,R4
   \   00000138   0x.... 0x....      BL       __aeabi_fdiv
   \   0000013C   0x4641             MOV      R1,R8
   \   0000013E   0x.... 0x....      BL       __aeabi_fadd
   \   00000142   0x4604             MOV      R4,R0
   \   00000144   0x.... 0x....      BL       __iar_FDtest
   \   00000148   0x2802             CMP      R0,#+2
   \   0000014A   0xBF08             IT       EQ 
   \   0000014C   0x2400             MOVEQ    R4,#+0
   \   0000014E   0x4620             MOV      R0,R4
   \   00000150   0xB005             ADD      SP,SP,#+20
   \   00000152   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \   00000156   0xBF00             Nop      
   \                     ??get_z_correction_0:
   \   00000158   0x........         DC32     mksCfg
   \   0000015C   0x........         DC32     _ZN20unified_bed_leveling8z_valuesE

   \                                 In section .text, align 4
   \   __interwork __softfp float unified_bed_leveling::mesh_index_to_xpos(uint8_t)
   \                     _ZN20unified_bed_leveling18mesh_index_to_xposEh: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x4E40             LDR.N    R6,??mesh_index_to_xpos_0
   \   00000008   0xF896 0x7060      LDRB     R7,[R6, #+96]
   \   0000000C   0xF106 0x0008      ADD      R0,R6,#+8
   \   00000010   0xF240 0x3202      MOVW     R2,#+770
   \   00000014   0xF8B0 0x1050      LDRH     R1,[R0, #+80]
   \   00000018   0x4211             TST      R1,R2
   \   0000001A   0xD021             BEQ.N    ??mesh_index_to_xpos_1
   \   0000001C   0x45B8             CMP      R8,R7
   \   0000001E   0xD321             BCC.N    ??mesh_index_to_xpos_2
   \   00000020   0xF896 0x0098      LDRB     R0,[R6, #+152]
   \   00000024   0x.... 0x....      BL       __aeabi_ui2f
   \   00000028   0x4C38             LDR.N    R4,??mesh_index_to_xpos_0+0x4
   \   0000002A   0x4605             MOV      R5,R0
   \   0000002C   0x6820             LDR      R0,[R4, #+0]
   \   0000002E   0x4629             MOV      R1,R5
   \   00000030   0x.... 0x....      BL       __aeabi_fadd
   \   00000034   0x4606             MOV      R6,R0
   \   00000036   0x4640             MOV      R0,R8
   \   00000038   0x.... 0x....      BL       __aeabi_ui2f
   \   0000003C   0x4680             MOV      R8,R0
   \   0000003E   0x6860             LDR      R0,[R4, #+4]
   \   00000040   0x4629             MOV      R1,R5
   \   00000042   0x.... 0x....      BL       __aeabi_fsub
   \   00000046   0x4631             MOV      R1,R6
   \   00000048   0x.... 0x....      BL       __aeabi_fsub
   \   0000004C   0x4604             MOV      R4,R0
   \   0000004E   0x1E78             SUBS     R0,R7,#+1
   \   00000050   0x.... 0x....      BL       __aeabi_i2f
   \   00000054   0x4601             MOV      R1,R0
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0x.... 0x....      BL       __aeabi_fdiv
   \   0000005C   0x4641             MOV      R1,R8
   \   0000005E   0xE04C             B.N      ??mesh_index_to_xpos_3
   \                     ??mesh_index_to_xpos_1: (+1)
   \   00000060   0x45B8             CMP      R8,R7
   \   00000062   0xD204             BCS.N    ??mesh_index_to_xpos_4
   \                     ??mesh_index_to_xpos_2: (+1)
   \   00000064   0x482A             LDR.N    R0,??mesh_index_to_xpos_0+0x8
   \   00000066   0xF850 0x0028      LDR      R0,[R0, R8, LSL #+2]
   \   0000006A   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}
   \                     ??mesh_index_to_xpos_4: (+1)
   \   0000006E   0x68C5             LDR      R5,[R0, #+12]
   \   00000070   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000074   0x4629             MOV      R1,R5
   \   00000076   0x.... 0x....      BL       __aeabi_fmul
   \   0000007A   0x4681             MOV      R9,R0
   \   0000007C   0xF896 0x0098      LDRB     R0,[R6, #+152]
   \   00000080   0x.... 0x....      BL       __aeabi_ui2f
   \   00000084   0x4682             MOV      R10,R0
   \   00000086   0x4648             MOV      R0,R9
   \   00000088   0x4649             MOV      R1,R9
   \   0000008A   0x.... 0x....      BL       __aeabi_fsub
   \   0000008E   0x4651             MOV      R1,R10
   \   00000090   0x.... 0x....      BL       __aeabi_fadd
   \   00000094   0x4604             MOV      R4,R0
   \   00000096   0xF106 0x0060      ADD      R0,R6,#+96
   \   0000009A   0xF8D0 0xB00C      LDR      R11,[R0, #+12]
   \   0000009E   0x68B0             LDR      R0,[R6, #+8]
   \   000000A0   0x4659             MOV      R1,R11
   \   000000A2   0x.... 0x....      BL       __aeabi_fadd
   \   000000A6   0x4621             MOV      R1,R4
   \   000000A8   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000AC   0x4606             MOV      R6,R0
   \   000000AE   0xBF38             IT       CC 
   \   000000B0   0x4626             MOVCC    R6,R4
   \   000000B2   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000000B6   0x4649             MOV      R1,R9
   \   000000B8   0x.... 0x....      BL       __aeabi_fmul
   \   000000BC   0x4651             MOV      R1,R10
   \   000000BE   0x.... 0x....      BL       __aeabi_fsub
   \   000000C2   0x4604             MOV      R4,R0
   \   000000C4   0x4628             MOV      R0,R5
   \   000000C6   0x4659             MOV      R1,R11
   \   000000C8   0x.... 0x....      BL       __aeabi_fadd
   \   000000CC   0x4601             MOV      R1,R0
   \   000000CE   0x4620             MOV      R0,R4
   \   000000D0   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000D4   0xBF28             IT       CS 
   \   000000D6   0x460C             MOVCS    R4,R1
   \   000000D8   0x4640             MOV      R0,R8
   \   000000DA   0x.... 0x....      BL       __aeabi_ui2f
   \   000000DE   0x4605             MOV      R5,R0
   \   000000E0   0x4620             MOV      R0,R4
   \   000000E2   0x4631             MOV      R1,R6
   \   000000E4   0x.... 0x....      BL       __aeabi_fsub
   \   000000E8   0x4604             MOV      R4,R0
   \   000000EA   0x1E78             SUBS     R0,R7,#+1
   \   000000EC   0x.... 0x....      BL       __aeabi_i2f
   \   000000F0   0x4601             MOV      R1,R0
   \   000000F2   0x4620             MOV      R0,R4
   \   000000F4   0x.... 0x....      BL       __aeabi_fdiv
   \   000000F8   0x4629             MOV      R1,R5
   \                     ??mesh_index_to_xpos_3: (+1)
   \   000000FA   0x.... 0x....      BL       __aeabi_fmul
   \   000000FE   0x4631             MOV      R1,R6
   \   00000100   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \   00000104   0x.... 0x....      B.W      __aeabi_fadd
   \                     ??mesh_index_to_xpos_0:
   \   00000108   0x........         DC32     mksCfg
   \   0000010C   0x........         DC32     mksTmp
   \   00000110   0x........         DC32     _ZN20unified_bed_leveling19_mesh_index_to_xposE

   \                                 In section .text, align 4
   \   __interwork __softfp float unified_bed_leveling::mesh_index_to_ypos(uint8_t)
   \                     _ZN20unified_bed_leveling18mesh_index_to_yposEh: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x4E3F             LDR.N    R6,??mesh_index_to_ypos_0
   \   00000008   0xF896 0x7061      LDRB     R7,[R6, #+97]
   \   0000000C   0xF106 0x000C      ADD      R0,R6,#+12
   \   00000010   0xF240 0x3202      MOVW     R2,#+770
   \   00000014   0xF8B0 0x104C      LDRH     R1,[R0, #+76]
   \   00000018   0x4211             TST      R1,R2
   \   0000001A   0xD021             BEQ.N    ??mesh_index_to_ypos_1
   \   0000001C   0x45B8             CMP      R8,R7
   \   0000001E   0xD321             BCC.N    ??mesh_index_to_ypos_2
   \   00000020   0xF896 0x0098      LDRB     R0,[R6, #+152]
   \   00000024   0x.... 0x....      BL       __aeabi_ui2f
   \   00000028   0x4C37             LDR.N    R4,??mesh_index_to_ypos_0+0x4
   \   0000002A   0x4605             MOV      R5,R0
   \   0000002C   0x68A0             LDR      R0,[R4, #+8]
   \   0000002E   0x4629             MOV      R1,R5
   \   00000030   0x.... 0x....      BL       __aeabi_fadd
   \   00000034   0x4606             MOV      R6,R0
   \   00000036   0x4640             MOV      R0,R8
   \   00000038   0x.... 0x....      BL       __aeabi_ui2f
   \   0000003C   0x4680             MOV      R8,R0
   \   0000003E   0x68E0             LDR      R0,[R4, #+12]
   \   00000040   0x4629             MOV      R1,R5
   \   00000042   0x.... 0x....      BL       __aeabi_fsub
   \   00000046   0x4631             MOV      R1,R6
   \   00000048   0x.... 0x....      BL       __aeabi_fsub
   \   0000004C   0x4604             MOV      R4,R0
   \   0000004E   0x1E78             SUBS     R0,R7,#+1
   \   00000050   0x.... 0x....      BL       __aeabi_i2f
   \   00000054   0x4601             MOV      R1,R0
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0x.... 0x....      BL       __aeabi_fdiv
   \   0000005C   0x4641             MOV      R1,R8
   \   0000005E   0xE04A             B.N      ??mesh_index_to_ypos_3
   \                     ??mesh_index_to_ypos_1: (+1)
   \   00000060   0x45B8             CMP      R8,R7
   \   00000062   0xD204             BCS.N    ??mesh_index_to_ypos_4
   \                     ??mesh_index_to_ypos_2: (+1)
   \   00000064   0x4829             LDR.N    R0,??mesh_index_to_ypos_0+0x8
   \   00000066   0xF850 0x0028      LDR      R0,[R0, R8, LSL #+2]
   \   0000006A   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}
   \                     ??mesh_index_to_ypos_4: (+1)
   \   0000006E   0x68C5             LDR      R5,[R0, #+12]
   \   00000070   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000074   0x4629             MOV      R1,R5
   \   00000076   0x.... 0x....      BL       __aeabi_fmul
   \   0000007A   0x4681             MOV      R9,R0
   \   0000007C   0xF896 0x0098      LDRB     R0,[R6, #+152]
   \   00000080   0x.... 0x....      BL       __aeabi_ui2f
   \   00000084   0x4682             MOV      R10,R0
   \   00000086   0x4648             MOV      R0,R9
   \   00000088   0x4649             MOV      R1,R9
   \   0000008A   0x.... 0x....      BL       __aeabi_fsub
   \   0000008E   0x4651             MOV      R1,R10
   \   00000090   0x.... 0x....      BL       __aeabi_fadd
   \   00000094   0x4604             MOV      R4,R0
   \   00000096   0xF8D6 0xB070      LDR      R11,[R6, #+112]
   \   0000009A   0x68F0             LDR      R0,[R6, #+12]
   \   0000009C   0x4659             MOV      R1,R11
   \   0000009E   0x.... 0x....      BL       __aeabi_fadd
   \   000000A2   0x4621             MOV      R1,R4
   \   000000A4   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000A8   0x4606             MOV      R6,R0
   \   000000AA   0xBF38             IT       CC 
   \   000000AC   0x4626             MOVCC    R6,R4
   \   000000AE   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000000B2   0x4649             MOV      R1,R9
   \   000000B4   0x.... 0x....      BL       __aeabi_fmul
   \   000000B8   0x4651             MOV      R1,R10
   \   000000BA   0x.... 0x....      BL       __aeabi_fsub
   \   000000BE   0x4604             MOV      R4,R0
   \   000000C0   0x4628             MOV      R0,R5
   \   000000C2   0x4659             MOV      R1,R11
   \   000000C4   0x.... 0x....      BL       __aeabi_fadd
   \   000000C8   0x4601             MOV      R1,R0
   \   000000CA   0x4620             MOV      R0,R4
   \   000000CC   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000D0   0xBF28             IT       CS 
   \   000000D2   0x460C             MOVCS    R4,R1
   \   000000D4   0x4640             MOV      R0,R8
   \   000000D6   0x.... 0x....      BL       __aeabi_ui2f
   \   000000DA   0x4605             MOV      R5,R0
   \   000000DC   0x4620             MOV      R0,R4
   \   000000DE   0x4631             MOV      R1,R6
   \   000000E0   0x.... 0x....      BL       __aeabi_fsub
   \   000000E4   0x4604             MOV      R4,R0
   \   000000E6   0x1E78             SUBS     R0,R7,#+1
   \   000000E8   0x.... 0x....      BL       __aeabi_i2f
   \   000000EC   0x4601             MOV      R1,R0
   \   000000EE   0x4620             MOV      R0,R4
   \   000000F0   0x.... 0x....      BL       __aeabi_fdiv
   \   000000F4   0x4629             MOV      R1,R5
   \                     ??mesh_index_to_ypos_3: (+1)
   \   000000F6   0x.... 0x....      BL       __aeabi_fmul
   \   000000FA   0x4631             MOV      R1,R6
   \   000000FC   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \   00000100   0x.... 0x....      B.W      __aeabi_fadd
   \                     ??mesh_index_to_ypos_0:
   \   00000104   0x........         DC32     mksCfg
   \   00000108   0x........         DC32     mksTmp
   \   0000010C   0x........         DC32     _ZN20unified_bed_leveling19_mesh_index_to_yposE
     28            #include "Marlin.h"
     29            #include "hex_print_routines.h"

   \                                 In section .text, align 4
   \   __interwork __softfp float GCodeParser::value_float()
   \                     _ZN11GCodeParser11value_floatEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4B11             LDR.N    R3,??value_float_0
   \   00000004   0x6818             LDR      R0,[R3, #+0]
   \   00000006   0xB1E8             CBZ.N    R0,??value_float_1
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0xE000             B.N      ??value_float_2
   \                     ??value_float_3: (+1)
   \   0000000C   0x1C64             ADDS     R4,R4,#+1
   \                     ??value_float_2: (+1)
   \   0000000E   0xF994 0x5000      LDRSB    R5,[R4, #+0]
   \   00000012   0x2D00             CMP      R5,#+0
   \   00000014   0xBF18             IT       NE 
   \   00000016   0x2D20             CMPNE    R5,#+32
   \   00000018   0xD104             BNE.N    ??value_float_4
   \   0000001A   0x2200             MOVS     R2,#+0
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x.... 0x....      BL       __iar_Stod
   \   00000022   0xE00B             B.N      ??value_float_5
   \                     ??value_float_4: (+1)
   \   00000024   0x2D45             CMP      R5,#+69
   \   00000026   0xBF18             IT       NE 
   \   00000028   0x2D65             CMPNE    R5,#+101
   \   0000002A   0xD1EF             BNE.N    ??value_float_3
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x7020             STRB     R0,[R4, #+0]
   \   00000030   0x4601             MOV      R1,R0
   \   00000032   0x6818             LDR      R0,[R3, #+0]
   \   00000034   0x2200             MOVS     R2,#+0
   \   00000036   0x.... 0x....      BL       __iar_Stod
   \   0000003A   0x7025             STRB     R5,[R4, #+0]
   \                     ??value_float_5: (+1)
   \   0000003C   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   00000040   0x.... 0x....      B.W      __aeabi_d2f
   \                     ??value_float_1: (+1)
   \   00000044   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \   00000046   0xBF00             Nop      
   \                     ??value_float_0:
   \   00000048   0x........         DC32     _ZN11GCodeParser9value_ptrE

    FORCE_INLINE static millis_t value_millis_from_seconds() { return value_float() * 1000UL; }
                                                                      ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\gcode.h",207  Warning[Pa093]: 
          implicit conversion from floating point to integer

   \                                 In section .text, align 4
   \   __interwork __softfp int16_t GCodeParser::value_int()
   \                     _ZN11GCodeParser9value_intEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x4805             LDR.N    R0,??value_int_0
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xB120             CBZ.N    R0,??value_int_1
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x220A             MOVS     R2,#+10
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x.... 0x....      BL       __iar_Stolx
   \                     ??value_int_1: (+1)
   \   00000012   0xB200             SXTH     R0,R0
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
   \   00000016   0xBF00             Nop      
   \                     ??value_int_0:
   \   00000018   0x........         DC32     _ZN11GCodeParser9value_ptrE
     30            #include "configuration_store.h"
     31            #include "ultralcd.h"
     32            #include "stepper.h"
     33            #include "planner.h"
     34            #include "gcode.h"
     35            #include "bitmap_flags.h"
     36          
     37            #include <math.h>
     38            #include "least_squares_fit.h"

   \                                 In section .text, align 2
   \   __interwork __softfp void incremental_LSF(linear_fit_data *, float const &, float const &, float const &)
   \                     _Z15incremental_LSFP15linear_fit_dataRKfS2_S2_: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460F             MOV      R7,R1
   \   00000008   0x6829             LDR      R1,[R5, #+0]
   \   0000000A   0x6838             LDR      R0,[R7, #+0]
   \   0000000C   0x4616             MOV      R6,R2
   \   0000000E   0x4698             MOV      R8,R3
   \   00000010   0x.... 0x....      BL       __aeabi_fadd
   \   00000014   0x6028             STR      R0,[R5, #+0]
   \   00000016   0x6869             LDR      R1,[R5, #+4]
   \   00000018   0x6830             LDR      R0,[R6, #+0]
   \   0000001A   0x.... 0x....      BL       __aeabi_fadd
   \   0000001E   0x6068             STR      R0,[R5, #+4]
   \   00000020   0x68A9             LDR      R1,[R5, #+8]
   \   00000022   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   00000026   0x.... 0x....      BL       __aeabi_fadd
   \   0000002A   0x60A8             STR      R0,[R5, #+8]
   \   0000002C   0xF04F 0x597E      MOV      R9,#+1065353216
   \   00000030   0xF8D7 0xB000      LDR      R11,[R7, #+0]
   \   00000034   0x2402             MOVS     R4,#+2
   \   00000036   0x46CA             MOV      R10,R9
   \   00000038   0xE004             B.N      ??incremental_LSF_0
   \                     ??incremental_LSF_1: (+1)
   \   0000003A   0x4658             MOV      R0,R11
   \   0000003C   0x4659             MOV      R1,R11
   \   0000003E   0x.... 0x....      BL       __aeabi_fmul
   \   00000042   0x4683             MOV      R11,R0
   \                     ??incremental_LSF_0: (+1)
   \   00000044   0x07E0             LSLS     R0,R4,#+31
   \   00000046   0xD504             BPL.N    ??incremental_LSF_2
   \   00000048   0x4650             MOV      R0,R10
   \   0000004A   0x4659             MOV      R1,R11
   \   0000004C   0x.... 0x....      BL       __aeabi_fmul
   \   00000050   0x4682             MOV      R10,R0
   \                     ??incremental_LSF_2: (+1)
   \   00000052   0x0864             LSRS     R4,R4,#+1
   \   00000054   0xD1F1             BNE.N    ??incremental_LSF_1
   \   00000056   0x68E8             LDR      R0,[R5, #+12]
   \   00000058   0x4651             MOV      R1,R10
   \   0000005A   0x.... 0x....      BL       __aeabi_fadd
   \   0000005E   0x60E8             STR      R0,[R5, #+12]
   \   00000060   0x2402             MOVS     R4,#+2
   \   00000062   0xF8D6 0xB000      LDR      R11,[R6, #+0]
   \   00000066   0x46CA             MOV      R10,R9
   \   00000068   0xE004             B.N      ??incremental_LSF_3
   \                     ??incremental_LSF_4: (+1)
   \   0000006A   0x4658             MOV      R0,R11
   \   0000006C   0x4659             MOV      R1,R11
   \   0000006E   0x.... 0x....      BL       __aeabi_fmul
   \   00000072   0x4683             MOV      R11,R0
   \                     ??incremental_LSF_3: (+1)
   \   00000074   0x07E0             LSLS     R0,R4,#+31
   \   00000076   0xD504             BPL.N    ??incremental_LSF_5
   \   00000078   0x4650             MOV      R0,R10
   \   0000007A   0x4659             MOV      R1,R11
   \   0000007C   0x.... 0x....      BL       __aeabi_fmul
   \   00000080   0x4682             MOV      R10,R0
   \                     ??incremental_LSF_5: (+1)
   \   00000082   0x0864             LSRS     R4,R4,#+1
   \   00000084   0xD1F1             BNE.N    ??incremental_LSF_4
   \   00000086   0x6928             LDR      R0,[R5, #+16]
   \   00000088   0x4651             MOV      R1,R10
   \   0000008A   0x.... 0x....      BL       __aeabi_fadd
   \   0000008E   0x6128             STR      R0,[R5, #+16]
   \   00000090   0x2402             MOVS     R4,#+2
   \   00000092   0xF8D8 0xA000      LDR      R10,[R8, #+0]
   \   00000096   0xE004             B.N      ??incremental_LSF_6
   \                     ??incremental_LSF_7: (+1)
   \   00000098   0x4650             MOV      R0,R10
   \   0000009A   0x4651             MOV      R1,R10
   \   0000009C   0x.... 0x....      BL       __aeabi_fmul
   \   000000A0   0x4682             MOV      R10,R0
   \                     ??incremental_LSF_6: (+1)
   \   000000A2   0x07E0             LSLS     R0,R4,#+31
   \   000000A4   0xD504             BPL.N    ??incremental_LSF_8
   \   000000A6   0x4648             MOV      R0,R9
   \   000000A8   0x4651             MOV      R1,R10
   \   000000AA   0x.... 0x....      BL       __aeabi_fmul
   \   000000AE   0x4681             MOV      R9,R0
   \                     ??incremental_LSF_8: (+1)
   \   000000B0   0x0864             LSRS     R4,R4,#+1
   \   000000B2   0xD1F1             BNE.N    ??incremental_LSF_7
   \   000000B4   0x6968             LDR      R0,[R5, #+20]
   \   000000B6   0x4649             MOV      R1,R9
   \   000000B8   0x.... 0x....      BL       __aeabi_fadd
   \   000000BC   0x6168             STR      R0,[R5, #+20]
   \   000000BE   0x6839             LDR      R1,[R7, #+0]
   \   000000C0   0x6830             LDR      R0,[R6, #+0]
   \   000000C2   0x.... 0x....      BL       __aeabi_fmul
   \   000000C6   0x69A9             LDR      R1,[R5, #+24]
   \   000000C8   0x.... 0x....      BL       __aeabi_fadd
   \   000000CC   0x61A8             STR      R0,[R5, #+24]
   \   000000CE   0x6839             LDR      R1,[R7, #+0]
   \   000000D0   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   000000D4   0x.... 0x....      BL       __aeabi_fmul
   \   000000D8   0x69E9             LDR      R1,[R5, #+28]
   \   000000DA   0x.... 0x....      BL       __aeabi_fadd
   \   000000DE   0x61E8             STR      R0,[R5, #+28]
   \   000000E0   0x6831             LDR      R1,[R6, #+0]
   \   000000E2   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   000000E6   0x.... 0x....      BL       __aeabi_fmul
   \   000000EA   0x6A29             LDR      R1,[R5, #+32]
   \   000000EC   0x.... 0x....      BL       __aeabi_fadd
   \   000000F0   0x6228             STR      R0,[R5, #+32]
   \   000000F2   0x6838             LDR      R0,[R7, #+0]
   \   000000F4   0xF020 0x4100      BIC      R1,R0,#0x80000000
   \   000000F8   0x6A68             LDR      R0,[R5, #+36]
   \   000000FA   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000FE   0xBF3C             ITT      CC 
   \   00000100   0x6838             LDRCC    R0,[R7, #+0]
   \   00000102   0xF020 0x4000      BICCC    R0,R0,#0x80000000
   \   00000106   0x6268             STR      R0,[R5, #+36]
   \   00000108   0x6830             LDR      R0,[R6, #+0]
   \   0000010A   0xF020 0x4100      BIC      R1,R0,#0x80000000
   \   0000010E   0x6AA8             LDR      R0,[R5, #+40]
   \   00000110   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000114   0xBF3C             ITT      CC 
   \   00000116   0x6830             LDRCC    R0,[R6, #+0]
   \   00000118   0xF020 0x4000      BICCC    R0,R0,#0x80000000
   \   0000011C   0x62A8             STR      R0,[R5, #+40]
   \   0000011E   0xF04F 0x507E      MOV      R0,#+1065353216
   \   00000122   0x6BA9             LDR      R1,[R5, #+56]
   \   00000124   0x.... 0x....      BL       __aeabi_fadd
   \   00000128   0x63A8             STR      R0,[R5, #+56]
   \   0000012A   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
     39          
     40            #define UBL_G29_P31
     41          
     42            extern float destination[XYZE], current_position[XYZE];

   \                                 In section .text, align 2, keep-with-next
     43            void chirp_at_user() {}
   \                     _Z13chirp_at_userv: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     44            bool ubl_lcd_clicked() { }
                                            ^
Warning[Pe940]: missing return statement at end of non-void function
          "ubl_lcd_clicked"
   \                     _Z15ubl_lcd_clickedv: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     45          
     46            #if ENABLED(NEWPANEL)
     47              //void lcd_return_to_status();
     48              void lcd_return_to_status(){}
     49              void lcd_mesh_edit_setup(const float initial){}
     50              float lcd_mesh_edit(){}
     51              void lcd_z_offset_edit_setup(float){}
     52              extern void _lcd_ubl_output_map_lcd(){}
     53              float lcd_z_offset_edit(){}
     54            #endif
     55          
     56            extern float meshedit_done;
     57            extern long babysteps_done;
     58            extern float probe_pt(const float &rx, const float &ry, const bool, const uint8_t, const bool=true);
     59            extern bool set_probe_deployed(bool);
     60            extern void set_bed_leveling_enabled(bool);
     61          
     62            typedef void (*screenFunc_t)();

   \                                 In section .text, align 2, keep-with-next
     63            extern void lcd_goto_screen(screenFunc_t screen, const uint32_t encoder=0){}
   \                     _Z15lcd_goto_screenPFvvEj: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     64          
     65            #define SIZE_OF_LITTLE_RAISE 1
     66            #define BIG_RAISE_NOT_NEEDED 0
     67          
     68            int    unified_bed_leveling::g29_verbose_level,
     69                   unified_bed_leveling::g29_phase_value,
     70                   unified_bed_leveling::g29_repetition_cnt,
     71                   unified_bed_leveling::g29_storage_slot = 0,
     72                   unified_bed_leveling::g29_map_type;
     73            bool   unified_bed_leveling::g29_c_flag,
     74                   unified_bed_leveling::g29_x_flag,
     75                   unified_bed_leveling::g29_y_flag;
     76            float  unified_bed_leveling::g29_x_pos,
     77                   unified_bed_leveling::g29_y_pos,
     78                   unified_bed_leveling::g29_card_thickness = 0.0,
     79                   unified_bed_leveling::g29_constant = 0.0;
     80          
     81            #if HAS_BED_PROBE
     82              int  unified_bed_leveling::g29_grid_size;
     83            #endif
     84          
     85            /**
     86             *   G29: Unified Bed Leveling by Roxy
     87             *
     88             *   Parameters understood by this leveling system:
     89             *
     90             *   A     Activate   Activate the Unified Bed Leveling system.
     91             *
     92             *   B #   Business   Use the 'Business Card' mode of the Manual Probe subsystem with P2.
     93             *                    Note: A non-compressible Spark Gap feeler gauge is recommended over a business card.
     94             *                    In this mode of G29 P2, a business or index card is used as a shim that the nozzle can
     95             *                    grab onto as it is lowered. In principle, the nozzle-bed distance is the same when the
     96             *                    same resistance is felt in the shim. You can omit the numerical value on first invocation
     97             *                    of G29 P2 B to measure shim thickness. Subsequent use of 'B' will apply the previously-
     98             *                    measured thickness by default.
     99             *
    100             *   C     Continue   G29 P1 C continues the generation of a partially-constructed Mesh without invalidating
    101             *                    previous measurements.
    102             *
    103             *   C     Constant   G29 P2 C specifies a Constant and tells the Manual Probe subsystem to use the current
    104             *                    location in its search for the closest unmeasured Mesh Point.
    105             *
    106             *                    G29 P3 C specifies the Constant for the fill. Otherwise, uses a "reasonable" value.
    107             *
    108             *   C     Current    G29 Z C uses the Current location (instead of bed center or nearest edge).
    109             *
    110             *   D     Disable    Disable the Unified Bed Leveling system.
    111             *
    112             *   E     Stow_probe Stow the probe after each sampled point.
    113             *
    114             *   F #   Fade       Fade the amount of Mesh Based Compensation over a specified height. At the
    115             *                    specified height, no correction is applied and natural printer kenimatics take over. If no
    116             *                    number is specified for the command, 10mm is assumed to be reasonable.
    117             *
    118             *   H #   Height     With P2, 'H' specifies the Height to raise the nozzle after each manual probe of the bed.
    119             *                    If omitted, the nozzle will raise by Z_CLEARANCE_BETWEEN_PROBES.
    120             *
    121             *   H #   Offset     With P4, 'H' specifies the Offset above the mesh height to place the nozzle.
    122             *                    If omitted, Z_CLEARANCE_BETWEEN_PROBES will be used.
    123             *
    124             *   I #   Invalidate Invalidate the specified number of Mesh Points near the given 'X' 'Y'. If X or Y are omitted,
    125             *                    the nozzle location is used. If no 'I' value is given, only the point nearest to the location
    126             *                    is invalidated. Use 'T' to produce a map afterward. This command is useful to invalidate a
    127             *                    portion of the Mesh so it can be adjusted using other UBL tools. When attempting to invalidate
    128             *                    an isolated bad mesh point, the 'T' option shows the nozzle position in the Mesh with (#). You
    129             *                    can move the nozzle around and use this feature to select the center of the area (or cell) to
    130             *                    invalidate.
    131             *
    132             *   J #   Grid       Perform a Grid Based Leveling of the current Mesh using a grid with n points on a side.
    133             *                    Not specifying a grid size will invoke the 3-Point leveling function.
    134             *
    135             *   K #   Kompare    Kompare current Mesh with stored Mesh # replacing current Mesh with the result. This
    136             *                    command literally performs a diff between two Meshes.
    137             *
    138             *   L     Load       Load Mesh from the previously activated location in the EEPROM.
    139             *
    140             *   L #   Load       Load Mesh from the specified location in the EEPROM. Set this location as activated
    141             *                    for subsequent Load and Store operations.
    142             *
    143             *   The P or Phase commands are used for the bulk of the work to setup a Mesh. In general, your Mesh will
    144             *   start off being initialized with a G29 P0 or a G29 P1. Further refinement of the Mesh happens with
    145             *   each additional Phase that processes it.
    146             *
    147             *   P0    Phase 0    Zero Mesh Data and turn off the Mesh Compensation System. This reverts the
    148             *                    3D Printer to the same state it was in before the Unified Bed Leveling Compensation
    149             *                    was turned on. Setting the entire Mesh to Zero is a special case that allows
    150             *                    a subsequent G or T leveling operation for backward compatibility.
    151             *
    152             *   P1    Phase 1    Invalidate entire Mesh and continue with automatic generation of the Mesh data using
    153             *                    the Z-Probe. Usually the probe can't reach all areas that the nozzle can reach. On
    154             *                    Cartesian printers, points within the X_PROBE_OFFSET_FROM_EXTRUDER and Y_PROBE_OFFSET_FROM_EXTRUDER
    155             *                    area cannot be automatically probed. For Delta printers the area in which DELTA_PROBEABLE_RADIUS
    156             *                    and DELTA_PRINTABLE_RADIUS do not overlap will not be automatically probed.
    157             *
    158             *                    Unreachable points will be handled in Phase 2 and Phase 3.
    159             *
    160             *                    Use 'C' to leave the previous mesh intact and automatically probe needed points. This allows you
    161             *                    to invalidate parts of the Mesh but still use Automatic Probing.
    162             *
    163             *                    The 'X' and 'Y' parameters prioritize where to try and measure points. If omitted, the current
    164             *                    probe position is used.
    165             *
    166             *                    Use 'T' (Topology) to generate a report of mesh generation.
    167             *
    168             *                    P1 will suspend Mesh generation if the controller button is held down. Note that you may need
    169             *                    to press and hold the switch for several seconds if moves are underway.
    170             *
    171             *   P2    Phase 2    Probe unreachable points.
    172             *
    173             *                    Use 'H' to set the height between Mesh points. If omitted, Z_CLEARANCE_BETWEEN_PROBES is used.
    174             *                    Smaller values will be quicker. Move the nozzle down till it barely touches the bed. Make sure the
    175             *                    nozzle is clean and unobstructed. Use caution and move slowly. This can damage your printer!
    176             *                    (Uses SIZE_OF_LITTLE_RAISE mm if the nozzle is moving less than BIG_RAISE_NOT_NEEDED mm.)
    177             *
    178             *                    The 'H' value can be negative if the Mesh dips in a large area. Press and hold the
    179             *                    controller button to terminate the current Phase 2 command. You can then re-issue "G29 P 2"
    180             *                    with an 'H' parameter more suitable for the area you're manually probing. Note that the command
    181             *                    tries to start in a corner of the bed where movement will be predictable. Override the distance
    182             *                    calculation location with the X and Y parameters. You can print a Mesh Map (G29 T) to see where
    183             *                    the mesh is invalidated and where the nozzle needs to move to complete the command. Use 'C' to
    184             *                    indicate that the search should be based on the current position.
    185             *
    186             *                    The 'B' parameter for this command is described above. It places the manual probe subsystem into
    187             *                    Business Card mode where the thickness of a business card is measured and then used to accurately
    188             *                    set the nozzle height in all manual probing for the duration of the command. A Business card can
    189             *                    be used, but you'll get better results with a flexible Shim that doesn't compress. This makes it
    190             *                    easier to produce similar amounts of force and get more accurate measurements. Google if you're
    191             *                    not sure how to use a shim.
    192             *
    193             *                    The 'T' (Map) parameter helps track Mesh building progress.
    194             *
    195             *                    NOTE: P2 requires an LCD controller!
    196             *
    197             *   P3    Phase 3    Fill the unpopulated regions of the Mesh with a fixed value. There are two different paths to
    198             *                    go down:
    199             *
    200             *                    - If a 'C' constant is specified, the closest invalid mesh points to the nozzle will be filled,
    201             *                      and a repeat count can then also be specified with 'R'.
    202             *
    203             *                    - Leaving out 'C' invokes Smart Fill, which scans the mesh from the edges inward looking for
    204             *                      invalid mesh points. Adjacent points are used to determine the bed slope. If the bed is sloped
    205             *                      upward from the invalid point, it takes the value of the nearest point. If sloped downward, it's
    206             *                      replaced by a value that puts all three points in a line. This version of G29 P3 is a quick, easy
    207             *                      and (usually) safe way to populate unprobed mesh regions before continuing to G26 Mesh Validation
    208             *                      Pattern. Note that this populates the mesh with unverified values. Pay attention and use caution.
    209             *
    210             *   P4    Phase 4    Fine tune the Mesh. The Delta Mesh Compensation System assumes the existence of
    211             *                    an LCD Panel. It is possible to fine tune the mesh without an LCD Panel using
    212             *                    G42 and M421. See the UBL documentation for further details.
    213             *
    214             *                    Phase 4 is meant to be used with G26 Mesh Validation to fine tune the mesh by direct editing
    215             *                    of Mesh Points. Raise and lower points to fine tune the mesh until it gives consistently reliable
    216             *                    adhesion.
    217             *
    218             *                    P4 moves to the closest Mesh Point (and/or the given X Y), raises the nozzle above the mesh height
    219             *                    by the given 'H' offset (or default Z_CLEARANCE_BETWEEN_PROBES), and waits while the controller is
    220             *                    used to adjust the nozzle height. On click the displayed height is saved in the mesh.
    221             *
    222             *                    Start Phase 4 at a specific location with X and Y. Adjust a specific number of Mesh Points with
    223             *                    the 'R' (Repeat) parameter. (If 'R' is left out, the whole matrix is assumed.) This command can be
    224             *                    terminated early (e.g., after editing the area of interest) by pressing and holding the encoder button.
    225             *
    226             *                    The general form is G29 P4 [R points] [X position] [Y position]
    227             *
    228             *                    The H [offset] parameter is useful if a shim is used to fine-tune the mesh. For a 0.4mm shim the
    229             *                    command would be G29 P4 H0.4. The nozzle is moved to the shim height, you adjust height to the shim,
    230             *                    and on click the height minus the shim thickness will be saved in the mesh.
    231             *
    232             *                    !!Use with caution, as a very poor mesh could cause the nozzle to crash into the bed!!
    233             *
    234             *                    NOTE:  P4 is not available unless you have LCD support enabled!
    235             *
    236             *   P5    Phase 5    Find Mean Mesh Height and Standard Deviation. Typically, it is easier to use and
    237             *                    work with the Mesh if it is Mean Adjusted. You can specify a C parameter to
    238             *                    Correct the Mesh to a 0.00 Mean Height. Adding a C parameter will automatically
    239             *                    execute a G29 P6 C <mean height>.
    240             *
    241             *   P6    Phase 6    Shift Mesh height. The entire Mesh's height is adjusted by the height specified
    242             *                    with the C parameter. Being able to adjust the height of a Mesh is useful tool. It
    243             *                    can be used to compensate for poorly calibrated Z-Probes and other errors. Ideally,
    244             *                    you should have the Mesh adjusted for a Mean Height of 0.00 and the Z-Probe measuring
    245             *                    0.000 at the Z Home location.
    246             *
    247             *   Q     Test       Load specified Test Pattern to assist in checking correct operation of system. This
    248             *                    command is not anticipated to be of much value to the typical user. It is intended
    249             *                    for developers to help them verify correct operation of the Unified Bed Leveling System.
    250             *
    251             *   R #   Repeat     Repeat this command the specified number of times. If no number is specified the
    252             *                    command will be repeated GRID_MAX_POINTS_X * GRID_MAX_POINTS_Y times.
    253             *
    254             *   S     Store      Store the current Mesh in the Activated area of the EEPROM. It will also store the
    255             *                    current state of the Unified Bed Leveling system in the EEPROM.
    256             *
    257             *   S #   Store      Store the current Mesh at the specified location in EEPROM. Activate this location
    258             *                    for subsequent Load and Store operations. Valid storage slot numbers begin at 0 and
    259             *                    extend to a limit related to the available EEPROM storage.
    260             *
    261             *   S -1  Store      Store the current Mesh as a print out that is suitable to be feed back into the system
    262             *                    at a later date. The GCode output can be saved and later replayed by the host software
    263             *                    to reconstruct the current mesh on another machine.
    264             *
    265             *   T     Topology   Display the Mesh Map Topology.
    266             *                    'T' can be used alone (e.g., G29 T) or in combination with most of the other commands.
    267             *                    This option works with all Phase commands (e.g., G29 P4 R 5 T X 50 Y100 C -.1 O)
    268             *                    This parameter can also specify a Map Type. T0 (the default) is user-readable. T1 can
    269             *                    is suitable to paste into a spreadsheet for a 3D graph of the mesh.
    270             *
    271             *   U     Unlevel    Perform a probe of the outer perimeter to assist in physically leveling unlevel beds.
    272             *                    Only used for G29 P1 T U. This speeds up the probing of the edge of the bed. Useful
    273             *                    when the entire bed doesn't need to be probed because it will be adjusted.
    274             *
    275             *   V #   Verbosity  Set the verbosity level (0-4) for extra details. (Default 0)
    276             *
    277             *   W     What?      Display valuable Unified Bed Leveling System data.
    278             *
    279             *   X #              X Location for this command
    280             *
    281             *   Y #              Y Location for this command
    282             *
    283             *
    284             *   Release Notes:
    285             *   You MUST do M502, M500 to initialize the storage. Failure to do this will cause all
    286             *   kinds of problems. Enabling EEPROM Storage is highly recommended. With EEPROM Storage
    287             *   of the mesh, you are limited to 3-Point and Grid Leveling. (G29 P0 T and G29 P0 G
    288             *   respectively.)
    289             *
    290             *   When you do a G28 and then a G29 P1 to automatically build your first mesh, you are going to notice
    291             *   the Unified Bed Leveling probes points further and further away from the starting location. (The
    292             *   starting location defaults to the center of the bed.)   The original Grid and Mesh leveling used
    293             *   a Zig Zag pattern. The new pattern is better, especially for people with Delta printers. This
    294             *   allows you to get the center area of the Mesh populated (and edited) quicker. This allows you to
    295             *   perform a small print and check out your settings quicker. You do not need to populate the
    296             *   entire mesh to use it. (You don't want to spend a lot of time generating a mesh only to realize
    297             *   you don't have the resolution or zprobe_zoffset set correctly. The Mesh generation
    298             *   gathers points closest to where the nozzle is located unless you specify an (X,Y) coordinate pair.
    299             *
    300             *   The Unified Bed Leveling uses a lot of EEPROM storage to hold its data. And it takes some effort
    301             *   to get this Mesh data correct for a user's printer. We do not want this data destroyed as
    302             *   new versions of Marlin add or subtract to the items stored in EEPROM. So, for the benefit of
    303             *   the users, we store the Mesh data at the end of the EEPROM and do not keep it contiguous with the
    304             *   other data stored in the EEPROM. (For sure the developers are going to complain about this, but
    305             *   this is going to be helpful to the users!)
    306             *
    307             *   The foundation of this Bed Leveling System is built on Epatel's Mesh Bed Leveling code. A big
    308             *   'Thanks!' to him and the creators of 3-Point and Grid Based leveling. Combining their contributions
    309             *   we now have the functionality and features of all three systems combined.
    310             */
    311          
    312          //  void unified_bed_leveling::G29() {

   \                                 In section .text, align 4, keep-with-next
    313            void unified_bed_leveling::gcode_G29_UBL() {
   \                     _ZN20unified_bed_leveling13gcode_G29_UBLEv: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
    314          
    315              if (!settings.calc_num_meshes()) {
   \   00000006   0x.... 0x....      BL       _ZN14MarlinSettings15calc_num_meshesEv
   \   0000000A   0xB938             CBNZ.N   R0,??gcode_G29_UBL_2
    316                SERIAL_PROTOCOLLNPGM("?Enable EEPROM and init with");
   \   0000000C   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0
   \   00000010   0x.... 0x....      BL       _Z14serialprintPGMPKc
    317                SERIAL_PROTOCOLLNPGM("M502, M500, M501 in that order.\n");
   \   00000014   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0x4
   \   00000018   0xF000 0xBD7A      B.W      ??gcode_G29_UBL_3
    318                return;
    319              }
    320          
    321              if (g29_parameter_parsing()) return; // abort if parsing the simple parameters causes a problem,
   \                     ??gcode_G29_UBL_2: (+1)
   \   0000001C   0x.... 0x....      BL       _ZN20unified_bed_leveling21g29_parameter_parsingEv
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xF040 0x85A7      BNE.W    ??gcode_G29_UBL_4
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x2201             MOVS     R2,#+1
   \   0000002A   0x4608             MOV      R0,R1
    322          
    323              // Check for commands that require the printer to be homed
    324              if (axis_unhomed_error()) {
   \   0000002C   0x.... 0x....      BL       _Z18axis_unhomed_errorbbb
   \   00000030   0xB390             CBZ.N    R0,??gcode_G29_UBL_5
    325                const int8_t p_val = parser.intval('P', -1);
   \   00000032   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0x8
   \   00000036   0x7840             LDRB     R0,[R0, #+1]
   \   00000038   0x0600             LSLS     R0,R0,#+24
   \   0000003A   0xD506             BPL.N    ??gcode_G29_UBL_6
   \   0000003C   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0xC
   \   00000040   0x7BC0             LDRB     R0,[R0, #+15]
   \   00000042   0xB9C8             CBNZ.N   R0,??gcode_G29_UBL_7
   \   00000044   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0x10
   \   00000048   0x6008             STR      R0,[R1, #+0]
   \                     ??gcode_G29_UBL_6: (+1)
   \   0000004A   0xF04F 0x30FF      MOV      R0,#-1
   \                     ??gcode_G29_UBL_8: (+1)
   \   0000004E   0xB240             SXTB     R0,R0
    326                if (p_val == 1 || p_val == 2 || p_val == 4 || parser.seen('J'))
   \   00000050   0x2801             CMP      R0,#+1
   \   00000052   0xBF1C             ITT      NE 
   \   00000054   0x2802             CMPNE    R0,#+2
   \   00000056   0x2804             CMPNE    R0,#+4
   \   00000058   0xD01C             BEQ.N    ??gcode_G29_UBL_9
   \   0000005A   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0x8
   \   0000005E   0x7840             LDRB     R0,[R0, #+1]
   \   00000060   0x0780             LSLS     R0,R0,#+30
   \   00000062   0xD519             BPL.N    ??gcode_G29_UBL_5
   \   00000064   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0xC
   \   00000068   0x7A40             LDRB     R0,[R0, #+9]
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xBF1E             ITTT     NE 
   \   0000006E   0x.... 0x....      LDRNE.W  R1,??DataTable75
   \   00000072   0x6809             LDRNE    R1,[R1, #+0]
   \   00000074   0x1840             ADDNE    R0,R0,R1
   \   00000076   0xE00A             B.N      ??gcode_G29_UBL_10
   \                     ??gcode_G29_UBL_7: (+1)
   \   00000078   0x.... 0x....      LDR.W    R5,??DataTable75
   \   0000007C   0x6829             LDR      R1,[R5, #+0]
   \   0000007E   0x1840             ADDS     R0,R0,R1
   \   00000080   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0x10
   \   00000084   0x6008             STR      R0,[R1, #+0]
   \   00000086   0xD0E0             BEQ.N    ??gcode_G29_UBL_6
   \   00000088   0x.... 0x....      BL       _ZN11GCodeParser9value_intEv
   \   0000008C   0xE7DF             B.N      ??gcode_G29_UBL_8
   \                     ??gcode_G29_UBL_10: (+1)
   \   0000008E   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0x10
   \   00000092   0x6008             STR      R0,[R1, #+0]
    327                  home_all_axes();
   \                     ??gcode_G29_UBL_9: (+1)
   \   00000094   0x.... 0x....      BL       _Z13home_all_axesv
    328              }
    329          
    330              // Invalidate Mesh Points. This command is a little bit asymmetrical because
    331              // it directly specifies the repetition count and does not use the 'R' parameter.
    332              if (parser.seen('I')) {
   \                     ??gcode_G29_UBL_5: (+1)
   \   00000098   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0x8
   \   0000009C   0x.... 0x....      LDR.W    R4,??DataTable75_1
   \   000000A0   0x7840             LDRB     R0,[R0, #+1]
   \   000000A2   0x07C0             LSLS     R0,R0,#+31
   \   000000A4   0xD559             BPL.N    ??gcode_G29_UBL_11
   \   000000A6   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0xC
   \   000000AA   0x7A00             LDRB     R0,[R0, #+8]
   \   000000AC   0xB920             CBNZ.N   R0,??gcode_G29_UBL_12
   \   000000AE   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0x10
   \   000000B2   0x6008             STR      R0,[R1, #+0]
   \   000000B4   0x2600             MOVS     R6,#+0
   \   000000B6   0xE008             B.N      ??gcode_G29_UBL_13
   \                     ??gcode_G29_UBL_12: (+1)
   \   000000B8   0x.... 0x....      LDR.W    R5,??DataTable75
   \   000000BC   0x6829             LDR      R1,[R5, #+0]
   \   000000BE   0x1840             ADDS     R0,R0,R1
   \   000000C0   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0x10
   \   000000C4   0x6008             STR      R0,[R1, #+0]
    333                uint8_t cnt = 0;
   \   000000C6   0x2600             MOVS     R6,#+0
    334                g29_repetition_cnt = parser.has_value() ? parser.value_int() : 1;
   \   000000C8   0xB908             CBNZ.N   R0,??gcode_G29_UBL_14
   \                     ??gcode_G29_UBL_13: (+1)
   \   000000CA   0x2001             MOVS     R0,#+1
   \   000000CC   0xE001             B.N      ??gcode_G29_UBL_15
   \                     ??gcode_G29_UBL_14: (+1)
   \   000000CE   0x.... 0x....      BL       _ZN11GCodeParser9value_intEv
    335                if (g29_repetition_cnt >= GRID_MAX_POINTS) {
   \                     ??gcode_G29_UBL_15: (+1)
   \   000000D2   0x.... 0x....      LDR.W    R5,??DataTable75_2
   \   000000D6   0xF895 0x1060      LDRB     R1,[R5, #+96]
   \   000000DA   0x60E0             STR      R0,[R4, #+12]
   \   000000DC   0xF105 0x0260      ADD      R2,R5,#+96
   \   000000E0   0x7852             LDRB     R2,[R2, #+1]
   \   000000E2   0x4351             MULS     R1,R2,R1
   \   000000E4   0x4288             CMP      R0,R1
   \   000000E6   0xDB0F             BLT.N    ??gcode_G29_UBL_16
    336                  set_all_mesh_points_to_value(NAN);
   \   000000E8   0xF06F 0x4000      MVN      R0,#-2147483648
   \   000000EC   0x.... 0x....      BL       _ZN20unified_bed_leveling28set_all_mesh_points_to_valueEf
   \   000000F0   0xE02F             B.N      ??gcode_G29_UBL_17
    337                }
    338                else {
    339                  while (g29_repetition_cnt--) {
    340                    if (cnt > 20) { cnt = 0; idle(); }
    341                    const mesh_index_pair location = find_closest_mesh_point_of_type(REAL, g29_x_pos, g29_y_pos, USE_NOZZLE_AS_REFERENCE, NULL);
    342                    if (location.x_index < 0) {
    343                      // No more REACHABLE mesh points to invalidate, so we ASSUME the user
    344                      // meant to invalidate the ENTIRE mesh, which cannot be done with
    345                      // find_closest_mesh_point loop which only returns REACHABLE points.
    346                      set_all_mesh_points_to_value(NAN);
    347                      SERIAL_PROTOCOLLNPGM("Entire Mesh invalidated.\n");
    348                      break;            // No more invalid Mesh Points to populate
    349                    }
    350                    z_values[location.x_index][location.y_index] = NAN;
   \                     ??gcode_G29_UBL_18: (+1)
   \   000000F2   0xEB01 0x0341      ADD      R3,R1,R1, LSL #+1
   \   000000F6   0x.... 0x....      LDR.W    R1,??DataTable75_3
   \   000000FA   0xF99D 0x2009      LDRSB    R2,[SP, #+9]
   \   000000FE   0xEB01 0x1103      ADD      R1,R1,R3, LSL #+4
    351                    cnt++;
   \   00000102   0x1C76             ADDS     R6,R6,#+1
   \   00000104   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
   \                     ??gcode_G29_UBL_16: (+1)
   \   00000108   0x68E0             LDR      R0,[R4, #+12]
   \   0000010A   0xB1F8             CBZ.N    R0,??gcode_G29_UBL_19
   \   0000010C   0x1E40             SUBS     R0,R0,#+1
   \   0000010E   0xB2F6             UXTB     R6,R6
   \   00000110   0x60E0             STR      R0,[R4, #+12]
   \   00000112   0x2E15             CMP      R6,#+21
   \   00000114   0xBFA4             ITT      GE 
   \   00000116   0x2600             MOVGE    R6,#+0
   \   00000118   0x.... 0x....      BLGE     _Z4idlev
   \   0000011C   0x2000             MOVS     R0,#+0
   \   0000011E   0x9001             STR      R0,[SP, #+4]
   \   00000120   0x9000             STR      R0,[SP, #+0]
   \   00000122   0xF104 0x031C      ADD      R3,R4,#+28
   \   00000126   0xF104 0x0218      ADD      R2,R4,#+24
   \   0000012A   0x2101             MOVS     R1,#+1
   \   0000012C   0xA802             ADD      R0,SP,#+8
   \   0000012E   0x.... 0x....      BL       _ZN20unified_bed_leveling31find_closest_mesh_point_of_typeE13MeshPointTypeRKfS2_bPj
   \   00000132   0xF99D 0x1008      LDRSB    R1,[SP, #+8]
   \   00000136   0xF06F 0x4000      MVN      R0,#-2147483648
   \   0000013A   0x2900             CMP      R1,#+0
   \   0000013C   0xD5D9             BPL.N    ??gcode_G29_UBL_18
   \   0000013E   0x.... 0x....      BL       _ZN20unified_bed_leveling28set_all_mesh_points_to_valueEf
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable75_4
   \   00000146   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   0000014A   0xE002             B.N      ??gcode_G29_UBL_17
    352                  }
    353                }
   \                     ??gcode_G29_UBL_19: (+1)
   \   0000014C   0xF04F 0x30FF      MOV      R0,#-1
   \   00000150   0x60E0             STR      R0,[R4, #+12]
    354                SERIAL_PROTOCOLLNPGM("Locations invalidated.\n");
   \                     ??gcode_G29_UBL_17: (+1)
   \   00000152   0x.... 0x....      LDR.W    R0,??DataTable75_5
   \   00000156   0x.... 0x....      BL       _Z14serialprintPGMPKc
    355              }
    356          
    357              if (parser.seen('Q')) {
   \                     ??gcode_G29_UBL_11: (+1)
   \   0000015A   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0x8
   \   0000015E   0x7880             LDRB     R0,[R0, #+2]
   \   00000160   0x07C0             LSLS     R0,R0,#+31
   \   00000162   0xD529             BPL.N    ??gcode_G29_UBL_20
   \   00000164   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0xC
   \   00000168   0x7C00             LDRB     R0,[R0, #+16]
   \   0000016A   0xB918             CBNZ.N   R0,??gcode_G29_UBL_21
   \   0000016C   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0x10
   \   00000170   0x6008             STR      R0,[R1, #+0]
   \   00000172   0xE007             B.N      ??gcode_G29_UBL_22
   \                     ??gcode_G29_UBL_21: (+1)
   \   00000174   0x.... 0x....      LDR.W    R5,??DataTable75
   \   00000178   0x6829             LDR      R1,[R5, #+0]
   \   0000017A   0x1840             ADDS     R0,R0,R1
   \   0000017C   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0x10
   \   00000180   0x6008             STR      R0,[R1, #+0]
    358                const int test_pattern = parser.has_value() ? parser.value_int() : -99;
   \   00000182   0xD102             BNE.N    ??gcode_G29_UBL_23
   \                     ??gcode_G29_UBL_22: (+1)
   \   00000184   0xF06F 0x0562      MVN      R5,#+98
   \   00000188   0xE002             B.N      ??gcode_G29_UBL_24
   \                     ??gcode_G29_UBL_23: (+1)
   \   0000018A   0x.... 0x....      BL       _ZN11GCodeParser9value_intEv
   \   0000018E   0x4605             MOV      R5,R0
    359                if (!WITHIN(test_pattern, -1, 2)) {
   \                     ??gcode_G29_UBL_24: (+1)
   \   00000190   0x1C68             ADDS     R0,R5,#+1
   \   00000192   0x2804             CMP      R0,#+4
   \   00000194   0xBF28             IT       CS 
    360                  SERIAL_PROTOCOLLNPGM("Invalid test_pattern value. (-1 to 2)\n");
   \   00000196   0x.... 0x....      LDRCS.W  R0,??DataTable75_6
   \   0000019A   0xF080 0x84B9      BCS.W    ??gcode_G29_UBL_3
    361                  return;
    362                }
    363                SERIAL_PROTOCOLLNPGM("Loading test_pattern values.\n");
   \   0000019E   0x.... 0x....      LDR.W    R0,??DataTable75_7
   \   000001A2   0x.... 0x....      BL       _Z14serialprintPGMPKc
    364                switch (test_pattern) {
   \   000001A6   0x1C6D             ADDS     R5,R5,#+1
   \   000001A8   0x2D03             CMP      R5,#+3
   \   000001AA   0xD805             BHI.N    ??gcode_G29_UBL_20
   \   000001AC   0xE8DF 0xF005      TBB      [PC, R5]
   \                     ??gcode_G29_UBL_0:
   \   000001B0   0x02 0x14          DC8      0x2,0x14,0xA1,0xDF
   \              0xA1 0xDF    
    365                  case -1:
    366                    g29_eeprom_dump();
   \                     ??gcode_G29_UBL_25: (+1)
   \   000001B4   0x.... 0x....      BL       _ZN20unified_bed_leveling15g29_eeprom_dumpEv
    367                    break;
    368                  case 0:
    369                    for (uint8_t x = 0; x < GRID_MAX_POINTS_X; x++) {   // Create a bowl shape - similar to
    370                      for (uint8_t y = 0; y < GRID_MAX_POINTS_Y; y++) { // a poorly calibrated Delta.
    371                        const float p1 = 0.5 * (GRID_MAX_POINTS_X) - x,
    372                                    p2 = 0.5 * (GRID_MAX_POINTS_Y) - y;
    373                        z_values[x][y] += 2.0 * HYPOT(p1, p2);
    374                      }
    375                    }
    376                    break;
    377                  case 1:
    378                    for (uint8_t x = 0; x < GRID_MAX_POINTS_X; x++) {  // Create a diagonal line several Mesh cells thick that is raised
    379                      z_values[x][x] += 9.999;
    380                      z_values[x][x + (x < GRID_MAX_POINTS_Y - 1) ? 1 : -1] += 9.999; // We want the altered line several mesh points thick
    381                    }
    382                    break;
    383                  case 2:
    384                    // Allow the user to specify the height because 10mm is a little extreme in some cases.
    385                    for (uint8_t x = (GRID_MAX_POINTS_X) / 3; x < 2 * (GRID_MAX_POINTS_X) / 3; x++)   // Create a rectangular raised area in
    386                      for (uint8_t y = (GRID_MAX_POINTS_Y) / 3; y < 2 * (GRID_MAX_POINTS_Y) / 3; y++) // the center of the bed
    387                        z_values[x][y] += parser.seen('C') ? g29_constant : 9.99;
    388                    break;
    389                }
    390              }
    391          
    392              #if HAS_BED_PROBE
    393          
    394                if (parser.seen('J')) {
   \                     ??gcode_G29_UBL_20: (+1)
   \   000001B8   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0x8
   \   000001BC   0x7840             LDRB     R0,[R0, #+1]
   \   000001BE   0x0780             LSLS     R0,R0,#+30
   \   000001C0   0xF140 0x8278      BPL.W    ??gcode_G29_UBL_26
   \   000001C4   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0xC
   \   000001C8   0x7A40             LDRB     R0,[R0, #+9]
   \   000001CA   0x2800             CMP      R0,#+0
   \   000001CC   0xBF1E             ITTT     NE 
   \   000001CE   0x.... 0x....      LDRNE.W  R1,??DataTable75
   \   000001D2   0x6809             LDRNE    R1,[R1, #+0]
   \   000001D4   0x1840             ADDNE    R0,R0,R1
   \   000001D6   0xE12E             B.N      ??gcode_G29_UBL_27
   \                     ??gcode_G29_UBL_28: (+1)
   \   000001D8   0x2600             MOVS     R6,#+0
   \   000001DA   0x.... 0x....      LDR.W    R5,??DataTable75_2
   \   000001DE   0xE001             B.N      ??gcode_G29_UBL_29
   \                     ??gcode_G29_UBL_30: (+1)
   \   000001E0   0x1C76             ADDS     R6,R6,#+1
   \   000001E2   0xB2F6             UXTB     R6,R6
   \                     ??gcode_G29_UBL_29: (+1)
   \   000001E4   0xF895 0x0060      LDRB     R0,[R5, #+96]
   \   000001E8   0x4286             CMP      R6,R0
   \   000001EA   0xDAE5             BGE.N    ??gcode_G29_UBL_20
   \   000001EC   0xEB06 0x0046      ADD      R0,R6,R6, LSL #+1
   \   000001F0   0x.... 0x....      LDR.W    R1,??DataTable75_3
   \   000001F4   0xEB01 0x1000      ADD      R0,R1,R0, LSL #+4
   \   000001F8   0x9000             STR      R0,[SP, #+0]
   \   000001FA   0x2700             MOVS     R7,#+0
   \   000001FC   0x4630             MOV      R0,R6
   \   000001FE   0x.... 0x....      BL       __aeabi_ui2d
   \   00000202   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   00000206   0xE030             B.N      ??gcode_G29_UBL_31
   \                     ??gcode_G29_UBL_32: (+1)
   \   00000208   0x4640             MOV      R0,R8
   \   0000020A   0x4641             MOV      R1,R8
   \   0000020C   0x.... 0x....      BL       __aeabi_fmul
   \   00000210   0x4680             MOV      R8,R0
   \                     ??gcode_G29_UBL_33: (+1)
   \   00000212   0xEA5F 0x70CA      LSLS     R0,R10,#+31
   \   00000216   0xD504             BPL.N    ??gcode_G29_UBL_34
   \   00000218   0x4658             MOV      R0,R11
   \   0000021A   0x4641             MOV      R1,R8
   \   0000021C   0x.... 0x....      BL       __aeabi_fmul
   \   00000220   0x4683             MOV      R11,R0
   \                     ??gcode_G29_UBL_34: (+1)
   \   00000222   0xEA5F 0x0A5A      LSRS     R10,R10,#+1
   \   00000226   0xD1EF             BNE.N    ??gcode_G29_UBL_32
   \   00000228   0x4648             MOV      R0,R9
   \   0000022A   0x4659             MOV      R1,R11
   \   0000022C   0x.... 0x....      BL       __aeabi_fadd
   \   00000230   0x.... 0x....      BL       sqrtf
   \   00000234   0x4682             MOV      R10,R0
   \   00000236   0x9800             LDR      R0,[SP, #+0]
   \   00000238   0xF850 0x0027      LDR      R0,[R0, R7, LSL #+2]
   \   0000023C   0x.... 0x....      BL       __aeabi_f2d
   \   00000240   0x4680             MOV      R8,R0
   \   00000242   0x4689             MOV      R9,R1
   \   00000244   0x4650             MOV      R0,R10
   \   00000246   0x.... 0x....      BL       __aeabi_f2d
   \   0000024A   0x2200             MOVS     R2,#+0
   \   0000024C   0xF04F 0x4380      MOV      R3,#+1073741824
   \   00000250   0x.... 0x....      BL       __aeabi_dmul
   \   00000254   0x4642             MOV      R2,R8
   \   00000256   0x464B             MOV      R3,R9
   \   00000258   0x.... 0x....      BL       __aeabi_dadd
   \   0000025C   0x.... 0x....      BL       __aeabi_d2f
   \   00000260   0x9900             LDR      R1,[SP, #+0]
   \   00000262   0xF841 0x0027      STR      R0,[R1, R7, LSL #+2]
   \   00000266   0x1C7F             ADDS     R7,R7,#+1
   \   00000268   0xB2FF             UXTB     R7,R7
   \                     ??gcode_G29_UBL_31: (+1)
   \   0000026A   0xF105 0x0160      ADD      R1,R5,#+96
   \   0000026E   0x7848             LDRB     R0,[R1, #+1]
   \   00000270   0x4287             CMP      R7,R0
   \   00000272   0xDAB5             BGE.N    ??gcode_G29_UBL_30
   \   00000274   0x.... 0x....      BL       __aeabi_ui2d
   \   00000278   0x2200             MOVS     R2,#+0
   \   0000027A   0x.... 0x....      LDR.W    R3,??DataTable76  ;; 0x3fe00000
   \   0000027E   0x.... 0x....      BL       __aeabi_dmul
   \   00000282   0x4680             MOV      R8,R0
   \   00000284   0x4689             MOV      R9,R1
   \   00000286   0x4638             MOV      R0,R7
   \   00000288   0x.... 0x....      BL       __aeabi_ui2d
   \   0000028C   0x4602             MOV      R2,R0
   \   0000028E   0x460B             MOV      R3,R1
   \   00000290   0x4640             MOV      R0,R8
   \   00000292   0x4649             MOV      R1,R9
   \   00000294   0x.... 0x....      BL       __aeabi_dsub
   \   00000298   0x.... 0x....      BL       __aeabi_d2f
   \   0000029C   0x4680             MOV      R8,R0
   \   0000029E   0xF895 0x0060      LDRB     R0,[R5, #+96]
   \   000002A2   0x.... 0x....      BL       __aeabi_ui2d
   \   000002A6   0x.... 0x....      LDR.W    R3,??DataTable76  ;; 0x3fe00000
   \   000002AA   0x2200             MOVS     R2,#+0
   \   000002AC   0x.... 0x....      BL       __aeabi_dmul
   \   000002B0   0xE9DD 0x2302      LDRD     R2,R3,[SP, #+8]
   \   000002B4   0x.... 0x....      BL       __aeabi_dsub
   \   000002B8   0x.... 0x....      BL       __aeabi_d2f
   \   000002BC   0x4683             MOV      R11,R0
   \   000002BE   0xF04F 0x0A02      MOV      R10,#+2
   \   000002C2   0xF04F 0x597E      MOV      R9,#+1065353216
   \   000002C6   0xE004             B.N      ??gcode_G29_UBL_35
   \                     ??gcode_G29_UBL_36: (+1)
   \   000002C8   0x4658             MOV      R0,R11
   \   000002CA   0x4659             MOV      R1,R11
   \   000002CC   0x.... 0x....      BL       __aeabi_fmul
   \   000002D0   0x4683             MOV      R11,R0
   \                     ??gcode_G29_UBL_35: (+1)
   \   000002D2   0xEA5F 0x70CA      LSLS     R0,R10,#+31
   \   000002D6   0xD504             BPL.N    ??gcode_G29_UBL_37
   \   000002D8   0x4648             MOV      R0,R9
   \   000002DA   0x4659             MOV      R1,R11
   \   000002DC   0x.... 0x....      BL       __aeabi_fmul
   \   000002E0   0x4681             MOV      R9,R0
   \                     ??gcode_G29_UBL_37: (+1)
   \   000002E2   0xEA5F 0x0A5A      LSRS     R10,R10,#+1
   \   000002E6   0xD1EF             BNE.N    ??gcode_G29_UBL_36
   \   000002E8   0xF04F 0x0A02      MOV      R10,#+2
   \   000002EC   0xF04F 0x5B7E      MOV      R11,#+1065353216
   \   000002F0   0xE78F             B.N      ??gcode_G29_UBL_33
   \                     ??gcode_G29_UBL_38: (+1)
   \   000002F2   0x.... 0x....      LDR.W    R5,??DataTable75_2
   \   000002F6   0xF895 0xA060      LDRB     R10,[R5, #+96]
   \   000002FA   0x2600             MOVS     R6,#+0
   \   000002FC   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000300   0xF43F 0xAF5A      BEQ.W    ??gcode_G29_UBL_20
   \   00000304   0x.... 0x....      LDR.W    R9,??DataTable75_3
   \   00000308   0x46C8             MOV      R8,R9
   \   0000030A   0xF04F 0x3BFF      MOV      R11,#-1
   \                     ??gcode_G29_UBL_39: (+1)
   \   0000030E   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   00000312   0x.... 0x....      BL       __aeabi_f2d
   \   00000316   0x.... 0x....      LDR.W    R2,??DataTable76_1  ;; 0xed916873
   \   0000031A   0x.... 0x....      LDR.W    R3,??DataTable76_2  ;; 0x4023ff7c
   \   0000031E   0x.... 0x....      BL       __aeabi_dadd
   \   00000322   0x.... 0x....      BL       __aeabi_d2f
   \   00000326   0xF8C8 0x0000      STR      R0,[R8, #+0]
   \   0000032A   0xF105 0x0060      ADD      R0,R5,#+96
   \   0000032E   0x7840             LDRB     R0,[R0, #+1]
   \   00000330   0x1E40             SUBS     R0,R0,#+1
   \   00000332   0x4286             CMP      R6,R0
   \   00000334   0xBFB4             ITE      LT 
   \   00000336   0x2001             MOVLT    R0,#+1
   \   00000338   0x2000             MOVGE    R0,#+0
   \   0000033A   0x1980             ADDS     R0,R0,R6
   \   0000033C   0xBF14             ITE      NE 
   \   0000033E   0x2701             MOVNE    R7,#+1
   \   00000340   0x465F             MOVEQ    R7,R11
   \   00000342   0xF859 0x0027      LDR      R0,[R9, R7, LSL #+2]
   \   00000346   0x.... 0x....      BL       __aeabi_f2d
   \   0000034A   0x.... 0x....      LDR.W    R2,??DataTable76_1  ;; 0xed916873
   \   0000034E   0x.... 0x....      LDR.W    R3,??DataTable76_2  ;; 0x4023ff7c
   \   00000352   0x.... 0x....      BL       __aeabi_dadd
   \   00000356   0x.... 0x....      BL       __aeabi_d2f
   \   0000035A   0xF849 0x0027      STR      R0,[R9, R7, LSL #+2]
   \   0000035E   0x1C76             ADDS     R6,R6,#+1
   \   00000360   0xF108 0x0834      ADD      R8,R8,#+52
   \   00000364   0xF109 0x0930      ADD      R9,R9,#+48
   \   00000368   0x4556             CMP      R6,R10
   \   0000036A   0xDBD0             BLT.N    ??gcode_G29_UBL_39
   \   0000036C   0xE724             B.N      ??gcode_G29_UBL_20
   \                     ??gcode_G29_UBL_40: (+1)
   \   0000036E   0x.... 0x....      LDR.W    R5,??DataTable75_2
   \   00000372   0x.... 0x....      LDR.W    R10,??DataTable76_3  ;; 0x47ae147b
   \   00000376   0xF895 0x2060      LDRB     R2,[R5, #+96]
   \   0000037A   0x.... 0x....      LDR.W    R11,??DataTable76_4  ;; 0x4023fae1
   \   0000037E   0x2003             MOVS     R0,#+3
   \   00000380   0xFB92 0xF0F0      SDIV     R0,R2,R0
   \   00000384   0xB2C0             UXTB     R0,R0
   \   00000386   0x9000             STR      R0,[SP, #+0]
   \   00000388   0xF105 0x0160      ADD      R1,R5,#+96
   \   0000038C   0x.... 0x....      LDR.W    R5,??DataTable75
   \   00000390   0x7848             LDRB     R0,[R1, #+1]
   \   00000392   0x2103             MOVS     R1,#+3
   \   00000394   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   00000398   0xB2C9             UXTB     R1,R1
   \   0000039A   0x9104             STR      R1,[SP, #+16]
   \   0000039C   0x0040             LSLS     R0,R0,#+1
   \   0000039E   0x2103             MOVS     R1,#+3
   \   000003A0   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000003A4   0x9003             STR      R0,[SP, #+12]
   \   000003A6   0x0050             LSLS     R0,R2,#+1
   \   000003A8   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000003AC   0x9002             STR      R0,[SP, #+8]
   \   000003AE   0xE006             B.N      ??gcode_G29_UBL_41
   \                     ??gcode_G29_UBL_42: (+1)
   \   000003B0   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0x10
   \   000003B4   0x6007             STR      R7,[R0, #+0]
   \   000003B6   0x9800             LDR      R0,[SP, #+0]
   \   000003B8   0x1C40             ADDS     R0,R0,#+1
   \   000003BA   0xB2C0             UXTB     R0,R0
   \   000003BC   0x9000             STR      R0,[SP, #+0]
   \                     ??gcode_G29_UBL_41: (+1)
   \   000003BE   0x9800             LDR      R0,[SP, #+0]
   \   000003C0   0x9902             LDR      R1,[SP, #+8]
   \   000003C2   0x4288             CMP      R0,R1
   \   000003C4   0xF6BF 0xAEF8      BGE.W    ??gcode_G29_UBL_20
   \   000003C8   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0x10
   \   000003CC   0x9E04             LDR      R6,[SP, #+16]
   \   000003CE   0x6807             LDR      R7,[R0, #+0]
   \   000003D0   0x9800             LDR      R0,[SP, #+0]
   \   000003D2   0xEB00 0x0140      ADD      R1,R0,R0, LSL #+1
   \   000003D6   0x.... 0x....      LDR.W    R0,??DataTable75_3
   \   000003DA   0xEB00 0x1001      ADD      R0,R0,R1, LSL #+4
   \   000003DE   0x9001             STR      R0,[SP, #+4]
   \   000003E0   0xE013             B.N      ??gcode_G29_UBL_43
   \                     ??gcode_G29_UBL_44: (+1)
   \   000003E2   0x46D0             MOV      R8,R10
   \   000003E4   0x46D9             MOV      R9,R11
   \                     ??gcode_G29_UBL_45: (+1)
   \   000003E6   0x9801             LDR      R0,[SP, #+4]
   \   000003E8   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000003EC   0x.... 0x....      BL       __aeabi_f2d
   \   000003F0   0x4602             MOV      R2,R0
   \   000003F2   0x460B             MOV      R3,R1
   \   000003F4   0x4640             MOV      R0,R8
   \   000003F6   0x4649             MOV      R1,R9
   \   000003F8   0x.... 0x....      BL       __aeabi_dadd
   \   000003FC   0x.... 0x....      BL       __aeabi_d2f
   \   00000400   0x9901             LDR      R1,[SP, #+4]
   \   00000402   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00000406   0x1C76             ADDS     R6,R6,#+1
   \   00000408   0xB2F6             UXTB     R6,R6
   \                     ??gcode_G29_UBL_43: (+1)
   \   0000040A   0x9803             LDR      R0,[SP, #+12]
   \   0000040C   0x4286             CMP      R6,R0
   \   0000040E   0xDACF             BGE.N    ??gcode_G29_UBL_42
   \   00000410   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0x8
   \   00000414   0x7800             LDRB     R0,[R0, #+0]
   \   00000416   0x0740             LSLS     R0,R0,#+29
   \   00000418   0xD5E3             BPL.N    ??gcode_G29_UBL_44
   \   0000041A   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0xC
   \   0000041E   0x7880             LDRB     R0,[R0, #+2]
   \   00000420   0x2800             CMP      R0,#+0
   \   00000422   0xBF0E             ITEE     EQ 
   \   00000424   0x2700             MOVEQ    R7,#+0
   \   00000426   0x6829             LDRNE    R1,[R5, #+0]
   \   00000428   0x1847             ADDNE    R7,R0,R1
   \   0000042A   0x6A20             LDR      R0,[R4, #+32]
   \   0000042C   0x.... 0x....      BL       __aeabi_f2d
   \   00000430   0x4680             MOV      R8,R0
   \   00000432   0x4689             MOV      R9,R1
   \   00000434   0xE7D7             B.N      ??gcode_G29_UBL_45
   \                     ??gcode_G29_UBL_27: (+1)
   \   00000436   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0x10
   \   0000043A   0x6008             STR      R0,[R1, #+0]
    395                  if (g29_grid_size) {  // if not 0 it is a normal n x n grid being probed
   \   0000043C   0x6A60             LDR      R0,[R4, #+36]
   \   0000043E   0xB1D8             CBZ.N    R0,??gcode_G29_UBL_46
    396                    save_ubl_active_state_and_disable();
   \   00000440   0x.... 0x....      LDR.W    R0,??DataTable77
   \   00000444   0x7800             LDRB     R0,[R0, #+0]
   \   00000446   0x70E0             STRB     R0,[R4, #+3]
   \   00000448   0x2000             MOVS     R0,#+0
   \   0000044A   0x.... 0x....      BL       _Z24set_bed_leveling_enabledb
    397                    tilt_mesh_based_on_probed_grid(parser.seen('T'));
   \   0000044E   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0x8
   \   00000452   0x7880             LDRB     R0,[R0, #+2]
   \   00000454   0x08C0             LSRS     R0,R0,#+3
   \   00000456   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000045A   0xD00A             BEQ.N    ??gcode_G29_UBL_47
   \   0000045C   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0xC
   \   00000460   0x7CC9             LDRB     R1,[R1, #+19]
   \   00000462   0xB119             CBZ.N    R1,??gcode_G29_UBL_48
   \   00000464   0x.... 0x....      LDR.W    R2,??DataTable75
   \   00000468   0x6812             LDR      R2,[R2, #+0]
   \   0000046A   0x1889             ADDS     R1,R1,R2
   \                     ??gcode_G29_UBL_48: (+1)
   \   0000046C   0x.... 0x....      LDR.W    R2,??find_mean_mesh_height_0+0x10
   \   00000470   0x6011             STR      R1,[R2, #+0]
   \                     ??gcode_G29_UBL_47: (+1)
   \   00000472   0x.... 0x....      BL       _ZN20unified_bed_leveling30tilt_mesh_based_on_probed_gridEb
    398                    restore_ubl_active_state_and_leave();
   \   00000476   0xE116             B.N      ??gcode_G29_UBL_49
    399                  }
    400                  else { // grid_size == 0 : A 3-Point leveling has been requested
    401                    float z3, z2, z1 = probe_pt(UBL_PROBE_PT_1_X, UBL_PROBE_PT_1_Y, false, g29_verbose_level);
   \                     ??gcode_G29_UBL_46: (+1)
   \   00000478   0x2001             MOVS     R0,#+1
   \   0000047A   0x9000             STR      R0,[SP, #+0]
   \   0000047C   0x2200             MOVS     R2,#+0
   \   0000047E   0x6863             LDR      R3,[R4, #+4]
   \   00000480   0x.... 0x....      LDR.W    R5,??DataTable75_2
   \   00000484   0xB2DB             UXTB     R3,R3
   \   00000486   0xF105 0x01BC      ADD      R1,R5,#+188
   \   0000048A   0xF105 0x00B8      ADD      R0,R5,#+184
   \   0000048E   0x.... 0x....      BL       _Z8probe_ptRKfS0_bhb
   \   00000492   0x9001             STR      R0,[SP, #+4]
    402                    if (!isnan(z1)) {
   \   00000494   0x.... 0x....      BL       __iar_FDtest
   \   00000498   0x2802             CMP      R0,#+2
   \   0000049A   0xD01B             BEQ.N    ??gcode_G29_UBL_50
    403                      z2 = probe_pt(UBL_PROBE_PT_2_X, UBL_PROBE_PT_2_Y, false, g29_verbose_level);
   \   0000049C   0x2001             MOVS     R0,#+1
   \   0000049E   0x9000             STR      R0,[SP, #+0]
   \   000004A0   0x2200             MOVS     R2,#+0
   \   000004A2   0x6863             LDR      R3,[R4, #+4]
   \   000004A4   0xB2DB             UXTB     R3,R3
   \   000004A6   0xF105 0x01C4      ADD      R1,R5,#+196
   \   000004AA   0xF105 0x00C0      ADD      R0,R5,#+192
   \   000004AE   0x.... 0x....      BL       _Z8probe_ptRKfS0_bhb
   \   000004B2   0x9002             STR      R0,[SP, #+8]
    404                      if (!isnan(z2))
   \   000004B4   0x.... 0x....      BL       __iar_FDtest
   \   000004B8   0x2802             CMP      R0,#+2
   \   000004BA   0xD00B             BEQ.N    ??gcode_G29_UBL_50
    405                        z3 = probe_pt(UBL_PROBE_PT_3_X, UBL_PROBE_PT_3_Y, true, g29_verbose_level);
   \   000004BC   0x2001             MOVS     R0,#+1
   \   000004BE   0x9000             STR      R0,[SP, #+0]
   \   000004C0   0x2201             MOVS     R2,#+1
   \   000004C2   0x6863             LDR      R3,[R4, #+4]
   \   000004C4   0xB2DB             UXTB     R3,R3
   \   000004C6   0xF105 0x01CC      ADD      R1,R5,#+204
   \   000004CA   0xF105 0x00C8      ADD      R0,R5,#+200
   \   000004CE   0x.... 0x....      BL       _Z8probe_ptRKfS0_bhb
   \   000004D2   0x9003             STR      R0,[SP, #+12]
    406                    }
    407          
    408                    if (isnan(z1) || isnan(z2) || isnan(z3)) { // probe_pt will return NAN if unreachable
   \                     ??gcode_G29_UBL_50: (+1)
   \   000004D4   0x9801             LDR      R0,[SP, #+4]
   \   000004D6   0x.... 0x....      BL       __iar_FDtest
   \   000004DA   0x2802             CMP      R0,#+2
   \   000004DC   0xD009             BEQ.N    ??gcode_G29_UBL_51
   \   000004DE   0x9802             LDR      R0,[SP, #+8]
   \   000004E0   0x.... 0x....      BL       __iar_FDtest
   \   000004E4   0x2802             CMP      R0,#+2
   \   000004E6   0xD004             BEQ.N    ??gcode_G29_UBL_51
   \   000004E8   0x9803             LDR      R0,[SP, #+12]
   \   000004EA   0x.... 0x....      BL       __iar_FDtest
   \   000004EE   0x2802             CMP      R0,#+2
   \   000004F0   0xD106             BNE.N    ??gcode_G29_UBL_52
    409                      SERIAL_ERROR_START();
   \                     ??gcode_G29_UBL_51: (+1)
   \   000004F2   0x.... 0x....      LDR.W    R0,??DataTable77_1
   \   000004F6   0x.... 0x....      BL       _Z14serialprintPGMPKc
    410                      SERIAL_ERRORLNPGM("Attempt to probe off the bed.");
   \   000004FA   0x.... 0x....      ADR.W    R0,`?<Constant "Attempt to probe off ...">`
   \   000004FE   0xE307             B.N      ??gcode_G29_UBL_3
    411                      goto LEAVE;
    412                    }
    413          
    414                    // Adjust z1, z2, z3 by the Mesh Height at these points. Just because they're non-zero
    415                    // doesn't mean the Mesh is tilted! (Compensate each probe point by what the Mesh says
    416                    // its height is.)
    417          
    418                    save_ubl_active_state_and_disable();
   \                     ??gcode_G29_UBL_52: (+1)
   \   00000500   0x.... 0x....      LDR.W    R0,??DataTable77
   \   00000504   0x7800             LDRB     R0,[R0, #+0]
   \   00000506   0x70E0             STRB     R0,[R4, #+3]
   \   00000508   0x2000             MOVS     R0,#+0
   \   0000050A   0x.... 0x....      BL       _Z24set_bed_leveling_enabledb
    419                    z1 -= get_z_correction(UBL_PROBE_PT_1_X, UBL_PROBE_PT_1_Y) /* + zprobe_zoffset */ ;
   \   0000050E   0xF105 0x01BC      ADD      R1,R5,#+188
   \   00000512   0xF105 0x00B8      ADD      R0,R5,#+184
   \   00000516   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_z_correctionERKfS1_
   \   0000051A   0x4601             MOV      R1,R0
   \   0000051C   0x9801             LDR      R0,[SP, #+4]
   \   0000051E   0x.... 0x....      BL       __aeabi_fsub
   \   00000522   0x9001             STR      R0,[SP, #+4]
    420                    z2 -= get_z_correction(UBL_PROBE_PT_2_X, UBL_PROBE_PT_2_Y) /* + zprobe_zoffset */ ;
   \   00000524   0xF105 0x01C4      ADD      R1,R5,#+196
   \   00000528   0xF105 0x00C0      ADD      R0,R5,#+192
   \   0000052C   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_z_correctionERKfS1_
   \   00000530   0x4601             MOV      R1,R0
   \   00000532   0x9802             LDR      R0,[SP, #+8]
   \   00000534   0x.... 0x....      BL       __aeabi_fsub
   \   00000538   0x9002             STR      R0,[SP, #+8]
    421                    z3 -= get_z_correction(UBL_PROBE_PT_3_X, UBL_PROBE_PT_3_Y) /* + zprobe_zoffset */ ;
   \   0000053A   0xF105 0x01CC      ADD      R1,R5,#+204
   \   0000053E   0xF105 0x00C8      ADD      R0,R5,#+200
   \   00000542   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_z_correctionERKfS1_
   \   00000546   0x4601             MOV      R1,R0
   \   00000548   0x9803             LDR      R0,[SP, #+12]
   \   0000054A   0x.... 0x....      BL       __aeabi_fsub
   \   0000054E   0x9003             STR      R0,[SP, #+12]
   \   00000550   0xF895 0x0098      LDRB     R0,[R5, #+152]
   \   00000554   0x.... 0x....      BL       __aeabi_ui2f
   \   00000558   0xF105 0x0908      ADD      R9,R5,#+8
   \   0000055C   0x4607             MOV      R7,R0
   \   0000055E   0xF9B9 0x0050      LDRSH    R0,[R9, #+80]
   \   00000562   0xF240 0x3102      MOVW     R1,#+770
   \   00000566   0x4288             CMP      R0,R1
   \   00000568   0xD11F             BNE.N    ??gcode_G29_UBL_53
    422                    if(MACHINETPYE == IS_KINEMATIC)
    423                    {
    424                      do_blocking_move_to_xy(0.5 * (MESH_MAX_X_IS_KINEMATIC- (MESH_MIN_X_IS_KINEMATIC)), 0.5 * (MESH_MAX_Y_IS_KINEMATIC - (MESH_MIN_Y_IS_KINEMATIC)));
   \   0000056A   0x.... 0x....      LDR.W    R5,??DataTable77_2
   \   0000056E   0x6868             LDR      R0,[R5, #+4]
   \   00000570   0x4639             MOV      R1,R7
   \   00000572   0x.... 0x....      BL       __aeabi_fsub
   \   00000576   0x4606             MOV      R6,R0
   \   00000578   0x6828             LDR      R0,[R5, #+0]
   \   0000057A   0x4639             MOV      R1,R7
   \   0000057C   0x.... 0x....      BL       __aeabi_fadd
   \   00000580   0x4601             MOV      R1,R0
   \   00000582   0x4630             MOV      R0,R6
   \   00000584   0x.... 0x....      BL       __aeabi_fsub
   \   00000588   0xF04F 0x517C      MOV      R1,#+1056964608
   \   0000058C   0x.... 0x....      BL       __aeabi_fmul
   \   00000590   0x9005             STR      R0,[SP, #+20]
   \   00000592   0x4639             MOV      R1,R7
   \   00000594   0x68E8             LDR      R0,[R5, #+12]
   \   00000596   0x.... 0x....      BL       __aeabi_fsub
   \   0000059A   0x4606             MOV      R6,R0
   \   0000059C   0x68A8             LDR      R0,[R5, #+8]
   \   0000059E   0x4639             MOV      R1,R7
   \   000005A0   0x.... 0x....      BL       __aeabi_fadd
   \   000005A4   0x4601             MOV      R1,R0
   \   000005A6   0x4630             MOV      R0,R6
   \   000005A8   0xE06A             B.N      ??gcode_G29_UBL_54
    425                    }
    426                    else
    427                    {
    428                      do_blocking_move_to_xy(0.5 * (MESH_MAX_X_IS_Cartesian - (MESH_MIN_X_IS_Cartesian)), 0.5 * (MESH_MAX_Y_IS_Cartesian - (MESH_MIN_Y_IS_Cartesian)));
   \                     ??gcode_G29_UBL_53: (+1)
   \   000005AA   0xF8D9 0xB00C      LDR      R11,[R9, #+12]
   \   000005AE   0xF04F 0x507C      MOV      R0,#+1056964608
   \   000005B2   0x4659             MOV      R1,R11
   \   000005B4   0x.... 0x....      BL       __aeabi_fmul
   \   000005B8   0x4682             MOV      R10,R0
   \   000005BA   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000005BE   0x4651             MOV      R1,R10
   \   000005C0   0x.... 0x....      BL       __aeabi_fmul
   \   000005C4   0x4639             MOV      R1,R7
   \   000005C6   0x.... 0x....      BL       __aeabi_fsub
   \   000005CA   0xF105 0x0860      ADD      R8,R5,#+96
   \   000005CE   0x4606             MOV      R6,R0
   \   000005D0   0xF8D8 0x000C      LDR      R0,[R8, #+12]
   \   000005D4   0x4659             MOV      R1,R11
   \   000005D6   0x.... 0x....      BL       __aeabi_fadd
   \   000005DA   0x4601             MOV      R1,R0
   \   000005DC   0x4630             MOV      R0,R6
   \   000005DE   0x.... 0x....      BL       __aeabi_cfcmple
   \   000005E2   0xBF28             IT       CS 
   \   000005E4   0x460E             MOVCS    R6,R1
   \   000005E6   0x4650             MOV      R0,R10
   \   000005E8   0x4651             MOV      R1,R10
   \   000005EA   0x.... 0x....      BL       __aeabi_fsub
   \   000005EE   0x4639             MOV      R1,R7
   \   000005F0   0x.... 0x....      BL       __aeabi_fadd
   \   000005F4   0x4682             MOV      R10,R0
   \   000005F6   0x68A9             LDR      R1,[R5, #+8]
   \   000005F8   0xF8D8 0x000C      LDR      R0,[R8, #+12]
   \   000005FC   0x.... 0x....      BL       __aeabi_fadd
   \   00000600   0x4651             MOV      R1,R10
   \   00000602   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000606   0xBF28             IT       CS 
   \   00000608   0x4682             MOVCS    R10,R0
   \   0000060A   0x4630             MOV      R0,R6
   \   0000060C   0x4651             MOV      R1,R10
   \   0000060E   0x.... 0x....      BL       __aeabi_fsub
   \   00000612   0xF04F 0x517C      MOV      R1,#+1056964608
   \   00000616   0x.... 0x....      BL       __aeabi_fmul
   \   0000061A   0x9005             STR      R0,[SP, #+20]
   \   0000061C   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000620   0xF8D9 0xA010      LDR      R10,[R9, #+16]
   \   00000624   0x4651             MOV      R1,R10
   \   00000626   0x.... 0x....      BL       __aeabi_fmul
   \   0000062A   0x4606             MOV      R6,R0
   \   0000062C   0xF04F 0x4080      MOV      R0,#+1073741824
   \   00000630   0x4631             MOV      R1,R6
   \   00000632   0x.... 0x....      BL       __aeabi_fmul
   \   00000636   0x4639             MOV      R1,R7
   \   00000638   0x.... 0x....      BL       __aeabi_fsub
   \   0000063C   0xF8D8 0x8010      LDR      R8,[R8, #+16]
   \   00000640   0x4605             MOV      R5,R0
   \   00000642   0x4650             MOV      R0,R10
   \   00000644   0x4641             MOV      R1,R8
   \   00000646   0x.... 0x....      BL       __aeabi_fadd
   \   0000064A   0x4682             MOV      R10,R0
   \   0000064C   0x4628             MOV      R0,R5
   \   0000064E   0x4651             MOV      R1,R10
   \   00000650   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000654   0xBF38             IT       CC 
   \   00000656   0x46AA             MOVCC    R10,R5
   \   00000658   0x4630             MOV      R0,R6
   \   0000065A   0x4631             MOV      R1,R6
   \   0000065C   0x.... 0x....      BL       __aeabi_fsub
   \   00000660   0x4639             MOV      R1,R7
   \   00000662   0x.... 0x....      BL       __aeabi_fadd
   \   00000666   0x4605             MOV      R5,R0
   \   00000668   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \   0000066C   0x4641             MOV      R1,R8
   \   0000066E   0x.... 0x....      BL       __aeabi_fadd
   \   00000672   0x4629             MOV      R1,R5
   \   00000674   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000678   0xBF28             IT       CS 
   \   0000067A   0x4605             MOVCS    R5,R0
   \   0000067C   0x4650             MOV      R0,R10
   \   0000067E   0x4629             MOV      R1,R5
   \                     ??gcode_G29_UBL_54: (+1)
   \   00000680   0x.... 0x....      BL       __aeabi_fsub
   \   00000684   0xF04F 0x517C      MOV      R1,#+1056964608
   \   00000688   0x.... 0x....      BL       __aeabi_fmul
   \   0000068C   0x9004             STR      R0,[SP, #+16]
   \   0000068E   0xAA00             ADD      R2,SP,#+0
   \   00000690   0x2000             MOVS     R0,#+0
   \   00000692   0x9000             STR      R0,[SP, #+0]
   \   00000694   0xA904             ADD      R1,SP,#+16
   \   00000696   0xA805             ADD      R0,SP,#+20
   \   00000698   0x.... 0x....      BL       _Z22do_blocking_move_to_xyRKfS0_S0_
    429                    }
    430                    tilt_mesh_based_on_3pts(z1, z2, z3);
   \   0000069C   0xAA03             ADD      R2,SP,#+12
   \   0000069E   0xA902             ADD      R1,SP,#+8
   \   000006A0   0xA801             ADD      R0,SP,#+4
   \   000006A2   0x.... 0x....      BL       _ZN20unified_bed_leveling23tilt_mesh_based_on_3ptsERKfS1_S1_
    431                    restore_ubl_active_state_and_leave();
   \                     ??gcode_G29_UBL_49: (+1)
   \   000006A6   0x78E1             LDRB     R1,[R4, #+3]
   \   000006A8   0x1E48             SUBS     R0,R1,#+1
   \   000006AA   0x4180             SBCS     R0,R0,R0
   \   000006AC   0x43C0             MVNS     R0,R0
   \   000006AE   0x0FC0             LSRS     R0,R0,#+31
   \   000006B0   0x.... 0x....      BL       _Z24set_bed_leveling_enabledb
    432                  }
    433                }
    434          
    435              #endif // HAS_BED_PROBE
    436          
    437              if (parser.seen('P')) {
   \                     ??gcode_G29_UBL_26: (+1)
   \   000006B4   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0x8
   \   000006B8   0x7840             LDRB     R0,[R0, #+1]
   \   000006BA   0x0600             LSLS     R0,R0,#+24
   \   000006BC   0xF140 0x8141      BPL.W    ??gcode_G29_UBL_55
   \   000006C0   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0xC
   \   000006C4   0x7BC0             LDRB     R0,[R0, #+15]
   \   000006C6   0xB118             CBZ.N    R0,??gcode_G29_UBL_56
   \   000006C8   0x.... 0x....      LDR.W    R1,??DataTable75
   \   000006CC   0x6809             LDR      R1,[R1, #+0]
   \   000006CE   0x1840             ADDS     R0,R0,R1
   \                     ??gcode_G29_UBL_56: (+1)
   \   000006D0   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0x10
   \   000006D4   0x6008             STR      R0,[R1, #+0]
    438                if (WITHIN(g29_phase_value, 0, 1) && storage_slot == -1) {
   \   000006D6   0x68A0             LDR      R0,[R4, #+8]
   \   000006D8   0x2802             CMP      R0,#+2
   \   000006DA   0xD20C             BCS.N    ??gcode_G29_UBL_57
   \   000006DC   0x.... 0x....      LDR.W    R0,??DataTable78
   \   000006E0   0xF990 0x1000      LDRSB    R1,[R0, #+0]
   \   000006E4   0xF111 0x0F01      CMN      R1,#+1
   \   000006E8   0xD105             BNE.N    ??gcode_G29_UBL_57
    439                  storage_slot = 0;
   \   000006EA   0x2100             MOVS     R1,#+0
   \   000006EC   0x7001             STRB     R1,[R0, #+0]
    440                  SERIAL_PROTOCOLLNPGM("Default storage slot 0 selected.");
   \   000006EE   0x.... 0x....      ADR.W    R0,`?<Constant "Default storage slot ...">`
   \   000006F2   0x.... 0x....      BL       _Z14serialprintPGMPKc
    441                }
    442          
    443                switch (g29_phase_value) {
   \                     ??gcode_G29_UBL_57: (+1)
   \   000006F6   0x68A0             LDR      R0,[R4, #+8]
   \   000006F8   0x2806             CMP      R0,#+6
   \   000006FA   0xF200 0x8122      BHI.W    ??gcode_G29_UBL_55
   \   000006FE   0xE8DF 0xF010      TBH      [PC, R0, LSL #+1]
   \                     ??gcode_G29_UBL_1:
   \   00000702   0x0007 0x000E      DC16     0x7,0xE,0x90,0x93
   \              0x0090 0x0093
   \   0000070A   0x0118 0x011B      DC16     0x118,0x11B,0x11E
   \              0x011E       
    444                  case 0:
    445                    //
    446                    // Zero Mesh Data
    447                    //
    448                    reset();
   \                     ??gcode_G29_UBL_58: (+1)
   \   00000710   0x.... 0x....      BL       _ZN20unified_bed_leveling5resetEv
    449                    SERIAL_PROTOCOLLNPGM("Mesh zeroed.");
   \   00000714   0x.... 0x....      ADR.W    R0,`?<Constant "Mesh zeroed.\\n">`
   \   00000718   0x.... 0x....      BL       _Z14serialprintPGMPKc
    450                    break;
   \   0000071C   0xE111             B.N      ??gcode_G29_UBL_55
    451          
    452                  #if HAS_BED_PROBE
    453          
    454                    case 1:
    455                      //
    456                      // Invalidate Entire Mesh and Automatically Probe Mesh in areas that can be reached by the probe
    457                      //
    458                      if (!parser.seen('C')) {
   \                     ??gcode_G29_UBL_59: (+1)
   \   0000071E   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0x8
   \   00000722   0x7800             LDRB     R0,[R0, #+0]
   \   00000724   0x0740             LSLS     R0,R0,#+29
   \   00000726   0xD50B             BPL.N    ??gcode_G29_UBL_60
   \   00000728   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0xC
   \   0000072C   0x7880             LDRB     R0,[R0, #+2]
   \   0000072E   0xB118             CBZ.N    R0,??gcode_G29_UBL_61
   \   00000730   0x.... 0x....      LDR.W    R1,??DataTable75
   \   00000734   0x6809             LDR      R1,[R1, #+0]
   \   00000736   0x1840             ADDS     R0,R0,R1
   \                     ??gcode_G29_UBL_61: (+1)
   \   00000738   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0x10
   \   0000073C   0x6008             STR      R0,[R1, #+0]
   \   0000073E   0xE005             B.N      ??gcode_G29_UBL_62
    459                        invalidate();
   \                     ??gcode_G29_UBL_60: (+1)
   \   00000740   0x.... 0x....      BL       _ZN20unified_bed_leveling10invalidateEv
    460                        SERIAL_PROTOCOLLNPGM("Mesh invalidated. Probing mesh.");
   \   00000744   0x.... 0x....      ADR.W    R0,`?<Constant "Mesh invalidated. Pro...">`
   \   00000748   0x.... 0x....      BL       _Z14serialprintPGMPKc
    461                      }
    462                      if (g29_verbose_level > 1) {
   \                     ??gcode_G29_UBL_62: (+1)
   \   0000074C   0x6860             LDR      R0,[R4, #+4]
   \   0000074E   0x2802             CMP      R0,#+2
   \   00000750   0xDB21             BLT.N    ??gcode_G29_UBL_63
    463                        //SERIAL_PROTOCOLPAIR("Probing Mesh Points Closest to (", g29_x_pos);
    464          			  SERIAL_PROTOCOLPGM("Probing Mesh Points Closest to (");
   \   00000752   0x.... 0x....      ADR.W    R0,`?<Constant "Probing Mesh Points C...">`
   \   00000756   0x.... 0x....      BL       _Z14serialprintPGMPKc
    465          			  SERIAL_PROTOCOL(g29_x_pos);			  
   \   0000075A   0x2002             MOVS     R0,#+2
   \   0000075C   0x9000             STR      R0,[SP, #+0]
   \   0000075E   0x.... 0x....      LDR.W    R6,??DataTable78_1
   \   00000762   0x69A0             LDR      R0,[R4, #+24]
   \   00000764   0x.... 0x....      BL       __aeabi_f2d
   \   00000768   0x4602             MOV      R2,R0
   \   0000076A   0x460B             MOV      R3,R1
   \   0000076C   0x4630             MOV      R0,R6
   \   0000076E   0x.... 0x....      BL       _ZN5Print5printEdi
    466                        SERIAL_PROTOCOLCHAR(',');
   \   00000772   0x212C             MOVS     R1,#+44
   \   00000774   0x4630             MOV      R0,R6
   \   00000776   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    467                        SERIAL_PROTOCOL(g29_y_pos);
   \   0000077A   0x2002             MOVS     R0,#+2
   \   0000077C   0x9000             STR      R0,[SP, #+0]
   \   0000077E   0x69E0             LDR      R0,[R4, #+28]
   \   00000780   0x.... 0x....      BL       __aeabi_f2d
   \   00000784   0x4602             MOV      R2,R0
   \   00000786   0x460B             MOV      R3,R1
   \   00000788   0x4630             MOV      R0,R6
   \   0000078A   0x.... 0x....      BL       _ZN5Print5printEdi
    468                        SERIAL_PROTOCOLLNPGM(").\n");
   \   0000078E   0x.... 0x....      ADR.W    R0,`?<Constant ").\\n\\n">`
   \   00000792   0x.... 0x....      BL       _Z14serialprintPGMPKc
    469                      }
    470                      probe_entire_mesh(g29_x_pos + X_PROBE_OFFSET_FROM_EXTRUDER, g29_y_pos + Y_PROBE_OFFSET_FROM_EXTRUDER,
    471                                        parser.seen('T'), parser.seen('E'), parser.seen('U'));
   \                     ??gcode_G29_UBL_63: (+1)
   \   00000796   0x.... 0x....      LDR.W    R5,??DataTable75_2
   \   0000079A   0x69A1             LDR      R1,[R4, #+24]
   \   0000079C   0x3560             ADDS     R5,R5,#+96
   \   0000079E   0x68E8             LDR      R0,[R5, #+12]
   \   000007A0   0x.... 0x....      BL       __aeabi_fadd
   \   000007A4   0x69E1             LDR      R1,[R4, #+28]
   \   000007A6   0x9002             STR      R0,[SP, #+8]
   \   000007A8   0x6928             LDR      R0,[R5, #+16]
   \   000007AA   0x.... 0x....      BL       __aeabi_fadd
   \   000007AE   0x9001             STR      R0,[SP, #+4]
   \   000007B0   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0x8
   \   000007B4   0x7881             LDRB     R1,[R0, #+2]
   \   000007B6   0x0908             LSRS     R0,R1,#+4
   \   000007B8   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000007BC   0xD00A             BEQ.N    ??gcode_G29_UBL_64
   \   000007BE   0x.... 0x....      LDR.W    R2,??find_mean_mesh_height_0+0xC
   \   000007C2   0x7D12             LDRB     R2,[R2, #+20]
   \   000007C4   0xB11A             CBZ.N    R2,??gcode_G29_UBL_65
   \   000007C6   0x.... 0x....      LDR.W    R3,??DataTable75
   \   000007CA   0x681B             LDR      R3,[R3, #+0]
   \   000007CC   0x18D2             ADDS     R2,R2,R3
   \                     ??gcode_G29_UBL_65: (+1)
   \   000007CE   0x.... 0x....      LDR.W    R3,??find_mean_mesh_height_0+0x10
   \   000007D2   0x601A             STR      R2,[R3, #+0]
   \                     ??gcode_G29_UBL_64: (+1)
   \   000007D4   0x.... 0x....      LDR.W    R2,??find_mean_mesh_height_0+0x8
   \   000007D8   0x7812             LDRB     R2,[R2, #+0]
   \   000007DA   0x0912             LSRS     R2,R2,#+4
   \   000007DC   0xF012 0x0301      ANDS     R3,R2,#0x1
   \   000007E0   0xD00A             BEQ.N    ??gcode_G29_UBL_66
   \   000007E2   0x.... 0x....      LDR.W    R2,??find_mean_mesh_height_0+0xC
   \   000007E6   0x7912             LDRB     R2,[R2, #+4]
   \   000007E8   0xB11A             CBZ.N    R2,??gcode_G29_UBL_67
   \   000007EA   0x.... 0x....      LDR.W    R5,??DataTable75
   \   000007EE   0x682D             LDR      R5,[R5, #+0]
   \   000007F0   0x1952             ADDS     R2,R2,R5
   \                     ??gcode_G29_UBL_67: (+1)
   \   000007F2   0x.... 0x....      LDR.W    R5,??find_mean_mesh_height_0+0x10
   \   000007F6   0x602A             STR      R2,[R5, #+0]
   \                     ??gcode_G29_UBL_66: (+1)
   \   000007F8   0x08C9             LSRS     R1,R1,#+3
   \   000007FA   0xF011 0x0201      ANDS     R2,R1,#0x1
   \   000007FE   0xD00A             BEQ.N    ??gcode_G29_UBL_68
   \   00000800   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0xC
   \   00000804   0x7CC9             LDRB     R1,[R1, #+19]
   \   00000806   0xB119             CBZ.N    R1,??gcode_G29_UBL_69
   \   00000808   0x.... 0x....      LDR.W    R5,??DataTable75
   \   0000080C   0x682D             LDR      R5,[R5, #+0]
   \   0000080E   0x1949             ADDS     R1,R1,R5
   \                     ??gcode_G29_UBL_69: (+1)
   \   00000810   0x.... 0x....      LDR.W    R5,??find_mean_mesh_height_0+0x10
   \   00000814   0x6029             STR      R1,[R5, #+0]
   \                     ??gcode_G29_UBL_68: (+1)
   \   00000816   0x9000             STR      R0,[SP, #+0]
   \   00000818   0xA901             ADD      R1,SP,#+4
   \   0000081A   0xA802             ADD      R0,SP,#+8
   \   0000081C   0x.... 0x....      BL       _ZN20unified_bed_leveling17probe_entire_meshERKfS1_bbb
    472                      break;
   \   00000820   0xE08F             B.N      ??gcode_G29_UBL_55
    473          
    474                  #endif // HAS_BED_PROBE
    475          
    476                  case 2: {
    477                    #if ENABLED(NEWPANEL)
    478                      //
    479                      // Manually Probe Mesh in areas that can't be reached by the probe
    480                      //
    481                      SERIAL_PROTOCOLLNPGM("Manually probing unreachable mesh locations.");
    482                      do_blocking_move_to_z(Z_CLEARANCE_BETWEEN_PROBES);
    483          
    484                      if (!g29_x_flag && !g29_y_flag) {
    485                        /**
    486                         * Use a good default location for the path.
    487                         * The flipped > and < operators in these comparisons is intentional.
    488                         * It should cause the probed points to follow a nice path on Cartesian printers.
    489                         * It may make sense to have Delta printers default to the center of the bed.
    490                         * Until that is decided, this can be forced with the X and Y parameters.
    491                         */
    492                        #if IS_KINEMATIC
    493                          g29_x_pos = X_HOME_POS;
    494                          g29_y_pos = Y_HOME_POS;
    495                        #else // cartesian
    496                          g29_x_pos = X_PROBE_OFFSET_FROM_EXTRUDER > 0 ? X_BED_SIZE : 0;
    497                          g29_y_pos = Y_PROBE_OFFSET_FROM_EXTRUDER < 0 ? Y_BED_SIZE : 0;
    498                        #endif
    499                      }
    500          
    501                      if (parser.seen('C')) {
    502                        g29_x_pos = current_position[X_AXIS];
    503                        g29_y_pos = current_position[Y_AXIS];
    504                      }
    505          
    506                      if (parser.seen('B')) {
    507                        g29_card_thickness = parser.has_value() ? parser.value_float() : measure_business_card_thickness(Z_CLEARANCE_BETWEEN_PROBES);
    508                        if (FABS(g29_card_thickness) > 1.5) {
    509                          SERIAL_PROTOCOLLNPGM("?Error in Business Card measurement.");
    510                          return;
    511                        }
    512                      }
    513          
    514                      if (!position_is_reachable(g29_x_pos, g29_y_pos)) {
    515                        SERIAL_PROTOCOLLNPGM("XY outside printable radius.");
    516                        return;
    517                      }
    518          
    519                      const float height = parser.floatval('H', Z_CLEARANCE_BETWEEN_PROBES);
    520                      manually_probe_remaining_mesh(g29_x_pos, g29_y_pos, height, g29_card_thickness, parser.seen('T'));
    521          
    522                      SERIAL_PROTOCOLLNPGM("G29 P2 finished.");
    523          
    524                    #else
    525          
    526                      SERIAL_PROTOCOLLNPGM("?P2 is only available when an LCD is present.");
   \                     ??gcode_G29_UBL_70: (+1)
   \   00000822   0x.... 0x....      ADR.W    R0,`?<Constant "?P2 is only available...">`
   \   00000826   0xE173             B.N      ??gcode_G29_UBL_3
    527                      return;
    528          
    529                    #endif
    530                  } break;
    531          
    532                  case 3: {
    533                    /**
    534                     * Populate invalid mesh areas. Proceed with caution.
    535                     * Two choices are available:
    536                     *   - Specify a constant with the 'C' parameter.
    537                     *   - Allow 'G29 P3' to choose a 'reasonable' constant.
    538                     */
    539          
    540                    if (g29_c_flag) {
   \                     ??gcode_G29_UBL_71: (+1)
   \   00000828   0x7820             LDRB     R0,[R4, #+0]
   \   0000082A   0x2800             CMP      R0,#+0
   \   0000082C   0xD050             BEQ.N    ??gcode_G29_UBL_72
    541                      if (g29_repetition_cnt >= GRID_MAX_POINTS) {
   \   0000082E   0x.... 0x....      LDR.W    R5,??DataTable75_2
   \   00000832   0x68E0             LDR      R0,[R4, #+12]
   \   00000834   0xF895 0x1060      LDRB     R1,[R5, #+96]
   \   00000838   0xF105 0x0860      ADD      R8,R5,#+96
   \   0000083C   0xF898 0x2001      LDRB     R2,[R8, #+1]
   \   00000840   0x4351             MULS     R1,R2,R1
   \   00000842   0x4288             CMP      R0,R1
   \   00000844   0xDB0E             BLT.N    ??gcode_G29_UBL_73
    542                        set_all_mesh_points_to_value(g29_constant);
   \   00000846   0x6A20             LDR      R0,[R4, #+32]
   \   00000848   0x.... 0x....      BL       _ZN20unified_bed_leveling28set_all_mesh_points_to_valueEf
   \   0000084C   0xE079             B.N      ??gcode_G29_UBL_55
    543                      }
    544                      else {
    545                        while (g29_repetition_cnt--) {  // this only populates reachable mesh points near
    546                          const mesh_index_pair location = find_closest_mesh_point_of_type(INVALID, g29_x_pos, g29_y_pos, USE_NOZZLE_AS_REFERENCE, NULL);
    547                          if (location.x_index < 0) {
    548                            // No more REACHABLE INVALID mesh points to populate, so we ASSUME
    549                            // user meant to populate ALL INVALID mesh points to value
    550                            for (uint8_t x = 0; x < GRID_MAX_POINTS_X; x++)
    551                              for (uint8_t y = 0; y < GRID_MAX_POINTS_Y; y++)
    552                                if (isnan(z_values[x][y]))
    553                                  z_values[x][y] = g29_constant;
    554                            break; // No more invalid Mesh Points to populate
    555                          }
    556                          z_values[location.x_index][location.y_index] = g29_constant;
   \                     ??gcode_G29_UBL_74: (+1)
   \   0000084E   0xEB00 0x0240      ADD      R2,R0,R0, LSL #+1
   \   00000852   0x.... 0x....      LDR.W    R0,??DataTable75_3
   \   00000856   0xF99D 0x1009      LDRSB    R1,[SP, #+9]
   \   0000085A   0xEB00 0x1002      ADD      R0,R0,R2, LSL #+4
   \   0000085E   0x6A22             LDR      R2,[R4, #+32]
   \   00000860   0xF840 0x2021      STR      R2,[R0, R1, LSL #+2]
   \                     ??gcode_G29_UBL_73: (+1)
   \   00000864   0x68E0             LDR      R0,[R4, #+12]
   \   00000866   0xB378             CBZ.N    R0,??gcode_G29_UBL_75
   \   00000868   0x1E40             SUBS     R0,R0,#+1
   \   0000086A   0x60E0             STR      R0,[R4, #+12]
   \   0000086C   0xF104 0x031C      ADD      R3,R4,#+28
   \   00000870   0x2000             MOVS     R0,#+0
   \   00000872   0x9001             STR      R0,[SP, #+4]
   \   00000874   0x9000             STR      R0,[SP, #+0]
   \   00000876   0xF104 0x0218      ADD      R2,R4,#+24
   \   0000087A   0x2100             MOVS     R1,#+0
   \   0000087C   0xA802             ADD      R0,SP,#+8
   \   0000087E   0x.... 0x....      BL       _ZN20unified_bed_leveling31find_closest_mesh_point_of_typeE13MeshPointTypeRKfS2_bPj
   \   00000882   0xF99D 0x0008      LDRSB    R0,[SP, #+8]
   \   00000886   0x2800             CMP      R0,#+0
   \   00000888   0xD5E1             BPL.N    ??gcode_G29_UBL_74
   \   0000088A   0x2600             MOVS     R6,#+0
   \   0000088C   0xE010             B.N      ??gcode_G29_UBL_76
   \                     ??gcode_G29_UBL_77: (+1)
   \   0000088E   0xF859 0x0027      LDR      R0,[R9, R7, LSL #+2]
   \   00000892   0x.... 0x....      BL       __iar_FDtest
   \   00000896   0x2802             CMP      R0,#+2
   \   00000898   0xBF04             ITT      EQ 
   \   0000089A   0x6A20             LDREQ    R0,[R4, #+32]
   \   0000089C   0xF849 0x0027      STREQ    R0,[R9, R7, LSL #+2]
   \   000008A0   0x1C7F             ADDS     R7,R7,#+1
   \   000008A2   0xB2FF             UXTB     R7,R7
   \                     ??gcode_G29_UBL_78: (+1)
   \   000008A4   0xF898 0x0001      LDRB     R0,[R8, #+1]
   \   000008A8   0x4287             CMP      R7,R0
   \   000008AA   0xDBF0             BLT.N    ??gcode_G29_UBL_77
   \   000008AC   0x1C76             ADDS     R6,R6,#+1
   \   000008AE   0xB2F6             UXTB     R6,R6
   \                     ??gcode_G29_UBL_76: (+1)
   \   000008B0   0xF895 0x0060      LDRB     R0,[R5, #+96]
   \   000008B4   0x4286             CMP      R6,R0
   \   000008B6   0xDA44             BGE.N    ??gcode_G29_UBL_55
   \   000008B8   0xEB06 0x0046      ADD      R0,R6,R6, LSL #+1
   \   000008BC   0x.... 0x....      LDR.W    R1,??DataTable75_3
   \   000008C0   0x2700             MOVS     R7,#+0
   \   000008C2   0xEB01 0x1900      ADD      R9,R1,R0, LSL #+4
   \   000008C6   0xE7ED             B.N      ??gcode_G29_UBL_78
    557                        }
    558                      }
    559                    }
   \                     ??gcode_G29_UBL_75: (+1)
   \   000008C8   0xF04F 0x30FF      MOV      R0,#-1
   \   000008CC   0x60E0             STR      R0,[R4, #+12]
   \   000008CE   0xE038             B.N      ??gcode_G29_UBL_55
    560                    else {
    561                      const float cvf = parser.value_float();
   \                     ??gcode_G29_UBL_72: (+1)
   \   000008D0   0x.... 0x....      BL       _ZN11GCodeParser11value_floatEv
   \   000008D4   0x4606             MOV      R6,R0
    562                      switch((int)truncf(cvf * 10.0) - 30) {   // 3.1 -> 1
   \   000008D6   0x.... 0x....      LDR.W    R5,??DataTable78_4  ;; 0x41200000
   \   000008DA   0x4629             MOV      R1,R5
   \   000008DC   0x.... 0x....      BL       __aeabi_fmul
   \   000008E0   0x.... 0x....      BL       truncf
   \   000008E4   0x.... 0x....      BL       __aeabi_f2iz
   \   000008E8   0x381E             SUBS     R0,R0,#+30
   \   000008EA   0x2801             CMP      R0,#+1
   \   000008EC   0xD11E             BNE.N    ??gcode_G29_UBL_79
    563                        #if ENABLED(UBL_G29_P31)
    564                          case 1: {
    565          
    566                            // P3.1  use least squares fit to fill missing mesh values
    567                            // P3.10 zero weighting for distance, all grid points equal, best fit tilted plane
    568                            // P3.11 10X weighting for nearest grid points versus farthest grid points
    569                            // P3.12 100X distance weighting
    570                            // P3.13 1000X distance weighting, approaches simple average of nearest points
    571          
    572                            float weight_power  = (cvf - 3.10) * 100.0,  // 3.12345 -> 2.345
   \   000008EE   0x4630             MOV      R0,R6
   \   000008F0   0x.... 0x....      BL       __aeabi_f2d
   \   000008F4   0x.... 0x....      LDR.W    R2,??DataTable78_5  ;; 0xcccccccd
   \   000008F8   0x.... 0x....      LDR.W    R3,??DataTable78_6  ;; 0xc008cccc
   \   000008FC   0x.... 0x....      BL       __aeabi_dadd
   \   00000900   0x.... 0x....      LDR.W    R3,??DataTable78_7  ;; 0x40590000
   \   00000904   0x2200             MOVS     R2,#+0
   \   00000906   0x.... 0x....      BL       __aeabi_dmul
   \   0000090A   0x.... 0x....      BL       __aeabi_d2f
    573                                  weight_factor = weight_power ? POW(float(10.0), weight_power) : 0;
   \   0000090E   0x2100             MOVS     R1,#+0
   \   00000910   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000914   0xD005             BEQ.N    ??gcode_G29_UBL_80
   \   00000916   0x4601             MOV      R1,R0
   \   00000918   0x4628             MOV      R0,R5
   \   0000091A   0x.... 0x....      BL       powf
   \   0000091E   0x9000             STR      R0,[SP, #+0]
   \   00000920   0xE000             B.N      ??gcode_G29_UBL_81
   \                     ??gcode_G29_UBL_80: (+1)
   \   00000922   0x9100             STR      R1,[SP, #+0]
    574                            smart_fill_wlsf(weight_factor);
   \                     ??gcode_G29_UBL_81: (+1)
   \   00000924   0xA800             ADD      R0,SP,#+0
   \   00000926   0x.... 0x....      BL       _ZN20unified_bed_leveling15smart_fill_wlsfERKf
    575                          }
    576                          break;
   \   0000092A   0xE00A             B.N      ??gcode_G29_UBL_55
    577                        #endif
    578                        case 0:   // P3 or P3.0
    579                        default:  // and anything P3.x that's not P3.1
    580                          smart_fill_mesh();  // Do a 'Smart' fill using nearby known values
   \                     ??gcode_G29_UBL_79: (+1)
   \   0000092C   0x.... 0x....      BL       _ZN20unified_bed_leveling15smart_fill_meshEv
    581                          break;
   \   00000930   0xE007             B.N      ??gcode_G29_UBL_55
    582                      }
    583                    }
    584                    break;
    585                  }
    586          
    587                  case 4: // Fine Tune (i.e., Edit) the Mesh
    588                    #if ENABLED(NEWPANEL)
    589                      fine_tune_mesh(g29_x_pos, g29_y_pos, parser.seen('T'));
    590                    #else
    591                      SERIAL_PROTOCOLLNPGM("?P4 is only available when an LCD is present.");
   \                     ??gcode_G29_UBL_82: (+1)
   \   00000932   0x.... 0x....      ADR.W    R0,`?<Constant "?P4 is only available...">`
   \   00000936   0xE0EB             B.N      ??gcode_G29_UBL_3
    592                      return;
    593                    #endif
    594                    break;
    595          
    596                  case 5: find_mean_mesh_height(); break;
   \                     ??gcode_G29_UBL_83: (+1)
   \   00000938   0x.... 0x....      BL       _ZN20unified_bed_leveling21find_mean_mesh_heightEv
   \   0000093C   0xE001             B.N      ??gcode_G29_UBL_55
    597          
    598                  case 6: shift_mesh_height(); break;
   \                     ??gcode_G29_UBL_84: (+1)
   \   0000093E   0x.... 0x....      BL       _ZN20unified_bed_leveling17shift_mesh_heightEv
    599                }
    600              }
    601          
    602              //
    603              // Much of the 'What?' command can be eliminated. But until we are fully debugged, it is
    604              // good to have the extra information. Soon... we prune this to just a few items
    605              //
    606              if (parser.seen('W')) g29_what_command();
   \                     ??gcode_G29_UBL_55: (+1)
   \   00000942   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0x8
   \   00000946   0x7880             LDRB     R0,[R0, #+2]
   \   00000948   0x0640             LSLS     R0,R0,#+25
   \   0000094A   0xD50C             BPL.N    ??gcode_G29_UBL_85
   \   0000094C   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0xC
   \   00000950   0x7D80             LDRB     R0,[R0, #+22]
   \   00000952   0xB118             CBZ.N    R0,??gcode_G29_UBL_86
   \   00000954   0x.... 0x....      LDR.W    R1,??DataTable75
   \   00000958   0x6809             LDR      R1,[R1, #+0]
   \   0000095A   0x1840             ADDS     R0,R0,R1
   \                     ??gcode_G29_UBL_86: (+1)
   \   0000095C   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0x10
   \   00000960   0x6008             STR      R0,[R1, #+0]
   \   00000962   0x.... 0x....      BL       _ZN20unified_bed_leveling16g29_what_commandEv
    607          
    608              //
    609              // When we are fully debugged, this may go away. But there are some valid
    610              // use cases for the users. So we can wait and see what to do with it.
    611              //
    612          
    613              if (parser.seen('K')) // Kompare Current Mesh Data to Specified Stored Mesh
   \                     ??gcode_G29_UBL_85: (+1)
   \   00000966   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0x8
   \   0000096A   0x7840             LDRB     R0,[R0, #+1]
   \   0000096C   0x0740             LSLS     R0,R0,#+29
   \   0000096E   0xD50C             BPL.N    ??gcode_G29_UBL_87
   \   00000970   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0xC
   \   00000974   0x7A80             LDRB     R0,[R0, #+10]
   \   00000976   0xB118             CBZ.N    R0,??gcode_G29_UBL_88
   \   00000978   0x.... 0x....      LDR.W    R1,??DataTable75
   \   0000097C   0x6809             LDR      R1,[R1, #+0]
   \   0000097E   0x1840             ADDS     R0,R0,R1
   \                     ??gcode_G29_UBL_88: (+1)
   \   00000980   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0x10
   \   00000984   0x6008             STR      R0,[R1, #+0]
    614                g29_compare_current_mesh_to_stored_mesh();
   \   00000986   0x.... 0x....      BL       _ZN20unified_bed_leveling39g29_compare_current_mesh_to_stored_meshEv
    615          
    616              //
    617              // Load a Mesh from the EEPROM
    618              //
    619          
    620              if (parser.seen('L')) {     // Load Current Mesh Data
   \                     ??gcode_G29_UBL_87: (+1)
   \   0000098A   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0x8
   \   0000098E   0x7840             LDRB     R0,[R0, #+1]
   \   00000990   0x0700             LSLS     R0,R0,#+28
   \   00000992   0xD531             BPL.N    ??gcode_G29_UBL_89
   \   00000994   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0xC
   \   00000998   0x7AC0             LDRB     R0,[R0, #+11]
   \   0000099A   0xB918             CBNZ.N   R0,??gcode_G29_UBL_90
   \   0000099C   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0x10
   \   000009A0   0x6008             STR      R0,[R1, #+0]
   \   000009A2   0xE007             B.N      ??gcode_G29_UBL_91
   \                     ??gcode_G29_UBL_90: (+1)
   \   000009A4   0x.... 0x....      LDR.W    R5,??DataTable75
   \   000009A8   0x6829             LDR      R1,[R5, #+0]
   \   000009AA   0x1840             ADDS     R0,R0,R1
   \   000009AC   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0x10
   \   000009B0   0x6008             STR      R0,[R1, #+0]
    621                g29_storage_slot = parser.has_value() ? parser.value_int() : storage_slot;
   \   000009B2   0xD104             BNE.N    ??gcode_G29_UBL_92
   \                     ??gcode_G29_UBL_91: (+1)
   \   000009B4   0x.... 0x....      LDR.W    R0,??DataTable78
   \   000009B8   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   000009BC   0xE001             B.N      ??gcode_G29_UBL_93
   \                     ??gcode_G29_UBL_92: (+1)
   \   000009BE   0x.... 0x....      BL       _ZN11GCodeParser9value_intEv
   \                     ??gcode_G29_UBL_93: (+1)
   \   000009C2   0x6120             STR      R0,[R4, #+16]
    622          
    623                int16_t a = settings.calc_num_meshes();
   \   000009C4   0x.... 0x....      BL       _ZN14MarlinSettings15calc_num_meshesEv
   \   000009C8   0xB201             SXTH     R1,R0
    624          
    625                if (!a) {
   \   000009CA   0x2900             CMP      R1,#+0
   \   000009CC   0xF000 0x809E      BEQ.W    ??gcode_G29_UBL_94
    626                  SERIAL_PROTOCOLLNPGM("?EEPROM storage not available.");
    627                  return;
    628                }
    629          
    630                if (!WITHIN(g29_storage_slot, 0, a - 1)) {
   \   000009D0   0x6920             LDR      R0,[R4, #+16]
   \   000009D2   0x1E4D             SUBS     R5,R1,#+1
   \   000009D4   0x2800             CMP      R0,#+0
   \   000009D6   0xF100 0x80A4      BMI.W    ??gcode_G29_UBL_95
   \   000009DA   0x4285             CMP      R5,R0
   \   000009DC   0xF2C0 0x80A1      BLT.W    ??gcode_G29_UBL_95
    631                  SERIAL_PROTOCOLLNPGM("?Invalid storage slot.");
    632                  SERIAL_PROTOCOLLNPAIR("?Use 0 to ", a - 1);
    633                  return;
    634                }
    635          
    636                settings.load_mesh(g29_storage_slot);
   \   000009E0   0x2100             MOVS     R1,#+0
   \   000009E2   0xB240             SXTB     R0,R0
   \   000009E4   0x.... 0x....      BL       _ZN14MarlinSettings9load_meshEaPv
    637                storage_slot = g29_storage_slot;
   \   000009E8   0x6920             LDR      R0,[R4, #+16]
   \   000009EA   0x.... 0x....      LDR.W    R1,??DataTable78
   \   000009EE   0x7008             STRB     R0,[R1, #+0]
    638          
    639                SERIAL_PROTOCOLLNPGM("Done.");
   \   000009F0   0x.... 0x....      ADR.W    R0,`?<Constant "Done.\\n">`
   \   000009F4   0x.... 0x....      BL       _Z14serialprintPGMPKc
    640              }
    641          
    642              //
    643              // Store a Mesh in the EEPROM
    644              //
    645          
    646              if (parser.seen('S')) {     // Store (or Save) Current Mesh Data
   \                     ??gcode_G29_UBL_89: (+1)
   \   000009F8   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0x8
   \   000009FC   0x7880             LDRB     R0,[R0, #+2]
   \   000009FE   0x0740             LSLS     R0,R0,#+29
   \   00000A00   0xF140 0x80A9      BPL.W    ??gcode_G29_UBL_96
   \   00000A04   0x.... 0x....      LDR.W    R0,??find_mean_mesh_height_0+0xC
   \   00000A08   0x7C80             LDRB     R0,[R0, #+18]
   \   00000A0A   0xB918             CBNZ.N   R0,??gcode_G29_UBL_97
   \   00000A0C   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0x10
   \   00000A10   0x6008             STR      R0,[R1, #+0]
   \   00000A12   0xE007             B.N      ??gcode_G29_UBL_98
   \                     ??gcode_G29_UBL_97: (+1)
   \   00000A14   0x.... 0x....      LDR.W    R5,??DataTable75
   \   00000A18   0x6829             LDR      R1,[R5, #+0]
   \   00000A1A   0x1840             ADDS     R0,R0,R1
   \   00000A1C   0x.... 0x....      LDR.W    R1,??find_mean_mesh_height_0+0x10
   \   00000A20   0x6008             STR      R0,[R1, #+0]
    647                g29_storage_slot = parser.has_value() ? parser.value_int() : storage_slot;
   \   00000A22   0xD104             BNE.N    ??gcode_G29_UBL_99
   \                     ??gcode_G29_UBL_98: (+1)
   \   00000A24   0x.... 0x....      LDR.W    R0,??DataTable78
   \   00000A28   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   00000A2C   0xE001             B.N      ??gcode_G29_UBL_100
   \                     ??gcode_G29_UBL_99: (+1)
   \   00000A2E   0x.... 0x....      BL       _ZN11GCodeParser9value_intEv
   \                     ??gcode_G29_UBL_100: (+1)
   \   00000A32   0x6120             STR      R0,[R4, #+16]
    648          
    649                if (g29_storage_slot == -1) {                     // Special case, we are going to 'Export' the mesh to the
   \   00000A34   0xF110 0x0F01      CMN      R0,#+1
   \   00000A38   0xD164             BNE.N    ??gcode_G29_UBL_101
    650                  SERIAL_ECHOLNPGM("G29 I 999");              // host in a form it can be reconstructed on a different machine
   \   00000A3A   0x.... 0x....      ADR.W    R0,`?<Constant "G29 I 999\\n">`
   \   00000A3E   0x.... 0x....      BL       _Z14serialprintPGMPKc
    651                  for (uint8_t x = 0; x < GRID_MAX_POINTS_X; x++)
   \   00000A42   0x2400             MOVS     R4,#+0
   \   00000A44   0x.... 0x....      LDR.W    R8,??DataTable78_8
   \   00000A48   0x.... 0x....      LDR.W    R6,??DataTable78_1
   \   00000A4C   0x.... 0x....      LDR.W    R5,??DataTable75_2
   \   00000A50   0xE001             B.N      ??gcode_G29_UBL_102
   \                     ??gcode_G29_UBL_103: (+1)
   \   00000A52   0x1C64             ADDS     R4,R4,#+1
   \   00000A54   0xB2E4             UXTB     R4,R4
   \                     ??gcode_G29_UBL_102: (+1)
   \   00000A56   0xF895 0x1060      LDRB     R1,[R5, #+96]
   \   00000A5A   0x428C             CMP      R4,R1
   \   00000A5C   0xF080 0x808A      BCS.W    ??gcode_G29_UBL_4
    652                    for (uint8_t y = 0;  y < GRID_MAX_POINTS_Y; y++)
   \   00000A60   0xEB04 0x0044      ADD      R0,R4,R4, LSL #+1
   \   00000A64   0x.... 0x....      LDR.W    R1,??DataTable75_3
   \   00000A68   0x2700             MOVS     R7,#+0
   \   00000A6A   0xEB01 0x1900      ADD      R9,R1,R0, LSL #+4
   \   00000A6E   0xE030             B.N      ??gcode_G29_UBL_104
    653                      if (!isnan(z_values[x][y])) {
   \                     ??gcode_G29_UBL_105: (+1)
   \   00000A70   0xB2C9             UXTB     R1,R1
   \   00000A72   0x4630             MOV      R0,R6
   \   00000A74   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??gcode_G29_UBL_106: (+1)
   \   00000A78   0xF91A 0x1B01      LDRSB    R1,[R10], #+1
   \   00000A7C   0x0008             MOVS     R0,R1
   \   00000A7E   0xD1F7             BNE.N    ??gcode_G29_UBL_105
    654                        SERIAL_ECHOPAIR("M421 I ", x);
    655                        SERIAL_ECHOPAIR(" J ", y);
    656                        SERIAL_ECHOPGM(" Z ");
    657                        SERIAL_ECHO_F(z_values[x][y], 6);
   \   00000A80   0x2006             MOVS     R0,#+6
   \   00000A82   0x9000             STR      R0,[SP, #+0]
   \   00000A84   0xF859 0x002B      LDR      R0,[R9, R11, LSL #+2]
   \   00000A88   0x.... 0x....      BL       __aeabi_f2d
   \   00000A8C   0x4602             MOV      R2,R0
   \   00000A8E   0x460B             MOV      R3,R1
   \   00000A90   0x4630             MOV      R0,R6
   \   00000A92   0x.... 0x....      BL       _ZN5Print5printEdi
    658                        SERIAL_ECHOPAIR(" ; X ", LOGICAL_X_POSITION(mesh_index_to_xpos(x)));
   \   00000A96   0x4620             MOV      R0,R4
   \   00000A98   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   00000A9C   0x4601             MOV      R1,R0
   \   00000A9E   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   00000AA2   0x.... 0x....      BL       __aeabi_fadd
   \   00000AA6   0x4601             MOV      R1,R0
   \   00000AA8   0x.... 0x....      ADR.W    R0,`?<Constant " ; X ">`
   \   00000AAC   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
    659                        SERIAL_ECHOPAIR(", Y ", LOGICAL_Y_POSITION(mesh_index_to_ypos(y)));
   \   00000AB0   0x4638             MOV      R0,R7
   \   00000AB2   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   00000AB6   0xF8D8 0x1004      LDR      R1,[R8, #+4]
   \   00000ABA   0x.... 0x....      BL       __aeabi_fadd
   \   00000ABE   0x4601             MOV      R1,R0
   \   00000AC0   0x.... 0x....      ADR.W    R0,`?<Constant ", Y ">`
   \   00000AC4   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
    660                        SERIAL_EOL();
   \   00000AC8   0x210A             MOVS     R1,#+10
   \   00000ACA   0x4630             MOV      R0,R6
   \   00000ACC   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??gcode_G29_UBL_107: (+1)
   \   00000AD0   0x1C7F             ADDS     R7,R7,#+1
   \                     ??gcode_G29_UBL_104: (+1)
   \   00000AD2   0xF105 0x0060      ADD      R0,R5,#+96
   \   00000AD6   0xB2FF             UXTB     R7,R7
   \   00000AD8   0x7840             LDRB     R0,[R0, #+1]
   \   00000ADA   0x4287             CMP      R7,R0
   \   00000ADC   0xD2B9             BCS.N    ??gcode_G29_UBL_103
   \   00000ADE   0x46BB             MOV      R11,R7
   \   00000AE0   0xF859 0x002B      LDR      R0,[R9, R11, LSL #+2]
   \   00000AE4   0x.... 0x....      BL       __iar_FDtest
   \   00000AE8   0x2802             CMP      R0,#+2
   \   00000AEA   0xD0F1             BEQ.N    ??gcode_G29_UBL_107
   \   00000AEC   0x.... 0x....      ADR.W    R0,`?<Constant "M421 I ">`
   \   00000AF0   0x4621             MOV      R1,R4
   \   00000AF2   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   00000AF6   0x4659             MOV      R1,R11
   \   00000AF8   0x....             ADR.N    R0,??find_mean_mesh_height_1  ;; " J "
   \   00000AFA   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   00000AFE   0x.... 0x....      ADR.W    R10,??find_mean_mesh_height_1+0x4  ;; " Z "
   \   00000B02   0xE7B9             B.N      ??gcode_G29_UBL_106
    661                      }
    662                  return;
    663                }
    664          
    665                int16_t a = settings.calc_num_meshes();
   \                     ??gcode_G29_UBL_101: (+1)
   \   00000B04   0x.... 0x....      BL       _ZN14MarlinSettings15calc_num_meshesEv
   \   00000B08   0xB201             SXTH     R1,R0
    666          
    667                if (!a) {
   \   00000B0A   0xB921             CBNZ.N   R1,??gcode_G29_UBL_108
    668                  SERIAL_PROTOCOLLNPGM("?EEPROM storage not available.");
   \                     ??gcode_G29_UBL_94: (+1)
   \   00000B0C   0x.... 0x....      LDR.W    R0,??DataTable79
   \                     ??gcode_G29_UBL_3: (+1)
   \   00000B10   0x.... 0x....      BL       _Z14serialprintPGMPKc
    669                  goto LEAVE;
    670                }
    671          
    672                if (!WITHIN(g29_storage_slot, 0, a - 1)) {
    673                  SERIAL_PROTOCOLLNPGM("?Invalid storage slot.");
    674                  SERIAL_PROTOCOLLNPAIR("?Use 0 to ", a - 1);
    675                  goto LEAVE;
    676                }
    677          
    678                settings.store_mesh(g29_storage_slot);
    679                storage_slot = g29_storage_slot;
    680          
    681                SERIAL_PROTOCOLLNPGM("Done.");
    682              }
    683          
    684              if (parser.seen('T'))
    685                display_map(g29_map_type);
    686          
    687              LEAVE:
    688          
    689              #if ENABLED(NEWPANEL)
    690                lcd_reset_alert_level();
    691                LCD_MESSAGEPGM("");
    692                lcd_quick_feedback();
    693                lcd_external_control = false;
    694              #endif
    695          
    696              return;
   \   00000B14   0x....             B.N      ?Subroutine0
   \                     ??gcode_G29_UBL_108: (+1)
   \   00000B16   0x6920             LDR      R0,[R4, #+16]
   \   00000B18   0x1E4D             SUBS     R5,R1,#+1
   \   00000B1A   0x2800             CMP      R0,#+0
   \   00000B1C   0xD401             BMI.N    ??gcode_G29_UBL_95
   \   00000B1E   0x4285             CMP      R5,R0
   \   00000B20   0xDA0E             BGE.N    ??gcode_G29_UBL_109
   \                     ??gcode_G29_UBL_95: (+1)
   \   00000B22   0x.... 0x....      LDR.W    R0,??DataTable79_1
   \   00000B26   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   00000B2A   0x4629             MOV      R1,R5
   \   00000B2C   0x.... 0x....      LDR.W    R0,??DataTable79_2
   \   00000B30   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   00000B34   0x.... 0x....      LDR.W    R0,??DataTable78_1
   \   00000B38   0x210A             MOVS     R1,#+10
   \   00000B3A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   00000B3E   0x....             B.N      ?Subroutine0
   \                     ??gcode_G29_UBL_109: (+1)
   \   00000B40   0xB240             SXTB     R0,R0
   \   00000B42   0x.... 0x....      BL       _ZN14MarlinSettings10store_meshEa
   \   00000B46   0x6920             LDR      R0,[R4, #+16]
   \   00000B48   0x.... 0x....      LDR.W    R1,??DataTable78
   \   00000B4C   0x7008             STRB     R0,[R1, #+0]
   \   00000B4E   0x.... 0x....      ADR.W    R0,`?<Constant "Done.\\n">`
   \   00000B52   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \                     ??gcode_G29_UBL_96: (+1)
   \   00000B56   0x....             LDR.N    R0,??find_mean_mesh_height_0+0x8
   \   00000B58   0x7880             LDRB     R0,[R0, #+2]
   \   00000B5A   0x0700             LSLS     R0,R0,#+28
   \   00000B5C   0xD50A             BPL.N    ??gcode_G29_UBL_4
   \   00000B5E   0x....             LDR.N    R0,??find_mean_mesh_height_0+0xC
   \   00000B60   0x7CC0             LDRB     R0,[R0, #+19]
   \   00000B62   0xB110             CBZ.N    R0,??gcode_G29_UBL_110
   \   00000B64   0x....             LDR.N    R1,??DataTable75
   \   00000B66   0x6809             LDR      R1,[R1, #+0]
   \   00000B68   0x1840             ADDS     R0,R0,R1
   \                     ??gcode_G29_UBL_110: (+1)
   \   00000B6A   0x....             LDR.N    R1,??find_mean_mesh_height_0+0x10
   \   00000B6C   0x6008             STR      R0,[R1, #+0]
   \   00000B6E   0x6960             LDR      R0,[R4, #+20]
   \   00000B70   0x.... 0x....      BL       _ZN20unified_bed_leveling11display_mapEi
   \                     ??gcode_G29_UBL_4: (+1)
   \   00000B74                      REQUIRE ?Subroutine0
   \   00000B74                      ;; // Fall through to label ?Subroutine0
    697            }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xB007             ADD      SP,SP,#+28
   \   00000002   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    698          

   \                                 In section .text, align 4, keep-with-next
    699            void unified_bed_leveling::find_mean_mesh_height() {
   \                     _ZN20unified_bed_leveling21find_mean_mesh_heightEv: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
    700              float sum = 0.0;
    701              int n = 0;
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0xB083             SUB      SP,SP,#+12
   \   00000008   0x2500             MOVS     R5,#+0
    702              for (uint8_t x = 0; x < GRID_MAX_POINTS_X; x++)
   \   0000000A   0x4627             MOV      R7,R4
   \   0000000C   0x.... 0x....      LDR.W    R8,??DataTable75_3
   \   00000010   0xE015             B.N      ??find_mean_mesh_height_2
    703                for (uint8_t y = 0; y < GRID_MAX_POINTS_Y; y++)
    704                  if (!isnan(z_values[x][y])) {
   \                     ??find_mean_mesh_height_3: (+1)
   \   00000012   0xF859 0x0026      LDR      R0,[R9, R6, LSL #+2]
   \   00000016   0x.... 0x....      BL       __iar_FDtest
   \   0000001A   0x2802             CMP      R0,#+2
   \   0000001C   0xD006             BEQ.N    ??find_mean_mesh_height_4
    705                    sum += z_values[x][y];
   \   0000001E   0x4629             MOV      R1,R5
   \   00000020   0xF859 0x0026      LDR      R0,[R9, R6, LSL #+2]
   \   00000024   0x.... 0x....      BL       __aeabi_fadd
   \   00000028   0x4605             MOV      R5,R0
    706                    n++;
   \   0000002A   0x1C64             ADDS     R4,R4,#+1
    707                  }
   \                     ??find_mean_mesh_height_4: (+1)
   \   0000002C   0x1C70             ADDS     R0,R6,#+1
   \   0000002E   0xB2C6             UXTB     R6,R0
   \                     ??find_mean_mesh_height_5: (+1)
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable81
   \   00000034   0x7840             LDRB     R0,[R0, #+1]
   \   00000036   0x4286             CMP      R6,R0
   \   00000038   0xDBEB             BLT.N    ??find_mean_mesh_height_3
   \   0000003A   0x1C7F             ADDS     R7,R7,#+1
   \   0000003C   0xB2FF             UXTB     R7,R7
   \                     ??find_mean_mesh_height_2: (+1)
   \   0000003E   0x....             LDR.N    R0,??DataTable75_2
   \   00000040   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   00000044   0x4287             CMP      R7,R0
   \   00000046   0xDA05             BGE.N    ??find_mean_mesh_height_6
   \   00000048   0xEB07 0x0047      ADD      R0,R7,R7, LSL #+1
   \   0000004C   0x2600             MOVS     R6,#+0
   \   0000004E   0xEB08 0x1900      ADD      R9,R8,R0, LSL #+4
   \   00000052   0xE7ED             B.N      ??find_mean_mesh_height_5
    708          
    709              const float mean = sum / n;
   \                     ??find_mean_mesh_height_6: (+1)
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       __aeabi_i2f
   \   0000005A   0x4601             MOV      R1,R0
   \   0000005C   0x4628             MOV      R0,R5
   \   0000005E   0x.... 0x....      BL       __aeabi_fdiv
   \   00000062   0x9001             STR      R0,[SP, #+4]
    710          
    711              //
    712              // Sum the squares of difference from mean
    713              //
    714              float sum_of_diff_squared = 0.0;
   \   00000064   0x2500             MOVS     R5,#+0
    715              for (uint8_t x = 0; x < GRID_MAX_POINTS_X; x++)
   \   00000066   0x2700             MOVS     R7,#+0
   \   00000068   0xE001             B.N      ??find_mean_mesh_height_7
   \                     ??find_mean_mesh_height_8: (+1)
   \   0000006A   0x1C7F             ADDS     R7,R7,#+1
   \   0000006C   0xB2FF             UXTB     R7,R7
   \                     ??find_mean_mesh_height_7: (+1)
   \   0000006E   0x....             LDR.N    R0,??DataTable75_2
   \   00000070   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   00000074   0x4287             CMP      R7,R0
   \   00000076   0xDA35             BGE.N    ??find_mean_mesh_height_9
    716                for (uint8_t y = 0; y < GRID_MAX_POINTS_Y; y++)
   \   00000078   0xEB07 0x0047      ADD      R0,R7,R7, LSL #+1
   \   0000007C   0xEB08 0x1000      ADD      R0,R8,R0, LSL #+4
   \   00000080   0x2600             MOVS     R6,#+0
   \   00000082   0x9000             STR      R0,[SP, #+0]
   \   00000084   0xE016             B.N      ??find_mean_mesh_height_10
   \                     ??find_mean_mesh_height_11: (+1)
   \   00000086   0x4658             MOV      R0,R11
   \   00000088   0x4659             MOV      R1,R11
   \   0000008A   0x.... 0x....      BL       __aeabi_fmul
   \   0000008E   0x4683             MOV      R11,R0
   \                     ??find_mean_mesh_height_12: (+1)
   \   00000090   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   00000094   0xD504             BPL.N    ??find_mean_mesh_height_13
   \   00000096   0x4650             MOV      R0,R10
   \   00000098   0x4659             MOV      R1,R11
   \   0000009A   0x.... 0x....      BL       __aeabi_fmul
   \   0000009E   0x4682             MOV      R10,R0
   \                     ??find_mean_mesh_height_13: (+1)
   \   000000A0   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   000000A4   0xD1EF             BNE.N    ??find_mean_mesh_height_11
    717                  if (!isnan(z_values[x][y]))
    718                    sum_of_diff_squared += sq(z_values[x][y] - mean);
   \   000000A6   0x4628             MOV      R0,R5
   \   000000A8   0x4651             MOV      R1,R10
   \   000000AA   0x.... 0x....      BL       __aeabi_fadd
   \   000000AE   0x4605             MOV      R5,R0
   \                     ??find_mean_mesh_height_14: (+1)
   \   000000B0   0x1C70             ADDS     R0,R6,#+1
   \   000000B2   0xB2C6             UXTB     R6,R0
   \                     ??find_mean_mesh_height_10: (+1)
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable81
   \   000000B8   0x7840             LDRB     R0,[R0, #+1]
   \   000000BA   0x4286             CMP      R6,R0
   \   000000BC   0xDAD5             BGE.N    ??find_mean_mesh_height_8
   \   000000BE   0x9800             LDR      R0,[SP, #+0]
   \   000000C0   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000000C4   0x.... 0x....      BL       __iar_FDtest
   \   000000C8   0x2802             CMP      R0,#+2
   \   000000CA   0xD0F1             BEQ.N    ??find_mean_mesh_height_14
   \   000000CC   0x9800             LDR      R0,[SP, #+0]
   \   000000CE   0x9901             LDR      R1,[SP, #+4]
   \   000000D0   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000000D4   0x.... 0x....      BL       __aeabi_fsub
   \   000000D8   0x4683             MOV      R11,R0
   \   000000DA   0xF04F 0x0902      MOV      R9,#+2
   \   000000DE   0xF04F 0x5A7E      MOV      R10,#+1065353216
   \   000000E2   0xE7D5             B.N      ??find_mean_mesh_height_12
    719          
    720              SERIAL_ECHOLNPAIR("# of samples: ", n);
   \                     ??find_mean_mesh_height_9: (+1)
   \   000000E4   0x4621             MOV      R1,R4
   \   000000E6   0x.... 0x....      ADR.W    R0,`?<Constant "# of samples: ">`
   \   000000EA   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   000000EE   0x.... 0x....      LDR.W    R6,??DataTable78_1
   \   000000F2   0x210A             MOVS     R1,#+10
   \   000000F4   0x4630             MOV      R0,R6
   \   000000F6   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    721              SERIAL_ECHOPGM("Mean Mesh Height: ");
   \   000000FA   0x.... 0x....      ADR.W    R0,`?<Constant "Mean Mesh Height: ">`
   \   000000FE   0x.... 0x....      BL       _Z14serialprintPGMPKc
    722              SERIAL_ECHO_F(mean, 6);
   \   00000102   0x2006             MOVS     R0,#+6
   \   00000104   0x9000             STR      R0,[SP, #+0]
   \   00000106   0x9801             LDR      R0,[SP, #+4]
   \   00000108   0x.... 0x....      BL       __aeabi_f2d
   \   0000010C   0x4602             MOV      R2,R0
   \   0000010E   0x460B             MOV      R3,R1
   \   00000110   0x4630             MOV      R0,R6
   \   00000112   0x.... 0x....      BL       _ZN5Print5printEdi
    723              SERIAL_EOL();
   \   00000116   0x210A             MOVS     R1,#+10
   \   00000118   0x4630             MOV      R0,R6
   \   0000011A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    724          
    725              const float sigma = SQRT(sum_of_diff_squared / (n + 1));
   \   0000011E   0x1C60             ADDS     R0,R4,#+1
   \   00000120   0x.... 0x....      BL       __aeabi_i2f
   \   00000124   0x4601             MOV      R1,R0
   \   00000126   0x4628             MOV      R0,R5
   \   00000128   0x.... 0x....      BL       __aeabi_fdiv
   \   0000012C   0x.... 0x....      BL       sqrtf
   \   00000130   0x4604             MOV      R4,R0
    726              SERIAL_ECHOPGM("Standard Deviation: ");
   \   00000132   0x.... 0x....      ADR.W    R0,`?<Constant "Standard Deviation: ">`
   \   00000136   0x.... 0x....      BL       _Z14serialprintPGMPKc
    727              SERIAL_ECHO_F(sigma, 6);
   \   0000013A   0x2006             MOVS     R0,#+6
   \   0000013C   0x9000             STR      R0,[SP, #+0]
   \   0000013E   0x4620             MOV      R0,R4
   \   00000140   0x.... 0x....      BL       __aeabi_f2d
   \   00000144   0x4602             MOV      R2,R0
   \   00000146   0x460B             MOV      R3,R1
   \   00000148   0x4630             MOV      R0,R6
   \   0000014A   0x.... 0x....      BL       _ZN5Print5printEdi
    728              SERIAL_EOL();
   \   0000014E   0x210A             MOVS     R1,#+10
   \   00000150   0x4630             MOV      R0,R6
   \   00000152   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    729          
    730              if (g29_c_flag)
   \   00000156   0x....             LDR.N    R4,??DataTable75_1
   \   00000158   0x7820             LDRB     R0,[R4, #+0]
   \   0000015A   0xB380             CBZ.N    R0,??find_mean_mesh_height_15
    731                for (uint8_t x = 0; x < GRID_MAX_POINTS_X; x++)
   \   0000015C   0x2500             MOVS     R5,#+0
   \   0000015E   0xE023             B.N      ??find_mean_mesh_height_16
   \                     ??find_mean_mesh_height_0:
   \   00000160   0x........         DC32     `?<Constant "?Enable EEPROM and in...">`
   \   00000164   0x........         DC32     `?<Constant "M502, M500, M501 in t...">`
   \   00000168   0x........         DC32     _ZN11GCodeParser8codebitsE
   \   0000016C   0x........         DC32     _ZN11GCodeParser5paramE
   \   00000170   0x........         DC32     _ZN11GCodeParser9value_ptrE
    732                  for (uint8_t y = 0; y < GRID_MAX_POINTS_Y; y++)
    733                    if (!isnan(z_values[x][y]))
   \                     ??find_mean_mesh_height_17: (+1)
   \   00000174   0xF857 0x0026      LDR      R0,[R7, R6, LSL #+2]
   \   00000178   0x.... 0x....      BL       __iar_FDtest
   \   0000017C   0x2802             CMP      R0,#+2
   \   0000017E   0xD00A             BEQ.N    ??find_mean_mesh_height_18
    734                      z_values[x][y] -= mean + g29_constant;
   \   00000180   0x9801             LDR      R0,[SP, #+4]
   \   00000182   0x6A21             LDR      R1,[R4, #+32]
   \   00000184   0x.... 0x....      BL       __aeabi_fadd
   \   00000188   0x4601             MOV      R1,R0
   \   0000018A   0xF857 0x0026      LDR      R0,[R7, R6, LSL #+2]
   \   0000018E   0x.... 0x....      BL       __aeabi_fsub
   \   00000192   0xF847 0x0026      STR      R0,[R7, R6, LSL #+2]
   \                     ??find_mean_mesh_height_18: (+1)
   \   00000196   0x1C70             ADDS     R0,R6,#+1
   \   00000198   0xB2C6             UXTB     R6,R0
   \                     ??find_mean_mesh_height_19: (+1)
   \   0000019A   0x.... 0x....      LDR.W    R0,??DataTable81
   \   0000019E   0x7840             LDRB     R0,[R0, #+1]
   \   000001A0   0x4286             CMP      R6,R0
   \   000001A2   0xDBE7             BLT.N    ??find_mean_mesh_height_17
   \   000001A4   0x1C6D             ADDS     R5,R5,#+1
   \   000001A6   0xB2ED             UXTB     R5,R5
   \                     ??find_mean_mesh_height_16: (+1)
   \   000001A8   0x....             LDR.N    R0,??DataTable75_2
   \   000001AA   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   000001AE   0x4285             CMP      R5,R0
   \   000001B0   0xDA05             BGE.N    ??find_mean_mesh_height_15
   \   000001B2   0xEB05 0x0045      ADD      R0,R5,R5, LSL #+1
   \   000001B6   0x2600             MOVS     R6,#+0
   \   000001B8   0xEB08 0x1700      ADD      R7,R8,R0, LSL #+4
   \   000001BC   0xE7ED             B.N      ??find_mean_mesh_height_19
    735            }
   \                     ??find_mean_mesh_height_15: (+1)
   \   000001BE   0xB003             ADD      SP,SP,#+12
   \   000001C0   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??find_mean_mesh_height_1:
   \   000001C4   0x20 0x4A          DC8      " J "
   \              0x20 0x00    
   \   000001C8   0x20 0x5A          DC8      " Z "
   \              0x20 0x00    
    736          

   \                                 In section .text, align 2, keep-with-next
    737            void unified_bed_leveling::shift_mesh_height() {
   \                     _ZN20unified_bed_leveling17shift_mesh_heightEv: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    738              for (uint8_t x = 0; x < GRID_MAX_POINTS_X; x++)
   \   00000002   0x2500             MOVS     R5,#+0
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable81_1
   \   00000008   0xE016             B.N      ??shift_mesh_height_0
    739                for (uint8_t y = 0; y < GRID_MAX_POINTS_Y; y++)
    740                  if (!isnan(z_values[x][y]))
   \                     ??shift_mesh_height_1: (+1)
   \   0000000A   0xF856 0x0027      LDR      R0,[R6, R7, LSL #+2]
   \   0000000E   0x.... 0x....      BL       __iar_FDtest
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD008             BEQ.N    ??shift_mesh_height_2
    741                    z_values[x][y] += g29_constant;
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable81_2
   \   0000001A   0xF856 0x1027      LDR      R1,[R6, R7, LSL #+2]
   \   0000001E   0x6A00             LDR      R0,[R0, #+32]
   \   00000020   0x.... 0x....      BL       __aeabi_fadd
   \   00000024   0xF846 0x0027      STR      R0,[R6, R7, LSL #+2]
   \                     ??shift_mesh_height_2: (+1)
   \   00000028   0x1C7F             ADDS     R7,R7,#+1
   \   0000002A   0xB2FF             UXTB     R7,R7
   \                     ??shift_mesh_height_3: (+1)
   \   0000002C   0xF894 0x0061      LDRB     R0,[R4, #+97]
   \   00000030   0x4287             CMP      R7,R0
   \   00000032   0xDBEA             BLT.N    ??shift_mesh_height_1
   \   00000034   0x1C6D             ADDS     R5,R5,#+1
   \   00000036   0xB2ED             UXTB     R5,R5
   \                     ??shift_mesh_height_0: (+1)
   \   00000038   0xF894 0x0060      LDRB     R0,[R4, #+96]
   \   0000003C   0x4285             CMP      R5,R0
   \   0000003E   0xDA07             BGE.N    ??shift_mesh_height_4
   \   00000040   0xEB05 0x0045      ADD      R0,R5,R5, LSL #+1
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable81_3
   \   00000048   0x2700             MOVS     R7,#+0
   \   0000004A   0xEB01 0x1600      ADD      R6,R1,R0, LSL #+4
   \   0000004E   0xE7ED             B.N      ??shift_mesh_height_3
    742            }
   \                     ??shift_mesh_height_4: (+1)
   \   00000050   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    743          
    744            #if ENABLED(NEWPANEL)
    745          
    746              typedef void (*clickFunc_t)();
    747          
    748              bool click_and_hold(const clickFunc_t func=NULL) {
    749                if (is_lcd_clicked()) {
    750                  lcd_quick_feedback();
    751                  const millis_t nxt = millis() + 1500UL;
    752                  while (is_lcd_clicked()) {                // Loop while the encoder is pressed. Uses hardware flag!
    753                    idle();                                 // idle, of course
    754                    if (ELAPSED(millis(), nxt)) {           // After 1.5 seconds
    755                      lcd_quick_feedback();
    756                      if (func) (*func)();
    757                      wait_for_release();
    758                      safe_delay(50);                       // Debounce the Encoder wheel
    759                      return true;
    760                    }
    761                  }
    762                }
    763                return false;
    764              }
    765          
    766            #endif // NEWPANEL
    767          
    768            #if HAS_BED_PROBE
    769              /**
    770               * Probe all invalidated locations of the mesh that can be reached by the probe.
    771               * This attempts to fill in locations closest to the nozzle's start location first.
    772               */

   \                                 In section .text, align 2, keep-with-next
    773              void unified_bed_leveling::probe_entire_mesh(const float &rx, const float &ry, const bool do_ubl_mesh_map, const bool stow_probe, bool close_or_far) {
   \                     _ZN20unified_bed_leveling17probe_entire_meshERKfS1_bbb: (+1)
   \   00000000   0xE92D 0x4FFC      PUSH     {R2-R11,LR}
   \   00000004   0x4605             MOV      R5,R0
    774                mesh_index_pair location;
    775          
    776                #if ENABLED(NEWPANEL)
    777                  lcd_external_control = true;
    778                #endif
    779          
    780                save_ubl_active_state_and_disable();   // we don't do bed level correction because we want the raw data when we probe
   \   00000006   0x....             LDR.N    R0,??DataTable77
   \   00000008   0x.... 0x....      LDR.W    R8,??DataTable81_2
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0xF888 0x0003      STRB     R0,[R8, #+3]
   \   00000012   0xB087             SUB      SP,SP,#+28
   \   00000014   0x460E             MOV      R6,R1
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       _Z24set_bed_leveling_enabledb
    781                DEPLOY_PROBE();
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       _Z18set_probe_deployedb
    782          
    783                uint16_t max_iterations = GRID_MAX_POINTS;
   \   00000022   0x.... 0x....      LDR.W    R11,??DataTable81_1
   \   00000026   0x.... 0x....      LDR.W    R9,??DataTable81_3
   \   0000002A   0xF10B 0x0060      ADD      R0,R11,#+96
   \   0000002E   0x9003             STR      R0,[SP, #+12]
   \   00000030   0x9903             LDR      R1,[SP, #+12]
   \   00000032   0xF89B 0x0060      LDRB     R0,[R11, #+96]
   \   00000036   0x7849             LDRB     R1,[R1, #+1]
   \   00000038   0xFB01 0xF700      MUL      R7,R1,R0
    784          
    785                do {
    786                  if (do_ubl_mesh_map) display_map(g29_map_type);
   \                     ??probe_entire_mesh_0: (+1)
   \   0000003C   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \   00000040   0xB118             CBZ.N    R0,??probe_entire_mesh_1
   \   00000042   0xF8D8 0x0014      LDR      R0,[R8, #+20]
   \   00000046   0x.... 0x....      BL       _ZN20unified_bed_leveling11display_mapEi
    787          
    788                  #if ENABLED(NEWPANEL)
    789                    if (is_lcd_clicked()) {
    790                      SERIAL_PROTOCOLLNPGM("\nMesh only partially populated.\n");
    791                      lcd_quick_feedback();
    792                      STOW_PROBE();
    793                      wait_for_release();
    794                      lcd_external_control = false;
    795                      restore_ubl_active_state_and_leave();
    796                      return;
    797                    }
    798                  #endif
    799          
    800                  if (close_or_far)
   \                     ??probe_entire_mesh_1: (+1)
   \   0000004A   0xF89D 0x0048      LDRB     R0,[SP, #+72]
   \   0000004E   0xB118             CBZ.N    R0,??probe_entire_mesh_2
    801                    location = find_furthest_invalid_mesh_point();
   \   00000050   0xA804             ADD      R0,SP,#+16
   \   00000052   0x.... 0x....      BL       _ZN20unified_bed_leveling32find_furthest_invalid_mesh_pointEv
   \   00000056   0xE008             B.N      ??probe_entire_mesh_3
    802                  else
    803                    location = find_closest_mesh_point_of_type(INVALID, rx, ry, USE_PROBE_AS_REFERENCE, NULL);
   \                     ??probe_entire_mesh_2: (+1)
   \   00000058   0x9001             STR      R0,[SP, #+4]
   \   0000005A   0x4633             MOV      R3,R6
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x9000             STR      R0,[SP, #+0]
   \   00000060   0x462A             MOV      R2,R5
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0xA804             ADD      R0,SP,#+16
   \   00000066   0x.... 0x....      BL       _ZN20unified_bed_leveling31find_closest_mesh_point_of_typeE13MeshPointTypeRKfS2_bPj
    804          
    805                  if (location.x_index >= 0) {    // mesh point found and is reachable by probe
   \                     ??probe_entire_mesh_3: (+1)
   \   0000006A   0xF99D 0xA010      LDRSB    R10,[SP, #+16]
   \   0000006E   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000072   0xD41F             BMI.N    ??probe_entire_mesh_4
    806                    const float rawx = mesh_index_to_xpos(location.x_index),
   \   00000074   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   00000078   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   0000007C   0x9002             STR      R0,[SP, #+8]
    807                                rawy = mesh_index_to_ypos(location.y_index);
   \   0000007E   0xF99D 0x4011      LDRSB    R4,[SP, #+17]
   \   00000082   0xB2E0             UXTB     R0,R4
   \   00000084   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   00000088   0x9001             STR      R0,[SP, #+4]
    808          
    809                    const float measured_z = probe_pt(rawx, rawy, stow_probe, g29_verbose_level); // TODO: Needs error handling
    810                    z_values[location.x_index][location.y_index] = measured_z;
   \   0000008A   0xEB0A 0x004A      ADD      R0,R10,R10, LSL #+1
   \   0000008E   0xEB09 0x1A00      ADD      R10,R9,R0, LSL #+4
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0x9000             STR      R0,[SP, #+0]
   \   00000096   0xA901             ADD      R1,SP,#+4
   \   00000098   0xF8D8 0x3004      LDR      R3,[R8, #+4]
   \   0000009C   0xF89D 0x2020      LDRB     R2,[SP, #+32]
   \   000000A0   0xB2DB             UXTB     R3,R3
   \   000000A2   0xA802             ADD      R0,SP,#+8
   \   000000A4   0x.... 0x....      BL       _Z8probe_ptRKfS0_bhb
   \   000000A8   0xF84A 0x0024      STR      R0,[R10, R4, LSL #+2]
   \   000000AC   0x1E78             SUBS     R0,R7,#+1
   \   000000AE   0xB287             UXTH     R7,R0
   \   000000B0   0x2F00             CMP      R7,#+0
   \   000000B2   0xD1C3             BNE.N    ??probe_entire_mesh_0
    811                  }
    812          
    813                } while (location.x_index >= 0 && --max_iterations);
    814          
    815                STOW_PROBE();
   \                     ??probe_entire_mesh_4: (+1)
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0x.... 0x....      BL       _Z18set_probe_deployedb
    816                restore_ubl_active_state_and_leave();
   \   000000BA   0xF898 0x1003      LDRB     R1,[R8, #+3]
   \   000000BE   0x1E48             SUBS     R0,R1,#+1
   \   000000C0   0x4180             SBCS     R0,R0,R0
   \   000000C2   0x43C0             MVNS     R0,R0
   \   000000C4   0x0FC0             LSRS     R0,R0,#+31
   \   000000C6   0x.... 0x....      BL       _Z24set_bed_leveling_enabledb
   \   000000CA   0xF89B 0x0098      LDRB     R0,[R11, #+152]
   \   000000CE   0x.... 0x....      BL       __aeabi_ui2f
   \   000000D2   0x4680             MOV      R8,R0
   \   000000D4   0x9803             LDR      R0,[SP, #+12]
   \   000000D6   0x68C7             LDR      R7,[R0, #+12]
   \   000000D8   0xF10B 0x0008      ADD      R0,R11,#+8
   \   000000DC   0x9002             STR      R0,[SP, #+8]
   \   000000DE   0xF240 0x3102      MOVW     R1,#+770
   \   000000E2   0xF9B0 0x0050      LDRSH    R0,[R0, #+80]
   \   000000E6   0x4288             CMP      R0,R1
   \   000000E8   0xD13A             BNE.N    ??probe_entire_mesh_5
    817                if(MACHINETPYE == IS_KINEMATIC)
    818                {
    819                do_blocking_move_to_xy(
    820                  constrain(rx - (X_PROBE_OFFSET_FROM_EXTRUDER), MESH_MIN_X_IS_KINEMATIC, MESH_MAX_X_IS_KINEMATIC),
    821                  constrain(ry - (Y_PROBE_OFFSET_FROM_EXTRUDER), MESH_MIN_Y_IS_KINEMATIC, MESH_MAX_Y_IS_KINEMATIC)
    822                );
   \   000000EA   0x....             LDR.N    R4,??DataTable77_2
   \   000000EC   0x6820             LDR      R0,[R4, #+0]
   \   000000EE   0x4641             MOV      R1,R8
   \   000000F0   0x.... 0x....      BL       __aeabi_fadd
   \   000000F4   0x4681             MOV      R9,R0
   \   000000F6   0x6828             LDR      R0,[R5, #+0]
   \   000000F8   0x4639             MOV      R1,R7
   \   000000FA   0x.... 0x....      BL       __aeabi_fsub
   \   000000FE   0x4649             MOV      R1,R9
   \   00000100   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000104   0x4605             MOV      R5,R0
   \   00000106   0xBF38             IT       CC 
   \   00000108   0xF8CD 0x9000      STRCC    R9,[SP, #+0]
   \   0000010C   0xD309             BCC.N    ??probe_entire_mesh_6
   \   0000010E   0x6860             LDR      R0,[R4, #+4]
   \   00000110   0x4641             MOV      R1,R8
   \   00000112   0x.... 0x....      BL       __aeabi_fsub
   \   00000116   0x4629             MOV      R1,R5
   \   00000118   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000011C   0xBF34             ITE      CC 
   \   0000011E   0x9000             STRCC    R0,[SP, #+0]
   \   00000120   0x9500             STRCS    R5,[SP, #+0]
   \                     ??probe_entire_mesh_6: (+1)
   \   00000122   0x68A0             LDR      R0,[R4, #+8]
   \   00000124   0x4641             MOV      R1,R8
   \   00000126   0x.... 0x....      BL       __aeabi_fadd
   \   0000012A   0x9903             LDR      R1,[SP, #+12]
   \   0000012C   0x6909             LDR      R1,[R1, #+16]
   \   0000012E   0x4605             MOV      R5,R0
   \   00000130   0x6830             LDR      R0,[R6, #+0]
   \   00000132   0x.... 0x....      BL       __aeabi_fsub
   \   00000136   0x4629             MOV      R1,R5
   \   00000138   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000013C   0x4606             MOV      R6,R0
   \   0000013E   0xBF38             IT       CC 
   \   00000140   0x9501             STRCC    R5,[SP, #+4]
   \   00000142   0xD309             BCC.N    ??probe_entire_mesh_7
   \   00000144   0x68E0             LDR      R0,[R4, #+12]
   \   00000146   0x4641             MOV      R1,R8
   \   00000148   0x.... 0x....      BL       __aeabi_fsub
   \   0000014C   0x4631             MOV      R1,R6
   \   0000014E   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000152   0xBF34             ITE      CC 
   \   00000154   0x9001             STRCC    R0,[SP, #+4]
   \   00000156   0x9601             STRCS    R6,[SP, #+4]
   \                     ??probe_entire_mesh_7: (+1)
   \   00000158   0x2000             MOVS     R0,#+0
   \   0000015A   0x9002             STR      R0,[SP, #+8]
   \   0000015C   0xAA02             ADD      R2,SP,#+8
   \   0000015E   0xE08D             B.N      ??probe_entire_mesh_8
    823                }
    824                else
    825                {
    826                do_blocking_move_to_xy(
    827                  constrain(rx - (X_PROBE_OFFSET_FROM_EXTRUDER), MESH_MIN_X_IS_Cartesian, MESH_MAX_X_IS_Cartesian),
    828                  constrain(ry - (Y_PROBE_OFFSET_FROM_EXTRUDER), MESH_MIN_Y_IS_Cartesian, MESH_MAX_Y_IS_Cartesian)
    829                );        
   \                     ??probe_entire_mesh_5: (+1)
   \   00000160   0x9802             LDR      R0,[SP, #+8]
   \   00000162   0xF8D0 0x900C      LDR      R9,[R0, #+12]
   \   00000166   0xF04F 0x507C      MOV      R0,#+1056964608
   \   0000016A   0x4649             MOV      R1,R9
   \   0000016C   0x.... 0x....      BL       __aeabi_fmul
   \   00000170   0x4682             MOV      R10,R0
   \   00000172   0x4651             MOV      R1,R10
   \   00000174   0x.... 0x....      BL       __aeabi_fsub
   \   00000178   0x4641             MOV      R1,R8
   \   0000017A   0x.... 0x....      BL       __aeabi_fadd
   \   0000017E   0x4604             MOV      R4,R0
   \   00000180   0xF8DB 0x0008      LDR      R0,[R11, #+8]
   \   00000184   0x4639             MOV      R1,R7
   \   00000186   0x.... 0x....      BL       __aeabi_fadd
   \   0000018A   0x4621             MOV      R1,R4
   \   0000018C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000190   0xBF28             IT       CS 
   \   00000192   0x4604             MOVCS    R4,R0
   \   00000194   0x6828             LDR      R0,[R5, #+0]
   \   00000196   0x4639             MOV      R1,R7
   \   00000198   0x.... 0x....      BL       __aeabi_fsub
   \   0000019C   0x4621             MOV      R1,R4
   \   0000019E   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001A2   0x4605             MOV      R5,R0
   \   000001A4   0xD31C             BCC.N    ??probe_entire_mesh_9
   \   000001A6   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000001AA   0x4651             MOV      R1,R10
   \   000001AC   0x.... 0x....      BL       __aeabi_fmul
   \   000001B0   0x4641             MOV      R1,R8
   \   000001B2   0x.... 0x....      BL       __aeabi_fsub
   \   000001B6   0x4604             MOV      R4,R0
   \   000001B8   0x4648             MOV      R0,R9
   \   000001BA   0x4639             MOV      R1,R7
   \   000001BC   0x.... 0x....      BL       __aeabi_fadd
   \   000001C0   0x4602             MOV      R2,R0
   \   000001C2   0x4620             MOV      R0,R4
   \   000001C4   0x4611             MOV      R1,R2
   \   000001C6   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001CA   0xBF28             IT       CS 
   \   000001CC   0x4610             MOVCS    R0,R2
   \   000001CE   0x4629             MOV      R1,R5
   \   000001D0   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001D4   0xD208             BCS.N    ??probe_entire_mesh_10
   \   000001D6   0x4620             MOV      R0,R4
   \   000001D8   0x4611             MOV      R1,R2
   \   000001DA   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001DE   0xD201             BCS.N    ??probe_entire_mesh_11
   \                     ??probe_entire_mesh_9: (+1)
   \   000001E0   0x9400             STR      R4,[SP, #+0]
   \   000001E2   0xE002             B.N      ??probe_entire_mesh_12
   \                     ??probe_entire_mesh_11: (+1)
   \   000001E4   0x9200             STR      R2,[SP, #+0]
   \   000001E6   0xE000             B.N      ??probe_entire_mesh_12
   \                     ??probe_entire_mesh_10: (+1)
   \   000001E8   0x9500             STR      R5,[SP, #+0]
   \                     ??probe_entire_mesh_12: (+1)
   \   000001EA   0x9802             LDR      R0,[SP, #+8]
   \   000001EC   0x6905             LDR      R5,[R0, #+16]
   \   000001EE   0xF04F 0x507C      MOV      R0,#+1056964608
   \   000001F2   0x4629             MOV      R1,R5
   \   000001F4   0x.... 0x....      BL       __aeabi_fmul
   \   000001F8   0x4681             MOV      R9,R0
   \   000001FA   0x4649             MOV      R1,R9
   \   000001FC   0x.... 0x....      BL       __aeabi_fsub
   \   00000200   0x4641             MOV      R1,R8
   \   00000202   0x.... 0x....      BL       __aeabi_fadd
   \   00000206   0x4604             MOV      R4,R0
   \   00000208   0x9803             LDR      R0,[SP, #+12]
   \   0000020A   0x6907             LDR      R7,[R0, #+16]
   \   0000020C   0x9802             LDR      R0,[SP, #+8]
   \   0000020E   0x6840             LDR      R0,[R0, #+4]
   \   00000210   0x4639             MOV      R1,R7
   \   00000212   0x.... 0x....      BL       __aeabi_fadd
   \   00000216   0x4621             MOV      R1,R4
   \   00000218   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000021C   0xBF28             IT       CS 
   \   0000021E   0x4604             MOVCS    R4,R0
   \   00000220   0x6830             LDR      R0,[R6, #+0]
   \   00000222   0x4639             MOV      R1,R7
   \   00000224   0x.... 0x....      BL       __aeabi_fsub
   \   00000228   0x4621             MOV      R1,R4
   \   0000022A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000022E   0x4606             MOV      R6,R0
   \   00000230   0xD31C             BCC.N    ??probe_entire_mesh_13
   \   00000232   0xF04F 0x4080      MOV      R0,#+1073741824
   \   00000236   0x4649             MOV      R1,R9
   \   00000238   0x.... 0x....      BL       __aeabi_fmul
   \   0000023C   0x4641             MOV      R1,R8
   \   0000023E   0x.... 0x....      BL       __aeabi_fsub
   \   00000242   0x4604             MOV      R4,R0
   \   00000244   0x4628             MOV      R0,R5
   \   00000246   0x4639             MOV      R1,R7
   \   00000248   0x.... 0x....      BL       __aeabi_fadd
   \   0000024C   0x4602             MOV      R2,R0
   \   0000024E   0x4620             MOV      R0,R4
   \   00000250   0x4611             MOV      R1,R2
   \   00000252   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000256   0xBF28             IT       CS 
   \   00000258   0x4610             MOVCS    R0,R2
   \   0000025A   0x4631             MOV      R1,R6
   \   0000025C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000260   0xD208             BCS.N    ??probe_entire_mesh_14
   \   00000262   0x4620             MOV      R0,R4
   \   00000264   0x4611             MOV      R1,R2
   \   00000266   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000026A   0xD201             BCS.N    ??probe_entire_mesh_15
   \                     ??probe_entire_mesh_13: (+1)
   \   0000026C   0x9401             STR      R4,[SP, #+4]
   \   0000026E   0xE002             B.N      ??probe_entire_mesh_16
   \                     ??probe_entire_mesh_15: (+1)
   \   00000270   0x9201             STR      R2,[SP, #+4]
   \   00000272   0xE000             B.N      ??probe_entire_mesh_16
   \                     ??probe_entire_mesh_14: (+1)
   \   00000274   0x9601             STR      R6,[SP, #+4]
   \                     ??probe_entire_mesh_16: (+1)
   \   00000276   0x2000             MOVS     R0,#+0
   \   00000278   0x9004             STR      R0,[SP, #+16]
   \   0000027A   0xAA04             ADD      R2,SP,#+16
   \                     ??probe_entire_mesh_8: (+1)
   \   0000027C   0xA901             ADD      R1,SP,#+4
   \   0000027E   0xA800             ADD      R0,SP,#+0
   \   00000280   0x.... 0x....      BL       _Z22do_blocking_move_to_xyRKfS0_S0_
    830                }
    831              }
   \   00000284   0xB009             ADD      SP,SP,#+36
   \   00000286   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    832          

   \                                 In section .text, align 2, keep-with-next
    833              void unified_bed_leveling::tilt_mesh_based_on_3pts(const float &z1, const float &z2, const float &z3) {
   \                     _ZN20unified_bed_leveling23tilt_mesh_based_on_3ptsERKfS1_S1_: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0xB0A6             SUB      SP,SP,#+152
    834                matrix_3x3 rotation;
    835                vector_3 v1 = vector_3( (UBL_PROBE_PT_1_X - UBL_PROBE_PT_2_X),
    836                                        (UBL_PROBE_PT_1_Y - UBL_PROBE_PT_2_Y),
    837                                        (z1 - z2) ),
   \   0000000A   0x.... 0x....      LDR.W    R9,??DataTable81_1
   \   0000000E   0x6828             LDR      R0,[R5, #+0]
   \   00000010   0x6831             LDR      R1,[R6, #+0]
   \   00000012   0x4617             MOV      R7,R2
   \   00000014   0xF109 0x0460      ADD      R4,R9,#+96
   \   00000018   0x.... 0x....      BL       __aeabi_fsub
   \   0000001C   0x4682             MOV      R10,R0
   \   0000001E   0x6DE0             LDR      R0,[R4, #+92]
   \   00000020   0x6E61             LDR      R1,[R4, #+100]
   \   00000022   0x.... 0x....      BL       __aeabi_fsub
   \   00000026   0x6E21             LDR      R1,[R4, #+96]
   \   00000028   0x4680             MOV      R8,R0
   \   0000002A   0x6DA0             LDR      R0,[R4, #+88]
   \   0000002C   0x.... 0x....      BL       __aeabi_fsub
   \   00000030   0x4601             MOV      R1,R0
   \   00000032   0x4653             MOV      R3,R10
   \   00000034   0x4642             MOV      R2,R8
   \   00000036   0xA811             ADD      R0,SP,#+68
   \   00000038   0x.... 0x....      BL       _ZN8vector_3C1Efff
    838          
    839                         v2 = vector_3( (UBL_PROBE_PT_3_X - UBL_PROBE_PT_2_X),
    840                                        (UBL_PROBE_PT_3_Y - UBL_PROBE_PT_2_Y),
    841                                        (z3 - z2) ),
   \   0000003C   0x6838             LDR      R0,[R7, #+0]
   \   0000003E   0x6831             LDR      R1,[R6, #+0]
   \   00000040   0x.... 0x....      BL       __aeabi_fsub
   \   00000044   0x6E61             LDR      R1,[R4, #+100]
   \   00000046   0x4607             MOV      R7,R0
   \   00000048   0x6EE0             LDR      R0,[R4, #+108]
   \   0000004A   0x.... 0x....      BL       __aeabi_fsub
   \   0000004E   0x6E21             LDR      R1,[R4, #+96]
   \   00000050   0x4606             MOV      R6,R0
   \   00000052   0x6EA0             LDR      R0,[R4, #+104]
   \   00000054   0x.... 0x....      BL       __aeabi_fsub
   \   00000058   0x4601             MOV      R1,R0
   \   0000005A   0x463B             MOV      R3,R7
   \   0000005C   0x4632             MOV      R2,R6
   \   0000005E   0xA80E             ADD      R0,SP,#+56
   \   00000060   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \   00000064   0xA80E             ADD      R0,SP,#+56
   \   00000066   0xC80A             LDM      R0!,{R1,R3}
   \   00000068   0x466A             MOV      R2,SP
   \   0000006A   0xC20A             STM      R2!,{R1,R3}
   \   0000006C   0x6803             LDR      R3,[R0, #0]
   \   0000006E   0x6013             STR      R3,[R2, #+0]
   \   00000070   0xA811             ADD      R0,SP,#+68
   \   00000072   0xE890 0x000E      LDM      R0,{R1-R3}
   \   00000076   0xA803             ADD      R0,SP,#+12
   \   00000078   0x.... 0x....      BL       _ZN8vector_35crossES_S_
    842          
    843                         normal = vector_3::cross(v1, v2);
   \   0000007C   0xA903             ADD      R1,SP,#+12
   \   0000007E   0xC94C             LDM      R1!,{R2,R3,R6}
   \   00000080   0xA808             ADD      R0,SP,#+32
   \   00000082   0xA908             ADD      R1,SP,#+32
   \   00000084   0xC04C             STM      R0!,{R2,R3,R6}
   \   00000086   0xA800             ADD      R0,SP,#+0
   \   00000088   0x.... 0x....      BL       _ZN8vector_310get_normalEv
    844          
    845                normal = normal.get_normal();
   \   0000008C   0xA900             ADD      R1,SP,#+0
   \   0000008E   0xC94C             LDM      R1!,{R2,R3,R6}
   \   00000090   0xA808             ADD      R0,SP,#+32
    846          
    847                /**
    848                 * This vector is normal to the tilted plane.
    849                 * However, we don't know its direction. We need it to point up. So if
    850                 * Z is negative, we need to invert the sign of all components of the vector
    851                 */
    852                if (normal.z < 0.0) {
   \   00000092   0x2100             MOVS     R1,#+0
   \   00000094   0xC04C             STM      R0!,{R2,R3,R6}
   \   00000096   0x4630             MOV      R0,R6
   \   00000098   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000009C   0xD209             BCS.N    ??tilt_mesh_based_on_3pts_0
    853                  normal.x = -normal.x;
   \   0000009E   0xF082 0x4100      EOR      R1,R2,#0x80000000
   \   000000A2   0x9108             STR      R1,[SP, #+32]
    854                  normal.y = -normal.y;
    855                  normal.z = -normal.z;
   \   000000A4   0xF080 0x4000      EOR      R0,R0,#0x80000000
   \   000000A8   0x9909             LDR      R1,[SP, #+36]
   \   000000AA   0x900A             STR      R0,[SP, #+40]
   \   000000AC   0xF081 0x4100      EOR      R1,R1,#0x80000000
   \   000000B0   0x9109             STR      R1,[SP, #+36]
    856                }
    857          
    858                rotation = matrix_3x3::create_look_at(vector_3(normal.x, normal.y, 1));
   \                     ??tilt_mesh_based_on_3pts_0: (+1)
   \   000000B2   0x9A09             LDR      R2,[SP, #+36]
   \   000000B4   0x9908             LDR      R1,[SP, #+32]
   \   000000B6   0xF04F 0x537E      MOV      R3,#+1065353216
   \   000000BA   0xA800             ADD      R0,SP,#+0
   \   000000BC   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \   000000C0   0xA800             ADD      R0,SP,#+0
   \   000000C2   0xE890 0x000E      LDM      R0,{R1-R3}
   \   000000C6   0xA814             ADD      R0,SP,#+80
   \   000000C8   0x.... 0x....      BL       _ZN10matrix_3x314create_look_atE8vector_3
   \   000000CC   0xA81D             ADD      R0,SP,#+116
   \   000000CE   0xA914             ADD      R1,SP,#+80
   \   000000D0   0x2224             MOVS     R2,#+36
   \   000000D2   0x.... 0x....      BL       __aeabi_memcpy4
    859          
    860                if (g29_verbose_level > 2) {
   \   000000D6   0x.... 0x....      LDR.W    R6,??DataTable81_2
   \   000000DA   0x6870             LDR      R0,[R6, #+4]
   \   000000DC   0x2803             CMP      R0,#+3
   \   000000DE   0xDB32             BLT.N    ??tilt_mesh_based_on_3pts_1
    861                  SERIAL_ECHOPGM("bed plane normal = [");
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable82_1
   \   000000E4   0x.... 0x....      BL       _Z14serialprintPGMPKc
    862                  SERIAL_PROTOCOL_F(normal.x, 7);
   \   000000E8   0x2007             MOVS     R0,#+7
   \   000000EA   0x9000             STR      R0,[SP, #+0]
   \   000000EC   0x....             LDR.N    R7,??DataTable78_1
   \   000000EE   0x9808             LDR      R0,[SP, #+32]
   \   000000F0   0x.... 0x....      BL       __aeabi_f2d
   \   000000F4   0x4602             MOV      R2,R0
   \   000000F6   0x460B             MOV      R3,R1
   \   000000F8   0x4638             MOV      R0,R7
   \   000000FA   0x.... 0x....      BL       _ZN5Print5printEdi
    863                  SERIAL_PROTOCOLCHAR(',');
   \   000000FE   0x212C             MOVS     R1,#+44
   \   00000100   0x4638             MOV      R0,R7
   \   00000102   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    864                  SERIAL_PROTOCOL_F(normal.y, 7);
   \   00000106   0x2007             MOVS     R0,#+7
   \   00000108   0x9000             STR      R0,[SP, #+0]
   \   0000010A   0x9809             LDR      R0,[SP, #+36]
   \   0000010C   0x.... 0x....      BL       __aeabi_f2d
   \   00000110   0x4602             MOV      R2,R0
   \   00000112   0x460B             MOV      R3,R1
   \   00000114   0x4638             MOV      R0,R7
   \   00000116   0x.... 0x....      BL       _ZN5Print5printEdi
    865                  SERIAL_PROTOCOLCHAR(',');
   \   0000011A   0x212C             MOVS     R1,#+44
   \   0000011C   0x4638             MOV      R0,R7
   \   0000011E   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    866                  SERIAL_PROTOCOL_F(normal.z, 7);
   \   00000122   0x2007             MOVS     R0,#+7
   \   00000124   0x9000             STR      R0,[SP, #+0]
   \   00000126   0x980A             LDR      R0,[SP, #+40]
   \   00000128   0x.... 0x....      BL       __aeabi_f2d
   \   0000012C   0x4602             MOV      R2,R0
   \   0000012E   0x460B             MOV      R3,R1
   \   00000130   0x4638             MOV      R0,R7
   \   00000132   0x.... 0x....      BL       _ZN5Print5printEdi
    867                  SERIAL_ECHOLNPGM("]");
   \   00000136   0x....             ADR.N    R0,??DataTable78_2  ;; 0x5D, 0x0A, 0x00, 0x00
   \   00000138   0x.... 0x....      BL       _Z14serialprintPGMPKc
    868                  rotation.debug(PSTR("rotation matrix:"));
   \   0000013C   0x.... 0x....      ADR.W    R1,`?<Constant "rotation matrix:">`
   \   00000140   0xA81D             ADD      R0,SP,#+116
   \   00000142   0x.... 0x....      BL       _ZN10matrix_3x35debugEPKc
    869                }
    870          
    871                //
    872                // All of 3 of these points should give us the same d constant
    873                //
    874          
    875                float t = normal.x * (UBL_PROBE_PT_1_X) + normal.y * (UBL_PROBE_PT_1_Y),
    876                      d = t + normal.z * z1;
   \                     ??tilt_mesh_based_on_3pts_1: (+1)
   \   00000146   0x9908             LDR      R1,[SP, #+32]
   \   00000148   0x6DA0             LDR      R0,[R4, #+88]
   \   0000014A   0x.... 0x....      BL       __aeabi_fmul
   \   0000014E   0x9909             LDR      R1,[SP, #+36]
   \   00000150   0x4607             MOV      R7,R0
   \   00000152   0x6DE0             LDR      R0,[R4, #+92]
   \   00000154   0x.... 0x....      BL       __aeabi_fmul
   \   00000158   0x4639             MOV      R1,R7
   \   0000015A   0x.... 0x....      BL       __aeabi_fadd
   \   0000015E   0x990A             LDR      R1,[SP, #+40]
   \   00000160   0x4607             MOV      R7,R0
   \   00000162   0x6828             LDR      R0,[R5, #+0]
   \   00000164   0x.... 0x....      BL       __aeabi_fmul
   \   00000168   0x4639             MOV      R1,R7
   \   0000016A   0x.... 0x....      BL       __aeabi_fadd
   \   0000016E   0x4680             MOV      R8,R0
    877          
    878                if (g29_verbose_level>2) {
   \   00000170   0x6870             LDR      R0,[R6, #+4]
   \   00000172   0x2803             CMP      R0,#+3
   \   00000174   0xDB10             BLT.N    ??tilt_mesh_based_on_3pts_2
    879                  SERIAL_ECHOPGM("D constant: ");
   \   00000176   0x.... 0x....      ADR.W    R0,`?<Constant "D constant: ">`
   \   0000017A   0x.... 0x....      BL       _Z14serialprintPGMPKc
    880                  SERIAL_PROTOCOL_F(d, 7);
   \   0000017E   0x2007             MOVS     R0,#+7
   \   00000180   0x9000             STR      R0,[SP, #+0]
   \   00000182   0x4640             MOV      R0,R8
   \   00000184   0x.... 0x....      BL       __aeabi_f2d
   \   00000188   0x4602             MOV      R2,R0
   \   0000018A   0x460B             MOV      R3,R1
   \   0000018C   0x....             LDR.N    R0,??DataTable78_1
   \   0000018E   0x.... 0x....      BL       _ZN5Print5printEdi
    881                  SERIAL_ECHOLNPGM(" ");
   \   00000192   0x....             ADR.N    R0,??DataTable78_3  ;; 0x20, 0x0A, 0x00, 0x00
   \   00000194   0x.... 0x....      BL       _Z14serialprintPGMPKc
    882                }
    883          
    884                #if ENABLED(DEBUG_LEVELING_FEATURE)
    885                  if (DEBUGGING(LEVELING)) {
    886                    SERIAL_ECHOPGM("d from 1st point: ");
    887                    SERIAL_ECHO_F(d, 6);
    888                    SERIAL_EOL();
    889                    t = normal.x * (UBL_PROBE_PT_2_X) + normal.y * (UBL_PROBE_PT_2_Y);
    890                    d = t + normal.z * z2;
    891                    SERIAL_ECHOPGM("d from 2nd point: ");
    892                    SERIAL_ECHO_F(d, 6);
    893                    SERIAL_EOL();
    894                    t = normal.x * (UBL_PROBE_PT_3_X) + normal.y * (UBL_PROBE_PT_3_Y);
    895                    d = t + normal.z * z3;
    896                    SERIAL_ECHOPGM("d from 3rd point: ");
    897                    SERIAL_ECHO_F(d, 6);
    898                    SERIAL_EOL();
    899                  }
    900                #endif
    901          
    902                for (uint8_t i = 0; i < GRID_MAX_POINTS_X; i++) {
   \                     ??tilt_mesh_based_on_3pts_2: (+1)
   \   00000198   0x2500             MOVS     R5,#+0
   \   0000019A   0xE02A             B.N      ??tilt_mesh_based_on_3pts_3
    903                  for (uint8_t j = 0; j < GRID_MAX_POINTS_Y; j++) {
    904                    float x_tmp = mesh_index_to_xpos(i),
   \                     ??tilt_mesh_based_on_3pts_4: (+1)
   \   0000019C   0x4628             MOV      R0,R5
   \   0000019E   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   000001A2   0x900D             STR      R0,[SP, #+52]
    905                          y_tmp = mesh_index_to_ypos(j),
   \   000001A4   0x4630             MOV      R0,R6
   \   000001A6   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   000001AA   0x900C             STR      R0,[SP, #+48]
    906                          z_tmp = z_values[i][j];
    907                    #if ENABLED(DEBUG_LEVELING_FEATURE)
    908                      if (DEBUGGING(LEVELING)) {
    909                        SERIAL_ECHOPGM("before rotation = [");
    910                        SERIAL_PROTOCOL_F(x_tmp, 7);
    911                        SERIAL_PROTOCOLCHAR(',');
    912                        SERIAL_PROTOCOL_F(y_tmp, 7);
    913                        SERIAL_PROTOCOLCHAR(',');
    914                        SERIAL_PROTOCOL_F(z_tmp, 7);
    915                        SERIAL_ECHOPGM("]   ---> ");
    916                        safe_delay(20);
    917                      }
    918                    #endif
    919                    apply_rotation_xyz(rotation, x_tmp, y_tmp, z_tmp);
   \   000001AC   0xA91D             ADD      R1,SP,#+116
   \   000001AE   0xF857 0x0026      LDR      R0,[R7, R6, LSL #+2]
   \   000001B2   0x900B             STR      R0,[SP, #+44]
   \   000001B4   0x2224             MOVS     R2,#+36
   \   000001B6   0xA80B             ADD      R0,SP,#+44
   \   000001B8   0x9007             STR      R0,[SP, #+28]
   \   000001BA   0xA80C             ADD      R0,SP,#+48
   \   000001BC   0x9006             STR      R0,[SP, #+24]
   \   000001BE   0xA80D             ADD      R0,SP,#+52
   \   000001C0   0x9005             STR      R0,[SP, #+20]
   \   000001C2   0xB084             SUB      SP,SP,#+16
   \   000001C4   0x4668             MOV      R0,SP
   \   000001C6   0x.... 0x....      BL       __aeabi_memcpy4
   \   000001CA   0xBC0F             POP      {R0-R3}
   \   000001CC   0x.... 0x....      BL       _Z18apply_rotation_xyz10matrix_3x3RfS0_S0_
    920                    #if ENABLED(DEBUG_LEVELING_FEATURE)
    921                      if (DEBUGGING(LEVELING)) {
    922                        SERIAL_ECHOPGM("after rotation = [");
    923                        SERIAL_PROTOCOL_F(x_tmp, 7);
    924                        SERIAL_PROTOCOLCHAR(',');
    925                        SERIAL_PROTOCOL_F(y_tmp, 7);
    926                        SERIAL_PROTOCOLCHAR(',');
    927                        SERIAL_PROTOCOL_F(z_tmp, 7);
    928                        SERIAL_ECHOLNPGM("]");
    929                        safe_delay(55);
    930                      }
    931                    #endif
    932                    z_values[i][j] += z_tmp - d;
   \   000001D0   0x980B             LDR      R0,[SP, #+44]
   \   000001D2   0x4641             MOV      R1,R8
   \   000001D4   0x.... 0x....      BL       __aeabi_fsub
   \   000001D8   0xF857 0x1026      LDR      R1,[R7, R6, LSL #+2]
   \   000001DC   0x.... 0x....      BL       __aeabi_fadd
   \   000001E0   0xF847 0x0026      STR      R0,[R7, R6, LSL #+2]
    933                  }
   \   000001E4   0x1C76             ADDS     R6,R6,#+1
   \   000001E6   0xB2F6             UXTB     R6,R6
   \                     ??tilt_mesh_based_on_3pts_5: (+1)
   \   000001E8   0x7860             LDRB     R0,[R4, #+1]
   \   000001EA   0x4286             CMP      R6,R0
   \   000001EC   0xDBD6             BLT.N    ??tilt_mesh_based_on_3pts_4
   \   000001EE   0x1C6D             ADDS     R5,R5,#+1
   \   000001F0   0xB2ED             UXTB     R5,R5
   \                     ??tilt_mesh_based_on_3pts_3: (+1)
   \   000001F2   0xF899 0x0060      LDRB     R0,[R9, #+96]
   \   000001F6   0x4285             CMP      R5,R0
   \   000001F8   0xDA07             BGE.N    ??tilt_mesh_based_on_3pts_6
   \   000001FA   0xEB05 0x0045      ADD      R0,R5,R5, LSL #+1
   \   000001FE   0x.... 0x....      LDR.W    R1,??DataTable81_3
   \   00000202   0x2600             MOVS     R6,#+0
   \   00000204   0xEB01 0x1700      ADD      R7,R1,R0, LSL #+4
   \   00000208   0xE7EE             B.N      ??tilt_mesh_based_on_3pts_5
    934                }
    935              }
   \                     ??tilt_mesh_based_on_3pts_6: (+1)
   \   0000020A   0xB026             ADD      SP,SP,#+152
   \   0000020C   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    936          
    937            #endif // HAS_BED_PROBE
    938          
    939            #if ENABLED(NEWPANEL)
    940          
    941              void unified_bed_leveling::move_z_with_encoder(const float &multiplier) {
    942                wait_for_release();
    943                while (!is_lcd_clicked()) {
    944                  idle();
    945                  if (encoder_diff) {
    946                    do_blocking_move_to_z(current_position[Z_AXIS] + float(encoder_diff) * multiplier);
    947                    encoder_diff = 0;
    948                  }
    949                }
    950              }
    951          
    952              float unified_bed_leveling::measure_point_with_encoder() {
    953                KEEPALIVE_STATE(PAUSED_FOR_USER);
    954                move_z_with_encoder(0.01);
    955                KEEPALIVE_STATE(IN_HANDLER);
    956                return current_position[Z_AXIS];
    957              }
    958          
    959              static void echo_and_take_a_measurement() { SERIAL_PROTOCOLLNPGM(" and take a measurement."); }
    960          
    961              float unified_bed_leveling::measure_business_card_thickness(const float &in_height) {
    962                lcd_external_control = true;
    963                save_ubl_active_state_and_disable();   // Disable bed level correction for probing
    964                if(MACHINETPYE == IS_KINEMATIC)
    965                {
    966                  do_blocking_move_to(0.5 * (MESH_MAX_X_IS_KINEMATIC - (MESH_MIN_X_IS_KINEMATIC)), 0.5 * (MESH_MAX_Y_IS_KINEMATIC - (MESH_MIN_Y_IS_KINEMATIC)), in_height);
    967                }
    968                else
    969                {
    970                  do_blocking_move_to(0.5 * (MESH_MAX_X_IS_Cartesian- (MESH_MIN_X_IS_Cartesian)), 0.5 * (MESH_MAX_Y_IS_Cartesian - (MESH_MIN_Y_IS_Cartesian)), in_height);
    971                }
    972                  //, min(planner.max_feedrate_mm_s[X_AXIS], planner.max_feedrate_mm_s[Y_AXIS]) / 2.0);
    973                stepper.synchronize();
    974          
    975                SERIAL_PROTOCOLPGM("Place shim under nozzle");
    976                LCD_MESSAGEPGM(MSG_UBL_BC_INSERT);
    977                lcd_return_to_status();
    978                echo_and_take_a_measurement();
    979          
    980                const float z1 = measure_point_with_encoder();
    981                do_blocking_move_to_z(current_position[Z_AXIS] + SIZE_OF_LITTLE_RAISE);
    982                stepper.synchronize();
    983          
    984                SERIAL_PROTOCOLPGM("Remove shim");
    985                LCD_MESSAGEPGM(MSG_UBL_BC_REMOVE);
    986                echo_and_take_a_measurement();
    987          
    988                const float z2 = measure_point_with_encoder();
    989          
    990                do_blocking_move_to_z(current_position[Z_AXIS] + Z_CLEARANCE_BETWEEN_PROBES);
    991          
    992                const float thickness = abs(z1 - z2);
    993          
    994                if (g29_verbose_level > 1) {
    995                  SERIAL_PROTOCOLPGM("Business Card is ");
    996                  SERIAL_PROTOCOL_F(thickness, 4);
    997                  SERIAL_PROTOCOLLNPGM("mm thick.");
    998                }
    999          
   1000                lcd_external_control = false;
   1001          
   1002                restore_ubl_active_state_and_leave();
   1003          
   1004                return thickness;
   1005              }
   1006          
   1007              void abort_manual_probe_remaining_mesh() {
   1008                SERIAL_PROTOCOLLNPGM("\nMesh only partially populated.");
   1009                do_blocking_move_to_z(Z_CLEARANCE_DEPLOY_PROBE);
   1010                lcd_external_control = false;
   1011                KEEPALIVE_STATE(IN_HANDLER);
   1012                ubl.restore_ubl_active_state_and_leave();
   1013              }
   1014          
   1015              void unified_bed_leveling::manually_probe_remaining_mesh(const float &rx, const float &ry, const float &z_clearance, const float &thick, const bool do_ubl_mesh_map) {
   1016          
   1017                lcd_external_control = true;
   1018          
   1019                save_ubl_active_state_and_disable();   // we don't do bed level correction because we want the raw data when we probe
   1020                do_blocking_move_to(rx, ry, Z_CLEARANCE_BETWEEN_PROBES);
   1021          
   1022                lcd_return_to_status();
   1023          
   1024                mesh_index_pair location;
   1025                do {
   1026                  location = find_closest_mesh_point_of_type(INVALID, rx, ry, USE_NOZZLE_AS_REFERENCE, NULL);
   1027                  // It doesn't matter if the probe can't reach the NAN location. This is a manual probe.
   1028                  if (location.x_index < 0 && location.y_index < 0) continue;
   1029          
   1030                  const float xProbe = mesh_index_to_xpos(location.x_index),
   1031                              yProbe = mesh_index_to_ypos(location.y_index);
   1032          
   1033                  if (!position_is_reachable(xProbe, yProbe)) break; // SHOULD NOT OCCUR (find_closest_mesh_point only returns reachable points)
   1034          
   1035                  LCD_MESSAGEPGM(MSG_UBL_MOVING_TO_NEXT);
   1036          
   1037                  do_blocking_move_to(xProbe, yProbe, Z_CLEARANCE_BETWEEN_PROBES);
   1038                  do_blocking_move_to_z(z_clearance);
   1039          
   1040                  KEEPALIVE_STATE(PAUSED_FOR_USER);
   1041                  lcd_external_control = true;
   1042          
   1043                  if (do_ubl_mesh_map) display_map(g29_map_type);  // show user where we're probing
   1044          
   1045                  serialprintPGM(parser.seen('B') ? PSTR(MSG_UBL_BC_INSERT) : PSTR(MSG_UBL_BC_INSERT2));
   1046          
   1047                  const float z_step = 0.01;                                        // existing behavior: 0.01mm per click, occasionally step
   1048                  //const float z_step = 1.0 / planner.axis_steps_per_mm[Z_AXIS];   // approx one step each click
   1049          
   1050                  move_z_with_encoder(z_step);
   1051          
   1052                  if (click_and_hold()) {
   1053                    SERIAL_PROTOCOLLNPGM("\nMesh only partially populated.");
   1054                    do_blocking_move_to_z(Z_CLEARANCE_DEPLOY_PROBE);
   1055                    lcd_external_control = false;
   1056                    KEEPALIVE_STATE(IN_HANDLER);
   1057                    restore_ubl_active_state_and_leave();
   1058                    return;
   1059                  }
   1060          
   1061                  z_values[location.x_index][location.y_index] = current_position[Z_AXIS] - thick;
   1062                  if (g29_verbose_level > 2) {
   1063                    SERIAL_PROTOCOLPGM("Mesh Point Measured at: ");
   1064                    SERIAL_PROTOCOL_F(z_values[location.x_index][location.y_index], 6);
   1065                    SERIAL_EOL();
   1066                  }
   1067                } while (location.x_index >= 0 && location.y_index >= 0);
   1068          
   1069                if (do_ubl_mesh_map) display_map(g29_map_type);
   1070          
   1071                restore_ubl_active_state_and_leave();
   1072                KEEPALIVE_STATE(IN_HANDLER);
   1073                do_blocking_move_to(rx, ry, Z_CLEARANCE_DEPLOY_PROBE);
   1074              }
   1075            #endif // NEWPANEL
   1076          

   \                                 In section .text, align 2, keep-with-next
   1077            bool unified_bed_leveling::g29_parameter_parsing() {
   \                     _ZN20unified_bed_leveling21g29_parameter_parsingEv: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   1078              bool err_flag = false;
   1079          
   1080              #if ENABLED(NEWPANEL)
   1081                LCD_MESSAGEPGM(MSG_UBL_DOING_G29);
   1082                lcd_quick_feedback();
   1083              #endif
   1084          
   1085              g29_constant = 0.0;
   1086              g29_repetition_cnt = 0;
   1087          
   1088              g29_x_flag = parser.seenval('X');
   \   00000004   0x.... 0x....      LDR.W    R8,??DataTable82_2
   \   00000008   0x.... 0x....      LDR.W    R5,??DataTable81_2
   \   0000000C   0xF898 0x0002      LDRB     R0,[R8, #+2]
   \   00000010   0x.... 0x....      LDR.W    R6,??DataTable82_3
   \   00000014   0x.... 0x....      LDR.W    R7,??DataTable82_4
   \   00000018   0x2400             MOVS     R4,#+0
   \   0000001A   0x622C             STR      R4,[R5, #+32]
   \   0000001C   0x60EC             STR      R4,[R5, #+12]
   \   0000001E   0x0600             LSLS     R0,R0,#+24
   \   00000020   0xD502             BPL.N    ??g29_parameter_parsing_0
   \   00000022   0x7DF9             LDRB     R1,[R7, #+23]
   \   00000024   0xB939             CBNZ.N   R1,??g29_parameter_parsing_1
   \   00000026   0x6034             STR      R4,[R6, #+0]
   \                     ??g29_parameter_parsing_0: (+1)
   \   00000028   0x2000             MOVS     R0,#+0
   \                     ??g29_parameter_parsing_2: (+1)
   \   0000002A   0x7068             STRB     R0,[R5, #+1]
   1089              g29_x_pos = g29_x_flag ? parser.value_float() : current_position[X_AXIS];
   \   0000002C   0x7868             LDRB     R0,[R5, #+1]
   \   0000002E   0xB150             CBZ.N    R0,??g29_parameter_parsing_3
   \   00000030   0x.... 0x....      BL       _ZN11GCodeParser11value_floatEv
   \   00000034   0xE00A             B.N      ??g29_parameter_parsing_4
   \                     ??g29_parameter_parsing_1: (+1)
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable82_5
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x1808             ADDS     R0,R1,R0
   \   0000003E   0x6030             STR      R0,[R6, #+0]
   \   00000040   0xD0F2             BEQ.N    ??g29_parameter_parsing_0
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xE7F1             B.N      ??g29_parameter_parsing_2
   \                     ??g29_parameter_parsing_3: (+1)
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable82_6
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \                     ??g29_parameter_parsing_4: (+1)
   \   0000004C   0x61A8             STR      R0,[R5, #+24]
   1090              g29_y_flag = parser.seenval('Y');
   \   0000004E   0xF898 0x0003      LDRB     R0,[R8, #+3]
   \   00000052   0x07C0             LSLS     R0,R0,#+31
   \   00000054   0xD502             BPL.N    ??g29_parameter_parsing_5
   \   00000056   0x7E39             LDRB     R1,[R7, #+24]
   \   00000058   0xB939             CBNZ.N   R1,??g29_parameter_parsing_6
   \   0000005A   0x6034             STR      R4,[R6, #+0]
   \                     ??g29_parameter_parsing_5: (+1)
   \   0000005C   0x2000             MOVS     R0,#+0
   \                     ??g29_parameter_parsing_7: (+1)
   \   0000005E   0x70A8             STRB     R0,[R5, #+2]
   1091              g29_y_pos = g29_y_flag ? parser.value_float() : current_position[Y_AXIS];
   \   00000060   0x78A8             LDRB     R0,[R5, #+2]
   \   00000062   0xB150             CBZ.N    R0,??g29_parameter_parsing_8
   \   00000064   0x.... 0x....      BL       _ZN11GCodeParser11value_floatEv
   \   00000068   0xE00A             B.N      ??g29_parameter_parsing_9
   \                     ??g29_parameter_parsing_6: (+1)
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable82_5
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x1808             ADDS     R0,R1,R0
   \   00000072   0x6030             STR      R0,[R6, #+0]
   \   00000074   0xD0F2             BEQ.N    ??g29_parameter_parsing_5
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0xE7F1             B.N      ??g29_parameter_parsing_7
   \                     ??g29_parameter_parsing_8: (+1)
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable82_6
   \   0000007E   0x6840             LDR      R0,[R0, #+4]
   1092          
   1093              if (parser.seen('R')) {
   \                     ??g29_parameter_parsing_9: (+1)
   \   00000080   0x.... 0x....      LDR.W    R11,??DataTable81_1
   \   00000084   0x61E8             STR      R0,[R5, #+28]
   \   00000086   0xF898 0x0002      LDRB     R0,[R8, #+2]
   \   0000008A   0x0780             LSLS     R0,R0,#+30
   \   0000008C   0xD522             BPL.N    ??g29_parameter_parsing_10
   \   0000008E   0x7C79             LDRB     R1,[R7, #+17]
   \   00000090   0xF20B 0x0942      ADDW     R9,R11,#+66
   \   00000094   0xB909             CBNZ.N   R1,??g29_parameter_parsing_11
   \   00000096   0x6034             STR      R4,[R6, #+0]
   \   00000098   0xE005             B.N      ??g29_parameter_parsing_12
   \                     ??g29_parameter_parsing_11: (+1)
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable82_5
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0x1808             ADDS     R0,R1,R0
   \   000000A2   0x6030             STR      R0,[R6, #+0]
   1094                g29_repetition_cnt = parser.has_value() ? parser.value_int() : GRID_MAX_POINTS;
   \   000000A4   0xD105             BNE.N    ??g29_parameter_parsing_13
   \                     ??g29_parameter_parsing_12: (+1)
   \   000000A6   0xF899 0x001E      LDRB     R0,[R9, #+30]
   \   000000AA   0xF899 0x101F      LDRB     R1,[R9, #+31]
   \   000000AE   0x4348             MULS     R0,R1,R0
   \   000000B0   0xE001             B.N      ??g29_parameter_parsing_14
   \                     ??g29_parameter_parsing_13: (+1)
   \   000000B2   0x.... 0x....      BL       _ZN11GCodeParser9value_intEv
   1095                NOMORE(g29_repetition_cnt, GRID_MAX_POINTS);
   \                     ??g29_parameter_parsing_14: (+1)
   \   000000B6   0xF899 0x101E      LDRB     R1,[R9, #+30]
   \   000000BA   0xF899 0x201F      LDRB     R2,[R9, #+31]
   \   000000BE   0x4351             MULS     R1,R2,R1
   \   000000C0   0x4281             CMP      R1,R0
   \   000000C2   0xBFB8             IT       LT 
   \   000000C4   0x4608             MOVLT    R0,R1
   \   000000C6   0x60E8             STR      R0,[R5, #+12]
   1096                if (g29_repetition_cnt < 1) {
   \   000000C8   0x2801             CMP      R0,#+1
   \   000000CA   0xBFB8             IT       LT 
   1097                  SERIAL_PROTOCOLLNPGM("?(R)epetition count invalid (1+).\n");
   \   000000CC   0x.... 0x....      ADRLT.W  R0,`?<Constant "?(R)epetition count i...">`
   \   000000D0   0xF2C0 0x8145      BLT.W    ??g29_parameter_parsing_15
   1098                  return UBL_ERR;
   1099                }
   1100              }
   1101          
   1102              g29_verbose_level = parser.seen('V') ? parser.value_int() : 0;
   \                     ??g29_parameter_parsing_10: (+1)
   \   000000D4   0xF898 0x0002      LDRB     R0,[R8, #+2]
   \   000000D8   0x0680             LSLS     R0,R0,#+26
   \   000000DA   0xD511             BPL.N    ??g29_parameter_parsing_16
   \   000000DC   0x7D79             LDRB     R1,[R7, #+21]
   \   000000DE   0xB919             CBNZ.N   R1,??g29_parameter_parsing_17
   \   000000E0   0x6034             STR      R4,[R6, #+0]
   \                     ??g29_parameter_parsing_18: (+1)
   \   000000E2   0x2000             MOVS     R0,#+0
   \                     ??g29_parameter_parsing_19: (+1)
   \   000000E4   0xB200             SXTH     R0,R0
   \   000000E6   0xE00C             B.N      ??g29_parameter_parsing_20
   \                     ??g29_parameter_parsing_17: (+1)
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable82_5
   \   000000EC   0x6800             LDR      R0,[R0, #+0]
   \   000000EE   0x1808             ADDS     R0,R1,R0
   \   000000F0   0x6030             STR      R0,[R6, #+0]
   \   000000F2   0xD0F6             BEQ.N    ??g29_parameter_parsing_18
   \   000000F4   0x2300             MOVS     R3,#+0
   \   000000F6   0x220A             MOVS     R2,#+10
   \   000000F8   0x4619             MOV      R1,R3
   \   000000FA   0x.... 0x....      BL       __iar_Stolx
   \   000000FE   0xE7F1             B.N      ??g29_parameter_parsing_19
   \                     ??g29_parameter_parsing_16: (+1)
   \   00000100   0x2000             MOVS     R0,#+0
   \                     ??g29_parameter_parsing_20: (+1)
   \   00000102   0x6068             STR      R0,[R5, #+4]
   1103              if (!WITHIN(g29_verbose_level, 0, 4)) {
   \   00000104   0x2805             CMP      R0,#+5
   \   00000106   0xD304             BCC.N    ??g29_parameter_parsing_21
   1104                SERIAL_PROTOCOLLNPGM("?(V)erbose level is implausible (0-4).\n");
   \   00000108   0x.... 0x....      ADR.W    R0,`?<Constant "?(V)erbose level is i...">`
   \   0000010C   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1105                err_flag = true;
   \   00000110   0x2401             MOVS     R4,#+1
   1106              }
   1107          
   1108              if (parser.seen('P')) {
   \                     ??g29_parameter_parsing_21: (+1)
   \   00000112   0xF898 0x0001      LDRB     R0,[R8, #+1]
   \   00000116   0x0600             LSLS     R0,R0,#+24
   \   00000118   0xD50D             BPL.N    ??g29_parameter_parsing_22
   \   0000011A   0x7BF9             LDRB     R1,[R7, #+15]
   \   0000011C   0xB9A1             CBNZ.N   R1,??g29_parameter_parsing_23
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0x6030             STR      R0,[R6, #+0]
   \                     ??g29_parameter_parsing_24: (+1)
   \   00000122   0x2000             MOVS     R0,#+0
   1109                const int pv = parser.value_int();
   1110                #if !HAS_BED_PROBE
   1111                  if (pv == 1) {
   1112                    SERIAL_PROTOCOLLNPGM("G29 P1 requires a probe.\n");
   1113                    err_flag = true;
   1114                  }
   1115                  else
   1116                #endif
   1117                  {
   1118                    g29_phase_value = pv;
   \                     ??g29_parameter_parsing_25: (+1)
   \   00000124   0xB200             SXTH     R0,R0
   \   00000126   0x60A8             STR      R0,[R5, #+8]
   1119                    if (!WITHIN(g29_phase_value, 0, 6)) {
   \   00000128   0x2807             CMP      R0,#+7
   \   0000012A   0xD304             BCC.N    ??g29_parameter_parsing_22
   1120                      SERIAL_PROTOCOLLNPGM("?(P)hase value invalid (0-6).\n");
   \   0000012C   0x.... 0x....      ADR.W    R0,`?<Constant "?(P)hase value invali...">`
   \   00000130   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1121                      err_flag = true;
   \   00000134   0x2401             MOVS     R4,#+1
   1122                    }
   1123                  }
   1124              }
   1125          
   1126              if (parser.seen('J')) {
   \                     ??g29_parameter_parsing_22: (+1)
   \   00000136   0xF898 0x0001      LDRB     R0,[R8, #+1]
   \   0000013A   0x0780             LSLS     R0,R0,#+30
   \   0000013C   0xD528             BPL.N    ??g29_parameter_parsing_26
   \   0000013E   0x7A79             LDRB     R1,[R7, #+9]
   \   00000140   0xB971             CBNZ.N   R1,??g29_parameter_parsing_27
   \   00000142   0x2000             MOVS     R0,#+0
   \   00000144   0x6030             STR      R0,[R6, #+0]
   \   00000146   0xE011             B.N      ??g29_parameter_parsing_28
   \                     ??g29_parameter_parsing_23: (+1)
   \   00000148   0x.... 0x....      LDR.W    R0,??DataTable82_5
   \   0000014C   0x6800             LDR      R0,[R0, #+0]
   \   0000014E   0x1808             ADDS     R0,R1,R0
   \   00000150   0x6030             STR      R0,[R6, #+0]
   \   00000152   0xD0E6             BEQ.N    ??g29_parameter_parsing_24
   \   00000154   0x2300             MOVS     R3,#+0
   \   00000156   0x220A             MOVS     R2,#+10
   \   00000158   0x2100             MOVS     R1,#+0
   \   0000015A   0x.... 0x....      BL       __iar_Stolx
   \   0000015E   0xE7E1             B.N      ??g29_parameter_parsing_25
   \                     ??g29_parameter_parsing_27: (+1)
   \   00000160   0x.... 0x....      LDR.W    R0,??DataTable82_5
   \   00000164   0x6800             LDR      R0,[R0, #+0]
   \   00000166   0x1808             ADDS     R0,R1,R0
   \   00000168   0x6030             STR      R0,[R6, #+0]
   1127                #if HAS_BED_PROBE
   1128                  g29_grid_size = parser.has_value() ? parser.value_int() : 0;
   \   0000016A   0xD101             BNE.N    ??g29_parameter_parsing_29
   \                     ??g29_parameter_parsing_28: (+1)
   \   0000016C   0x2000             MOVS     R0,#+0
   \   0000016E   0xE005             B.N      ??g29_parameter_parsing_30
   \                     ??g29_parameter_parsing_29: (+1)
   \   00000170   0x2300             MOVS     R3,#+0
   \   00000172   0x220A             MOVS     R2,#+10
   \   00000174   0x2100             MOVS     R1,#+0
   \   00000176   0x.... 0x....      BL       __iar_Stolx
   \   0000017A   0xB200             SXTH     R0,R0
   \                     ??g29_parameter_parsing_30: (+1)
   \   0000017C   0x6268             STR      R0,[R5, #+36]
   1129                  if (g29_grid_size && !WITHIN(g29_grid_size, 2, 9)) {
   \   0000017E   0xB138             CBZ.N    R0,??g29_parameter_parsing_26
   \   00000180   0x1E80             SUBS     R0,R0,#+2
   \   00000182   0x2808             CMP      R0,#+8
   \   00000184   0xD304             BCC.N    ??g29_parameter_parsing_26
   1130                    SERIAL_PROTOCOLLNPGM("?Invalid grid size (J) specified (2-9).\n");
   \   00000186   0x.... 0x....      ADR.W    R0,`?<Constant "?Invalid grid size (J...">`
   \   0000018A   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1131                    err_flag = true;
   \   0000018E   0x2401             MOVS     R4,#+1
   1132                  }
   1133                #else
   1134                  SERIAL_PROTOCOLLNPGM("G29 J action requires a probe.\n");
   1135                  err_flag = true;
   1136                #endif
   1137              }
   1138          
   1139              if (g29_x_flag != g29_y_flag) {
   \                     ??g29_parameter_parsing_26: (+1)
   \   00000190   0x7868             LDRB     R0,[R5, #+1]
   \   00000192   0x78A9             LDRB     R1,[R5, #+2]
   \   00000194   0x4288             CMP      R0,R1
   \   00000196   0xD004             BEQ.N    ??g29_parameter_parsing_31
   1140                SERIAL_PROTOCOLLNPGM("Both X & Y locations must be specified.\n");
   \   00000198   0x.... 0x....      ADR.W    R0,`?<Constant "Both X & Y locations ...">`
   \   0000019C   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1141                err_flag = true;
   \   000001A0   0x2401             MOVS     R4,#+1
   1142              }
   1143          
   1144              // If X or Y are not valid, use center of the bed values
   1145              if(MACHINETPYE & IS_KINEMATIC)
   \                     ??g29_parameter_parsing_31: (+1)
   \   000001A2   0xF20B 0x0942      ADDW     R9,R11,#+66
   \   000001A6   0xF240 0x3102      MOVW     R1,#+770
   \   000001AA   0xF8B9 0x0016      LDRH     R0,[R9, #+22]
   \   000001AE   0xF8DB 0xA014      LDR      R10,[R11, #+20]
   \   000001B2   0x4208             TST      R0,R1
   \   000001B4   0xD02E             BEQ.N    ??g29_parameter_parsing_32
   \   000001B6   0xF04F 0x403F      MOV      R0,#-1090519040
   \   000001BA   0x4651             MOV      R1,R10
   \   000001BC   0x.... 0x....      BL       __aeabi_fmul
   \   000001C0   0x4601             MOV      R1,R0
   \   000001C2   0x69A8             LDR      R0,[R5, #+24]
   \   000001C4   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000001C8   0xD808             BHI.N    ??g29_parameter_parsing_33
   \   000001CA   0xF04F 0x507C      MOV      R0,#+1056964608
   \   000001CE   0x4651             MOV      R1,R10
   \   000001D0   0x.... 0x....      BL       __aeabi_fmul
   \   000001D4   0x69A9             LDR      R1,[R5, #+24]
   \   000001D6   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000001DA   0xD901             BLS.N    ??g29_parameter_parsing_34
   1146              {
   1147                  if (!WITHIN(g29_x_pos, X_MIN_BED_IS_KINEMATIC, X_MAX_BED_IS_KINEMATIC)) g29_x_pos = X_CENTER_IS_KINEMATIC;
   \                     ??g29_parameter_parsing_33: (+1)
   \   000001DC   0x2000             MOVS     R0,#+0
   \   000001DE   0x61A8             STR      R0,[R5, #+24]
   1148                  if (!WITHIN(g29_y_pos, Y_MIN_BED_IS_KINEMATIC, Y_MAX_BED_IS_KINEMATIC)) g29_y_pos = Y_CENTER_IS_KINEMATIC;
   \                     ??g29_parameter_parsing_34: (+1)
   \   000001E0   0xF10B 0x0014      ADD      R0,R11,#+20
   \   000001E4   0xF8D0 0xA004      LDR      R10,[R0, #+4]
   \   000001E8   0xF04F 0x403F      MOV      R0,#-1090519040
   \   000001EC   0x4651             MOV      R1,R10
   \   000001EE   0x.... 0x....      BL       __aeabi_fmul
   \   000001F2   0x4601             MOV      R1,R0
   \   000001F4   0x69E8             LDR      R0,[R5, #+28]
   \   000001F6   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000001FA   0xD808             BHI.N    ??g29_parameter_parsing_35
   \   000001FC   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000200   0x4651             MOV      R1,R10
   \   00000202   0x.... 0x....      BL       __aeabi_fmul
   \   00000206   0x69E9             LDR      R1,[R5, #+28]
   \   00000208   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000020C   0xD936             BLS.N    ??g29_parameter_parsing_36
   \                     ??g29_parameter_parsing_35: (+1)
   \   0000020E   0x2000             MOVS     R0,#+0
   \   00000210   0x61E8             STR      R0,[R5, #+28]
   \   00000212   0xE033             B.N      ??g29_parameter_parsing_36
   1149              }
   1150              else
   1151              {
   1152                  if (!WITHIN(g29_x_pos, X_MIN_BED_IS_CARTESIAN, X_MAX_BED_IS_CARTESIAN)) g29_x_pos = X_CENTER_IS_CARTESIAN;
   \                     ??g29_parameter_parsing_32: (+1)
   \   00000214   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000218   0x4651             MOV      R1,R10
   \   0000021A   0x.... 0x....      BL       __aeabi_fmul
   \   0000021E   0x4682             MOV      R10,R0
   \   00000220   0x4651             MOV      R1,R10
   \   00000222   0x.... 0x....      BL       __aeabi_fsub
   \   00000226   0x4601             MOV      R1,R0
   \   00000228   0x69A8             LDR      R0,[R5, #+24]
   \   0000022A   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000022E   0xD808             BHI.N    ??g29_parameter_parsing_37
   \   00000230   0xF04F 0x4080      MOV      R0,#+1073741824
   \   00000234   0x4651             MOV      R1,R10
   \   00000236   0x.... 0x....      BL       __aeabi_fmul
   \   0000023A   0x69A9             LDR      R1,[R5, #+24]
   \   0000023C   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000240   0xD901             BLS.N    ??g29_parameter_parsing_38
   \                     ??g29_parameter_parsing_37: (+1)
   \   00000242   0xF8C5 0xA018      STR      R10,[R5, #+24]
   1153                  if (!WITHIN(g29_y_pos, Y_MIN_BED_IS_CARTESIAN, Y_MAX_BED_IS_CARTESIAN)) g29_y_pos = Y_CENTER_IS_CARTESIAN;        
   \                     ??g29_parameter_parsing_38: (+1)
   \   00000246   0xF10B 0x0014      ADD      R0,R11,#+20
   \   0000024A   0x6841             LDR      R1,[R0, #+4]
   \   0000024C   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000250   0x.... 0x....      BL       __aeabi_fmul
   \   00000254   0x4682             MOV      R10,R0
   \   00000256   0x4651             MOV      R1,R10
   \   00000258   0x.... 0x....      BL       __aeabi_fsub
   \   0000025C   0x4601             MOV      R1,R0
   \   0000025E   0x69E8             LDR      R0,[R5, #+28]
   \   00000260   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000264   0xD808             BHI.N    ??g29_parameter_parsing_39
   \   00000266   0xF04F 0x4080      MOV      R0,#+1073741824
   \   0000026A   0x4651             MOV      R1,R10
   \   0000026C   0x.... 0x....      BL       __aeabi_fmul
   \   00000270   0x69E9             LDR      R1,[R5, #+28]
   \   00000272   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000276   0xD901             BLS.N    ??g29_parameter_parsing_36
   \                     ??g29_parameter_parsing_39: (+1)
   \   00000278   0xF8C5 0xA01C      STR      R10,[R5, #+28]
   1154              }
   1155          
   1156              if (err_flag) return UBL_ERR;
   \                     ??g29_parameter_parsing_36: (+1)
   \   0000027C   0x2C00             CMP      R4,#+0
   \   0000027E   0xD170             BNE.N    ??g29_parameter_parsing_40
   1157          
   1158              /**
   1159               * Activate or deactivate UBL
   1160               * Note: UBL's G29 restores the state set here when done.
   1161               *       Leveling is being enabled here with old data, possibly
   1162               *       none. Error handling should disable for safety...
   1163               */
   1164              if (parser.seen('A')) {
   \   00000280   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   00000284   0x07C1             LSLS     R1,R0,#+31
   \   00000286   0xD514             BPL.N    ??g29_parameter_parsing_41
   \   00000288   0x7839             LDRB     R1,[R7, #+0]
   \   0000028A   0xB119             CBZ.N    R1,??g29_parameter_parsing_42
   \   0000028C   0x.... 0x....      LDR.W    R2,??DataTable82_5
   \   00000290   0x6812             LDR      R2,[R2, #+0]
   \   00000292   0x1889             ADDS     R1,R1,R2
   \                     ??g29_parameter_parsing_42: (+1)
   \   00000294   0x6031             STR      R1,[R6, #+0]
   1165                if (parser.seen('D')) {
   \   00000296   0x0700             LSLS     R0,R0,#+28
   \   00000298   0xD509             BPL.N    ??g29_parameter_parsing_43
   \   0000029A   0x78F8             LDRB     R0,[R7, #+3]
   \   0000029C   0xB118             CBZ.N    R0,??g29_parameter_parsing_44
   \   0000029E   0x.... 0x....      LDR.W    R1,??DataTable82_5
   \   000002A2   0x6809             LDR      R1,[R1, #+0]
   \   000002A4   0x1840             ADDS     R0,R0,R1
   \                     ??g29_parameter_parsing_44: (+1)
   \   000002A6   0x6030             STR      R0,[R6, #+0]
   1166                  SERIAL_PROTOCOLLNPGM("?Can't activate and deactivate at the same time.\n");
   \   000002A8   0x.... 0x....      ADR.W    R0,`?<Constant "?Can\\'t activate and d...">`
   \   000002AC   0xE057             B.N      ??g29_parameter_parsing_15
   1167                  return UBL_ERR;
   1168                }
   1169                set_bed_leveling_enabled(true);
   \                     ??g29_parameter_parsing_43: (+1)
   \   000002AE   0x2001             MOVS     R0,#+1
   \   000002B0   0xE009             B.N      ??g29_parameter_parsing_45
   1170                report_state();
   1171              }
   1172              else if (parser.seen('D')) {
   \                     ??g29_parameter_parsing_41: (+1)
   \   000002B2   0x0700             LSLS     R0,R0,#+28
   \   000002B4   0xD50B             BPL.N    ??g29_parameter_parsing_46
   \   000002B6   0x78F8             LDRB     R0,[R7, #+3]
   \   000002B8   0xB118             CBZ.N    R0,??g29_parameter_parsing_47
   \   000002BA   0x.... 0x....      LDR.W    R1,??DataTable82_5
   \   000002BE   0x6809             LDR      R1,[R1, #+0]
   \   000002C0   0x1840             ADDS     R0,R0,R1
   \                     ??g29_parameter_parsing_47: (+1)
   \   000002C2   0x6030             STR      R0,[R6, #+0]
   1173                set_bed_leveling_enabled(false);
   \   000002C4   0x2000             MOVS     R0,#+0
   \                     ??g29_parameter_parsing_45: (+1)
   \   000002C6   0x.... 0x....      BL       _Z24set_bed_leveling_enabledb
   1174                report_state();
   \   000002CA   0x.... 0x....      BL       _ZN20unified_bed_leveling12report_stateEv
   1175              }
   1176          
   1177              // Set global 'C' flag and its value
   1178              if ((g29_c_flag = parser.seen('C')))
   \                     ??g29_parameter_parsing_46: (+1)
   \   000002CE   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   000002D2   0x0880             LSRS     R0,R0,#+2
   \   000002D4   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000002D8   0xD006             BEQ.N    ??g29_parameter_parsing_48
   \   000002DA   0x78B9             LDRB     R1,[R7, #+2]
   \   000002DC   0xB119             CBZ.N    R1,??g29_parameter_parsing_49
   \   000002DE   0x.... 0x....      LDR.W    R2,??DataTable82_5
   \   000002E2   0x6812             LDR      R2,[R2, #+0]
   \   000002E4   0x1889             ADDS     R1,R1,R2
   \                     ??g29_parameter_parsing_49: (+1)
   \   000002E6   0x6031             STR      R1,[R6, #+0]
   \                     ??g29_parameter_parsing_48: (+1)
   \   000002E8   0x7028             STRB     R0,[R5, #+0]
   \   000002EA   0xB110             CBZ.N    R0,??g29_parameter_parsing_50
   1179                g29_constant = parser.value_float();
   \   000002EC   0x.... 0x....      BL       _ZN11GCodeParser11value_floatEv
   \   000002F0   0x6228             STR      R0,[R5, #+32]
   1180          
   1181              #if ENABLED(ENABLE_LEVELING_FADE_HEIGHT)
   1182          	if((MACHINETPYE != DELTA) && (BED_LEVELING_METHOD&HAS_FADE))	//mks_delta
   \                     ??g29_parameter_parsing_50: (+1)
   \   000002F2   0xF9B9 0x0016      LDRSH    R0,[R9, #+22]
   \   000002F6   0x2802             CMP      R0,#+2
   \   000002F8   0xD023             BEQ.N    ??g29_parameter_parsing_51
   \   000002FA   0xF89B 0x0042      LDRB     R0,[R11, #+66]
   \   000002FE   0x06C0             LSLS     R0,R0,#+27
   \   00000300   0xD51F             BPL.N    ??g29_parameter_parsing_51
   1183          	{
   1184                if (parser.seenval('F')) {
   \   00000302   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   00000306   0x0680             LSLS     R0,R0,#+26
   \   00000308   0xD51B             BPL.N    ??g29_parameter_parsing_51
   \   0000030A   0x7979             LDRB     R1,[R7, #+5]
   \   0000030C   0xB911             CBNZ.N   R1,??g29_parameter_parsing_52
   \   0000030E   0x2000             MOVS     R0,#+0
   \   00000310   0x6030             STR      R0,[R6, #+0]
   \   00000312   0xE016             B.N      ??g29_parameter_parsing_51
   \                     ??g29_parameter_parsing_52: (+1)
   \   00000314   0x.... 0x....      LDR.W    R0,??DataTable82_5
   \   00000318   0x6800             LDR      R0,[R0, #+0]
   \   0000031A   0x1808             ADDS     R0,R1,R0
   \   0000031C   0x6030             STR      R0,[R6, #+0]
   \   0000031E   0xD010             BEQ.N    ??g29_parameter_parsing_51
   1185                  const float fh = parser.value_float();
   \   00000320   0x.... 0x....      BL       _ZN11GCodeParser11value_floatEv
   1186                  if (!WITHIN(fh, 0.0, 100.0)) {
   \   00000324   0x2100             MOVS     R1,#+0
   \   00000326   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000032A   0xD804             BHI.N    ??g29_parameter_parsing_53
   \   0000032C   0x.... 0x....      LDR.W    R1,??DataTable83  ;; 0x42c80001
   \   00000330   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000334   0xD302             BCC.N    ??g29_parameter_parsing_54
   1187                    SERIAL_PROTOCOLLNPGM("?(F)ade height for Bed Level Correction not plausible.\n");
   \                     ??g29_parameter_parsing_53: (+1)
   \   00000336   0x.... 0x....      ADR.W    R0,`?<Constant "?(F)ade height for Be...">`
   \   0000033A   0xE010             B.N      ??g29_parameter_parsing_15
   1188                    return UBL_ERR;
   1189                  }
   1190                  set_z_fade_height(fh);
   \                     ??g29_parameter_parsing_54: (+1)
   \   0000033C   0x2101             MOVS     R1,#+1
   \   0000033E   0x.... 0x....      BL       _Z17set_z_fade_heightfb
   1191                }
   1192          	}
   1193              #endif
   1194          
   1195              g29_map_type = parser.intval('T');
   \                     ??g29_parameter_parsing_51: (+1)
   \   00000342   0xF898 0x0002      LDRB     R0,[R8, #+2]
   \   00000346   0x0700             LSLS     R0,R0,#+28
   \   00000348   0xD503             BPL.N    ??g29_parameter_parsing_55
   \   0000034A   0x7CF9             LDRB     R1,[R7, #+19]
   \   0000034C   0xB961             CBNZ.N   R1,??g29_parameter_parsing_56
   \   0000034E   0x2000             MOVS     R0,#+0
   \   00000350   0x6030             STR      R0,[R6, #+0]
   \                     ??g29_parameter_parsing_55: (+1)
   \   00000352   0x2000             MOVS     R0,#+0
   \                     ??g29_parameter_parsing_57: (+1)
   \   00000354   0x6168             STR      R0,[R5, #+20]
   1196              if (!WITHIN(g29_map_type, 0, 2)) {
   \   00000356   0x2803             CMP      R0,#+3
   \   00000358   0xD30F             BCC.N    ??g29_parameter_parsing_58
   1197                SERIAL_PROTOCOLLNPGM("Invalid map type.\n");
   \   0000035A   0x.... 0x....      ADR.W    R0,`?<Constant "Invalid map type.\\n\\n">`
   \                     ??g29_parameter_parsing_15: (+1)
   \   0000035E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1198                return UBL_ERR;
   \                     ??g29_parameter_parsing_40: (+1)
   \   00000362   0x2001             MOVS     R0,#+1
   \   00000364   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}
   \                     ??g29_parameter_parsing_56: (+1)
   \   00000368   0x.... 0x....      LDR.W    R0,??DataTable82_5
   \   0000036C   0x6800             LDR      R0,[R0, #+0]
   \   0000036E   0x1808             ADDS     R0,R1,R0
   \   00000370   0x6030             STR      R0,[R6, #+0]
   \   00000372   0xD0EE             BEQ.N    ??g29_parameter_parsing_55
   \   00000374   0x.... 0x....      BL       _ZN11GCodeParser9value_intEv
   \   00000378   0xE7EC             B.N      ??g29_parameter_parsing_57
   1199              }
   1200              return UBL_OK;
   \                     ??g29_parameter_parsing_58: (+1)
   \   0000037A   0x2000             MOVS     R0,#+0
   \   0000037C   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   1201            }

   \                                 In section .bss, align 4
   \                     _ZN20unified_bed_leveling10g29_c_flagE:
   \   00000000                      DS8 1
   \                     _ZN20unified_bed_leveling10g29_x_flagE:
   \   00000001                      DS8 1
   \                     _ZN20unified_bed_leveling10g29_y_flagE:
   \   00000002                      DS8 1
   \   00000003                      DS8 1
   \                     _ZN20unified_bed_leveling17g29_verbose_levelE:
   \   00000004                      DS8 4
   \                     _ZN20unified_bed_leveling15g29_phase_valueE:
   \   00000008                      DS8 4
   \                     _ZN20unified_bed_leveling18g29_repetition_cntE:
   \   0000000C                      DS8 4
   \                     _ZN20unified_bed_leveling16g29_storage_slotE:
   \   00000010                      DS8 4
   \                     _ZN20unified_bed_leveling12g29_map_typeE:
   \   00000014                      DS8 4
   \                     _ZN20unified_bed_leveling9g29_x_posE:
   \   00000018                      DS8 4
   \                     _ZN20unified_bed_leveling9g29_y_posE:
   \   0000001C                      DS8 4
   \                     _ZN20unified_bed_leveling12g29_constantE:
   \   00000020                      DS8 4
   \                     _ZN20unified_bed_leveling13g29_grid_sizeE:
   \   00000024                      DS8 4

   \                                 In section .bss, align 4
   \                     _ZN20unified_bed_leveling18g29_card_thicknessE:
   \   00000000                      DS8 4
   1202          
   1203            static uint8_t ubl_state_at_invocation = 0;
   1204          
   1205            #if ENABLED(UBL_DEVEL_DEBUGGING)
   1206              static uint8_t ubl_state_recursion_chk = 0;
   1207            #endif
   1208          

   \                                 In section .text, align 2, keep-with-next
   1209            void unified_bed_leveling::save_ubl_active_state_and_disable() {
   1210              #if ENABLED(UBL_DEVEL_DEBUGGING)
   1211                ubl_state_recursion_chk++;
   1212                if (ubl_state_recursion_chk != 1) {
   1213                  SERIAL_ECHOLNPGM("save_ubl_active_state_and_disabled() called multiple times in a row.");
   1214                  #if ENABLED(NEWPANEL)
   1215                    LCD_MESSAGEPGM(MSG_UBL_SAVE_ERROR);
   1216                    lcd_quick_feedback();
   1217                  #endif
   1218                  return;
   1219                }
   1220              #endif
   1221              ubl_state_at_invocation = planner.leveling_active;
   \                     _ZN20unified_bed_leveling33save_ubl_active_state_and_disableEv: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable83_1
   \   00000004   0x....             LDR.N    R1,??DataTable81_2
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x70C8             STRB     R0,[R1, #+3]
   1222              set_bed_leveling_enabled(false);
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      B.W      _Z24set_bed_leveling_enabledb
   1223            }
   1224          

   \                                 In section .text, align 2, keep-with-next
   1225            void unified_bed_leveling::restore_ubl_active_state_and_leave() {
   1226              #if ENABLED(UBL_DEVEL_DEBUGGING)
   1227                if (--ubl_state_recursion_chk) {
   1228                  SERIAL_ECHOLNPGM("restore_ubl_active_state_and_leave() called too many times.");
   1229                  #if ENABLED(NEWPANEL)
   1230                    LCD_MESSAGEPGM(MSG_UBL_RESTORE_ERROR);
   1231                    lcd_quick_feedback();
   1232                  #endif
   1233                  return;
   1234                }
   1235              #endif
   1236              set_bed_leveling_enabled(ubl_state_at_invocation);
   \                     _ZN20unified_bed_leveling34restore_ubl_active_state_and_leaveEv: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable81_2
   \   00000002   0x78C1             LDRB     R1,[R0, #+3]
   \   00000004   0x1E48             SUBS     R0,R1,#+1
   \   00000006   0x4180             SBCS     R0,R0,R0
   \   00000008   0x43C0             MVNS     R0,R0
   \   0000000A   0x0FC0             LSRS     R0,R0,#+31
   \   0000000C   0x.... 0x....      B.W      _Z24set_bed_leveling_enabledb
   1237            }
   1238          
   1239            /**
   1240             * Much of the 'What?' command can be eliminated. But until we are fully debugged, it is
   1241             * good to have the extra information. Soon... we prune this to just a few items
   1242             */

   \                                 In section .text, align 2, keep-with-next
   1243            void unified_bed_leveling::g29_what_command() {
   \                     _ZN20unified_bed_leveling16g29_what_commandEv: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   1244              report_state();
   \   00000004   0x.... 0x....      BL       _ZN20unified_bed_leveling12report_stateEv
   1245          
   1246              if (storage_slot == -1)
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable83_3
   \   0000000C   0xF990 0x1000      LDRSB    R1,[R0, #+0]
   \   00000010   0xF111 0x0F01      CMN      R1,#+1
   \   00000014   0xBF08             IT       EQ 
   1247                SERIAL_PROTOCOLPGM("No Mesh Loaded.");
   \   00000016   0x.... 0x....      ADREQ.W  R0,`?<Constant "No Mesh Loaded.">`
   \   0000001A   0xD005             BEQ.N    ??g29_what_command_0
   1248              else {
   1249                SERIAL_PROTOCOLPAIR("Mesh ", storage_slot);
   \   0000001C   0x.... 0x....      ADR.W    R0,`?<Constant "Mesh ">`
   \   00000020   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   1250                SERIAL_PROTOCOLPGM(" Loaded.");
   \   00000024   0x.... 0x....      ADR.W    R0,`?<Constant " Loaded.">`
   \                     ??g29_what_command_0: (+1)
   \   00000028   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1251              }
   1252              SERIAL_EOL();
   \   0000002C   0x.... 0x....      LDR.W    R9,??DataTable83_4
   \   00000030   0x210A             MOVS     R1,#+10
   \   00000032   0x4648             MOV      R0,R9
   \   00000034   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1253              safe_delay(50);
   \   00000038   0x2032             MOVS     R0,#+50
   \   0000003A   0x.... 0x....      BL       _Z10safe_delaym
   1254          
   1255              SERIAL_PROTOCOLLNPAIR("UBL object count: ", (int)ubl_cnt);
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable83_5
   \   00000042   0x7801             LDRB     R1,[R0, #+0]
   \   00000044   0x.... 0x....      ADR.W    R0,`?<Constant "UBL object count: ">`
   \   00000048   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   0000004C   0x210A             MOVS     R1,#+10
   \   0000004E   0x4648             MOV      R0,R9
   \   00000050   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1256          
   1257              #if ENABLED(ENABLE_LEVELING_FADE_HEIGHT)
   1258                SERIAL_PROTOCOL("planner.z_fade_height : ");
   \   00000054   0x.... 0x....      ADR.W    R1,`?<Constant "planner.z_fade_height : ">`
   \   00000058   0x4648             MOV      R0,R9
   \   0000005A   0x.... 0x....      BL       _ZN5Print5printEPKc
   1259                SERIAL_PROTOCOL_F(planner.z_fade_height, 4);
   \   0000005E   0x2004             MOVS     R0,#+4
   \   00000060   0x9000             STR      R0,[SP, #+0]
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable83_6
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x.... 0x....      BL       __aeabi_f2d
   \   0000006C   0x4602             MOV      R2,R0
   \   0000006E   0x460B             MOV      R3,R1
   \   00000070   0x4648             MOV      R0,R9
   \   00000072   0x.... 0x....      BL       _ZN5Print5printEdi
   1260                SERIAL_EOL();
   \   00000076   0x210A             MOVS     R1,#+10
   \   00000078   0x4648             MOV      R0,R9
   \   0000007A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1261              #endif
   1262          
   1263              find_mean_mesh_height();
   \   0000007E   0x.... 0x....      BL       _ZN20unified_bed_leveling21find_mean_mesh_heightEv
   1264          
   1265              #if HAS_BED_PROBE
   1266                SERIAL_PROTOCOLPGM("zprobe_zoffset: ");
   \   00000082   0x.... 0x....      ADR.W    R0,`?<Constant "zprobe_zoffset: ">`
   \   00000086   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1267                SERIAL_PROTOCOL_F(zprobe_zoffset, 7);
   \   0000008A   0x2007             MOVS     R0,#+7
   \   0000008C   0x9000             STR      R0,[SP, #+0]
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable83_7
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0x.... 0x....      BL       __aeabi_f2d
   \   00000098   0x4602             MOV      R2,R0
   \   0000009A   0x460B             MOV      R3,R1
   \   0000009C   0x4648             MOV      R0,R9
   \   0000009E   0x.... 0x....      BL       _ZN5Print5printEdi
   1268                SERIAL_EOL();
   \   000000A2   0x210A             MOVS     R1,#+10
   \   000000A4   0x4648             MOV      R0,R9
   \   000000A6   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1269              #endif
   1270              if(MACHINETPYE & IS_KINEMATIC)
   \   000000AA   0x.... 0x....      LDR.W    R5,??DataTable83_8
   \   000000AE   0xF895 0x0098      LDRB     R0,[R5, #+152]
   \   000000B2   0x.... 0x....      BL       __aeabi_ui2f
   \   000000B6   0xF105 0x0608      ADD      R6,R5,#+8
   \   000000BA   0x4680             MOV      R8,R0
   \   000000BC   0xF9B6 0x0050      LDRSH    R0,[R6, #+80]
   \   000000C0   0xF240 0x3A02      MOVW     R10,#+770
   \   000000C4   0xF105 0x0460      ADD      R4,R5,#+96
   \   000000C8   0xEA10 0x0F0A      TST      R0,R10
   \   000000CC   0xD03E             BEQ.N    ??g29_what_command_1
   1271              {
   1272                  SERIAL_ECHOLNPAIR("MESH_MIN_X  " STRINGIFY(MESH_MIN_X_IS_KINEMATIC) "=", MESH_MIN_X_IS_KINEMATIC);
   \   000000CE   0x.... 0x....      LDR.W    R7,??DataTable83_9
   \   000000D2   0x6838             LDR      R0,[R7, #+0]
   \   000000D4   0x4641             MOV      R1,R8
   \   000000D6   0x.... 0x....      BL       __aeabi_fadd
   \   000000DA   0x4601             MOV      R1,R0
   \   000000DC   0x.... 0x....      ADR.W    R0,`?<Constant "MESH_MIN_X  (mksTmp.m...">`
   \   000000E0   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   000000E4   0x210A             MOVS     R1,#+10
   \   000000E6   0x4648             MOV      R0,R9
   \   000000E8   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1273                  SERIAL_ECHOLNPAIR("MESH_MIN_Y  " STRINGIFY(MESH_MIN_Y_IS_KINEMATIC) "=", MESH_MIN_Y_IS_KINEMATIC);
   \   000000EC   0xF895 0x0098      LDRB     R0,[R5, #+152]
   \   000000F0   0x.... 0x....      BL       __aeabi_ui2f
   \   000000F4   0x68B9             LDR      R1,[R7, #+8]
   \   000000F6   0x.... 0x....      BL       __aeabi_fadd
   \   000000FA   0x4601             MOV      R1,R0
   \   000000FC   0x.... 0x....      ADR.W    R0,`?<Constant "MESH_MIN_Y  (mksTmp.m...">`
   \   00000100   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   00000104   0x210A             MOVS     R1,#+10
   \   00000106   0x4648             MOV      R0,R9
   \   00000108   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1274                  safe_delay(25);
   \   0000010C   0x2019             MOVS     R0,#+25
   \   0000010E   0x.... 0x....      BL       _Z10safe_delaym
   1275                  SERIAL_ECHOLNPAIR("MESH_MAX_X  " STRINGIFY(MESH_MAX_X_IS_KINEMATIC) "=", MESH_MAX_X_IS_KINEMATIC);
   \   00000112   0xF895 0x0098      LDRB     R0,[R5, #+152]
   \   00000116   0x.... 0x....      BL       __aeabi_ui2f
   \   0000011A   0x4601             MOV      R1,R0
   \   0000011C   0x6878             LDR      R0,[R7, #+4]
   \   0000011E   0x.... 0x....      BL       __aeabi_fsub
   \   00000122   0x4601             MOV      R1,R0
   \   00000124   0x.... 0x....      ADR.W    R0,`?<Constant "MESH_MAX_X  (mksTmp.m...">`
   \   00000128   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   0000012C   0x210A             MOVS     R1,#+10
   \   0000012E   0x4648             MOV      R0,R9
   \   00000130   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1276                  SERIAL_ECHOLNPAIR("MESH_MAX_Y  " STRINGIFY(MESH_MAX_Y_IS_KINEMATIC) "=", MESH_MAX_Y_IS_KINEMATIC);
   \   00000134   0xF895 0x0098      LDRB     R0,[R5, #+152]
   \   00000138   0x.... 0x....      BL       __aeabi_ui2f
   \   0000013C   0x4601             MOV      R1,R0
   \   0000013E   0x68F8             LDR      R0,[R7, #+12]
   \   00000140   0x.... 0x....      BL       __aeabi_fsub
   \   00000144   0x4601             MOV      R1,R0
   \   00000146   0x.... 0x....      ADR.W    R0,`?<Constant "MESH_MAX_Y  (mksTmp.m...">`
   \   0000014A   0xE08D             B.N      ??g29_what_command_2
   1277              }
   1278              else
   1279              {
   1280                  SERIAL_ECHOLNPAIR("MESH_MIN_X  " STRINGIFY(MESH_MIN_X_IS_Cartesian) "=", MESH_MIN_X_IS_Cartesian);
   \                     ??g29_what_command_1: (+1)
   \   0000014C   0x68F1             LDR      R1,[R6, #+12]
   \   0000014E   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000152   0x.... 0x....      BL       __aeabi_fmul
   \   00000156   0x4601             MOV      R1,R0
   \   00000158   0x.... 0x....      BL       __aeabi_fsub
   \   0000015C   0x4641             MOV      R1,R8
   \   0000015E   0x.... 0x....      BL       __aeabi_fadd
   \   00000162   0x4680             MOV      R8,R0
   \   00000164   0x68A9             LDR      R1,[R5, #+8]
   \   00000166   0x68E0             LDR      R0,[R4, #+12]
   \   00000168   0x.... 0x....      BL       __aeabi_fadd
   \   0000016C   0x4641             MOV      R1,R8
   \   0000016E   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000172   0xBF28             IT       CS 
   \   00000174   0x4680             MOVCS    R8,R0
   \   00000176   0x4641             MOV      R1,R8
   \   00000178   0x.... 0x....      ADR.W    R0,`?<Constant "MESH_MIN_X  (((((((mk...">`
   \   0000017C   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   00000180   0x210A             MOVS     R1,#+10
   \   00000182   0x4648             MOV      R0,R9
   \   00000184   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1281                  SERIAL_ECHOLNPAIR("MESH_MIN_Y  " STRINGIFY(MESH_MIN_Y_IS_Cartesian) "=", MESH_MIN_Y_IS_Cartesian);
   \   00000188   0x6931             LDR      R1,[R6, #+16]
   \   0000018A   0xF04F 0x507C      MOV      R0,#+1056964608
   \   0000018E   0x.... 0x....      BL       __aeabi_fmul
   \   00000192   0x4601             MOV      R1,R0
   \   00000194   0x.... 0x....      BL       __aeabi_fsub
   \   00000198   0x4607             MOV      R7,R0
   \   0000019A   0xF895 0x0098      LDRB     R0,[R5, #+152]
   \   0000019E   0x.... 0x....      BL       __aeabi_ui2f
   \   000001A2   0x4639             MOV      R1,R7
   \   000001A4   0x.... 0x....      BL       __aeabi_fadd
   \   000001A8   0x6871             LDR      R1,[R6, #+4]
   \   000001AA   0x4680             MOV      R8,R0
   \   000001AC   0x6920             LDR      R0,[R4, #+16]
   \   000001AE   0x.... 0x....      BL       __aeabi_fadd
   \   000001B2   0x4641             MOV      R1,R8
   \   000001B4   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001B8   0xBF28             IT       CS 
   \   000001BA   0x4680             MOVCS    R8,R0
   \   000001BC   0x4641             MOV      R1,R8
   \   000001BE   0x.... 0x....      ADR.W    R0,`?<Constant "MESH_MIN_Y  (((((((mk...">`
   \   000001C2   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   000001C6   0x210A             MOVS     R1,#+10
   \   000001C8   0x4648             MOV      R0,R9
   \   000001CA   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1282                  safe_delay(25);
   \   000001CE   0x2019             MOVS     R0,#+25
   \   000001D0   0x.... 0x....      BL       _Z10safe_delaym
   1283                  SERIAL_ECHOLNPAIR("MESH_MAX_X  " STRINGIFY(MESH_MAX_X_IS_Cartesian) "=", MESH_MAX_X_IS_Cartesian);
   \   000001D4   0xF8D6 0x800C      LDR      R8,[R6, #+12]
   \   000001D8   0xF04F 0x507C      MOV      R0,#+1056964608
   \   000001DC   0x4641             MOV      R1,R8
   \   000001DE   0x.... 0x....      BL       __aeabi_fmul
   \   000001E2   0xF04F 0x4180      MOV      R1,#+1073741824
   \   000001E6   0x.... 0x....      BL       __aeabi_fmul
   \   000001EA   0x4607             MOV      R7,R0
   \   000001EC   0xF895 0x0098      LDRB     R0,[R5, #+152]
   \   000001F0   0x.... 0x....      BL       __aeabi_ui2f
   \   000001F4   0x4601             MOV      R1,R0
   \   000001F6   0x4638             MOV      R0,R7
   \   000001F8   0x.... 0x....      BL       __aeabi_fsub
   \   000001FC   0x4607             MOV      R7,R0
   \   000001FE   0x68E0             LDR      R0,[R4, #+12]
   \   00000200   0x4641             MOV      R1,R8
   \   00000202   0x.... 0x....      BL       __aeabi_fadd
   \   00000206   0x4601             MOV      R1,R0
   \   00000208   0x4638             MOV      R0,R7
   \   0000020A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000020E   0xBF28             IT       CS 
   \   00000210   0x460F             MOVCS    R7,R1
   \   00000212   0x4639             MOV      R1,R7
   \   00000214   0x.... 0x....      ADR.W    R0,`?<Constant "MESH_MAX_X  (((((((mk...">`
   \   00000218   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   0000021C   0x210A             MOVS     R1,#+10
   \   0000021E   0x4648             MOV      R0,R9
   \   00000220   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1284                  SERIAL_ECHOLNPAIR("MESH_MAX_Y  " STRINGIFY(MESH_MAX_Y_IS_Cartesian) "=", MESH_MAX_Y_IS_Cartesian);        
   \   00000224   0xF8D6 0x8010      LDR      R8,[R6, #+16]
   \   00000228   0xF04F 0x507C      MOV      R0,#+1056964608
   \   0000022C   0x4641             MOV      R1,R8
   \   0000022E   0x.... 0x....      BL       __aeabi_fmul
   \   00000232   0xF04F 0x4180      MOV      R1,#+1073741824
   \   00000236   0x.... 0x....      BL       __aeabi_fmul
   \   0000023A   0x4607             MOV      R7,R0
   \   0000023C   0xF895 0x0098      LDRB     R0,[R5, #+152]
   \   00000240   0x.... 0x....      BL       __aeabi_ui2f
   \   00000244   0x4601             MOV      R1,R0
   \   00000246   0x4638             MOV      R0,R7
   \   00000248   0x.... 0x....      BL       __aeabi_fsub
   \   0000024C   0x4607             MOV      R7,R0
   \   0000024E   0x6920             LDR      R0,[R4, #+16]
   \   00000250   0x4641             MOV      R1,R8
   \   00000252   0x.... 0x....      BL       __aeabi_fadd
   \   00000256   0x4601             MOV      R1,R0
   \   00000258   0x4638             MOV      R0,R7
   \   0000025A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000025E   0xBF28             IT       CS 
   \   00000260   0x460F             MOVCS    R7,R1
   \   00000262   0x4639             MOV      R1,R7
   \   00000264   0x.... 0x....      ADR.W    R0,`?<Constant "MESH_MAX_Y  (((((((mk...">`
   \                     ??g29_what_command_2: (+1)
   \   00000268   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   0000026C   0x210A             MOVS     R1,#+10
   \   0000026E   0x4648             MOV      R0,R9
   \   00000270   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1285              }
   1286              safe_delay(25);
   \   00000274   0x2019             MOVS     R0,#+25
   \   00000276   0x.... 0x....      BL       _Z10safe_delaym
   1287              SERIAL_ECHOLNPAIR("GRID_MAX_POINTS_X  ", GRID_MAX_POINTS_X);
   \   0000027A   0xF895 0x1060      LDRB     R1,[R5, #+96]
   \   0000027E   0x.... 0x....      ADR.W    R0,`?<Constant "GRID_MAX_POINTS_X  ">`
   \   00000282   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   00000286   0x210A             MOVS     R1,#+10
   \   00000288   0x4648             MOV      R0,R9
   \   0000028A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1288              SERIAL_ECHOLNPAIR("GRID_MAX_POINTS_Y  ", GRID_MAX_POINTS_Y);
   \   0000028E   0x7861             LDRB     R1,[R4, #+1]
   \   00000290   0x.... 0x....      ADR.W    R0,`?<Constant "GRID_MAX_POINTS_Y  ">`
   \   00000294   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   00000298   0x210A             MOVS     R1,#+10
   \   0000029A   0x4648             MOV      R0,R9
   \   0000029C   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1289              safe_delay(25);
   \   000002A0   0x2019             MOVS     R0,#+25
   \   000002A2   0x.... 0x....      BL       _Z10safe_delaym
   \   000002A6   0xF895 0x0098      LDRB     R0,[R5, #+152]
   \   000002AA   0x.... 0x....      BL       __aeabi_ui2f
   \   000002AE   0x4680             MOV      R8,R0
   \   000002B0   0xF9B6 0x0050      LDRSH    R0,[R6, #+80]
   \   000002B4   0xEA10 0x0F0A      TST      R0,R10
   \   000002B8   0xD032             BEQ.N    ??g29_what_command_3
   1290              if(MACHINETPYE & IS_KINEMATIC)
   1291              {
   1292                  SERIAL_ECHOLNPAIR("MESH_X_DIST  ", MESH_X_DIST_IS_KINEMATIC);
   \   000002BA   0x.... 0x....      LDR.W    R7,??DataTable83_9
   \   000002BE   0x6878             LDR      R0,[R7, #+4]
   \   000002C0   0x4641             MOV      R1,R8
   \   000002C2   0x.... 0x....      BL       __aeabi_fsub
   \   000002C6   0x4606             MOV      R6,R0
   \   000002C8   0x6838             LDR      R0,[R7, #+0]
   \   000002CA   0x4641             MOV      R1,R8
   \   000002CC   0x.... 0x....      BL       __aeabi_fadd
   \   000002D0   0x4601             MOV      R1,R0
   \   000002D2   0x4630             MOV      R0,R6
   \   000002D4   0x.... 0x....      BL       __aeabi_fsub
   \   000002D8   0x4606             MOV      R6,R0
   \   000002DA   0xF895 0x0060      LDRB     R0,[R5, #+96]
   \   000002DE   0x1E40             SUBS     R0,R0,#+1
   \   000002E0   0x.... 0x....      BL       __aeabi_i2f
   \   000002E4   0x4601             MOV      R1,R0
   \   000002E6   0x4630             MOV      R0,R6
   \   000002E8   0x.... 0x....      BL       __aeabi_fdiv
   \   000002EC   0x4601             MOV      R1,R0
   \   000002EE   0x.... 0x....      ADR.W    R0,`?<Constant "MESH_X_DIST  ">`
   \   000002F2   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   000002F6   0x210A             MOVS     R1,#+10
   \   000002F8   0x4648             MOV      R0,R9
   \   000002FA   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   000002FE   0xF895 0x0098      LDRB     R0,[R5, #+152]
   \   00000302   0x.... 0x....      BL       __aeabi_ui2f
   \   00000306   0x4606             MOV      R6,R0
   \   00000308   0x68F8             LDR      R0,[R7, #+12]
   \   0000030A   0x4631             MOV      R1,R6
   \   0000030C   0x.... 0x....      BL       __aeabi_fsub
   \   00000310   0x4682             MOV      R10,R0
   \   00000312   0x68B8             LDR      R0,[R7, #+8]
   \   00000314   0x4631             MOV      R1,R6
   \   00000316   0x.... 0x....      BL       __aeabi_fadd
   \   0000031A   0x4601             MOV      R1,R0
   \   0000031C   0x4650             MOV      R0,R10
   \   0000031E   0xE075             B.N      ??g29_what_command_4
   1293                  SERIAL_ECHOLNPAIR("MESH_Y_DIST  ", MESH_Y_DIST_IS_KINEMATIC);
   1294              }
   1295              else
   1296              {
   1297                  SERIAL_ECHOLNPAIR("MESH_X_DIST  ", MESH_X_DIST_IS_Cartesian);
   \                     ??g29_what_command_3: (+1)
   \   00000320   0xF8D6 0xB00C      LDR      R11,[R6, #+12]
   \   00000324   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000328   0x4659             MOV      R1,R11
   \   0000032A   0x.... 0x....      BL       __aeabi_fmul
   \   0000032E   0x4607             MOV      R7,R0
   \   00000330   0xF04F 0x4080      MOV      R0,#+1073741824
   \   00000334   0x4639             MOV      R1,R7
   \   00000336   0x.... 0x....      BL       __aeabi_fmul
   \   0000033A   0x4641             MOV      R1,R8
   \   0000033C   0x.... 0x....      BL       __aeabi_fsub
   \   00000340   0x4682             MOV      R10,R0
   \   00000342   0x68E0             LDR      R0,[R4, #+12]
   \   00000344   0x4659             MOV      R1,R11
   \   00000346   0x.... 0x....      BL       __aeabi_fadd
   \   0000034A   0x4601             MOV      R1,R0
   \   0000034C   0x4650             MOV      R0,R10
   \   0000034E   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000352   0xBF28             IT       CS 
   \   00000354   0x468A             MOVCS    R10,R1
   \   00000356   0x4638             MOV      R0,R7
   \   00000358   0x4639             MOV      R1,R7
   \   0000035A   0x.... 0x....      BL       __aeabi_fsub
   \   0000035E   0x4641             MOV      R1,R8
   \   00000360   0x.... 0x....      BL       __aeabi_fadd
   \   00000364   0x4680             MOV      R8,R0
   \   00000366   0x68A9             LDR      R1,[R5, #+8]
   \   00000368   0x68E0             LDR      R0,[R4, #+12]
   \   0000036A   0x.... 0x....      BL       __aeabi_fadd
   \   0000036E   0x4641             MOV      R1,R8
   \   00000370   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000374   0xBF28             IT       CS 
   \   00000376   0x4680             MOVCS    R8,R0
   \   00000378   0x4650             MOV      R0,R10
   \   0000037A   0x4641             MOV      R1,R8
   \   0000037C   0x.... 0x....      BL       __aeabi_fsub
   \   00000380   0x4607             MOV      R7,R0
   \   00000382   0xF895 0x0060      LDRB     R0,[R5, #+96]
   \   00000386   0x1E40             SUBS     R0,R0,#+1
   \   00000388   0x.... 0x....      BL       __aeabi_i2f
   \   0000038C   0x4601             MOV      R1,R0
   \   0000038E   0x4638             MOV      R0,R7
   \   00000390   0x.... 0x....      BL       __aeabi_fdiv
   \   00000394   0x4601             MOV      R1,R0
   \   00000396   0x.... 0x....      ADR.W    R0,`?<Constant "MESH_X_DIST  ">`
   \   0000039A   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   0000039E   0x210A             MOVS     R1,#+10
   \   000003A0   0x4648             MOV      R0,R9
   \   000003A2   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1298                  SERIAL_ECHOLNPAIR("MESH_Y_DIST  ", MESH_Y_DIST_IS_Cartesian);
   \   000003A6   0xF8D6 0xB010      LDR      R11,[R6, #+16]
   \   000003AA   0xF04F 0x507C      MOV      R0,#+1056964608
   \   000003AE   0x4659             MOV      R1,R11
   \   000003B0   0x.... 0x....      BL       __aeabi_fmul
   \   000003B4   0x4680             MOV      R8,R0
   \   000003B6   0xF895 0x0098      LDRB     R0,[R5, #+152]
   \   000003BA   0x.... 0x....      BL       __aeabi_ui2f
   \   000003BE   0x4607             MOV      R7,R0
   \   000003C0   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000003C4   0x4641             MOV      R1,R8
   \   000003C6   0x.... 0x....      BL       __aeabi_fmul
   \   000003CA   0x4639             MOV      R1,R7
   \   000003CC   0x.... 0x....      BL       __aeabi_fsub
   \   000003D0   0x4682             MOV      R10,R0
   \   000003D2   0x6920             LDR      R0,[R4, #+16]
   \   000003D4   0x4659             MOV      R1,R11
   \   000003D6   0x.... 0x....      BL       __aeabi_fadd
   \   000003DA   0x4601             MOV      R1,R0
   \   000003DC   0x4650             MOV      R0,R10
   \   000003DE   0x.... 0x....      BL       __aeabi_cfcmple
   \   000003E2   0xBF28             IT       CS 
   \   000003E4   0x468A             MOVCS    R10,R1
   \   000003E6   0x4640             MOV      R0,R8
   \   000003E8   0x4641             MOV      R1,R8
   \   000003EA   0x.... 0x....      BL       __aeabi_fsub
   \   000003EE   0x4639             MOV      R1,R7
   \   000003F0   0x.... 0x....      BL       __aeabi_fadd
   \   000003F4   0x4680             MOV      R8,R0
   \   000003F6   0x6871             LDR      R1,[R6, #+4]
   \   000003F8   0x6920             LDR      R0,[R4, #+16]
   \   000003FA   0x.... 0x....      BL       __aeabi_fadd
   \   000003FE   0x4641             MOV      R1,R8
   \   00000400   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000404   0xBF28             IT       CS 
   \   00000406   0x4680             MOVCS    R8,R0
   \   00000408   0x4650             MOV      R0,R10
   \   0000040A   0x4641             MOV      R1,R8
   \                     ??g29_what_command_4: (+1)
   \   0000040C   0x.... 0x....      BL       __aeabi_fsub
   \   00000410   0x4606             MOV      R6,R0
   \   00000412   0x7860             LDRB     R0,[R4, #+1]
   \   00000414   0x1E40             SUBS     R0,R0,#+1
   \   00000416   0x.... 0x....      BL       __aeabi_i2f
   \   0000041A   0x4601             MOV      R1,R0
   \   0000041C   0x4630             MOV      R0,R6
   \   0000041E   0x.... 0x....      BL       __aeabi_fdiv
   \   00000422   0x4601             MOV      R1,R0
   \   00000424   0x.... 0x....      ADR.W    R0,`?<Constant "MESH_Y_DIST  ">`
   \   00000428   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   0000042C   0x210A             MOVS     R1,#+10
   \   0000042E   0x4648             MOV      R0,R9
   \   00000430   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1299              }
   1300          
   1301              safe_delay(25);
   \   00000434   0x2019             MOVS     R0,#+25
   \   00000436   0x.... 0x....      BL       _Z10safe_delaym
   1302          
   1303              SERIAL_PROTOCOLPGM("X-Axis Mesh Points at: ");
   \   0000043A   0x.... 0x....      ADR.W    R0,`?<Constant "X-Axis Mesh Points at: ">`
   \   0000043E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1304              for (uint8_t i = 0; i < GRID_MAX_POINTS_X; i++) {
   \   00000442   0x2600             MOVS     R6,#+0
   \   00000444   0x.... 0x....      ADR.W    R8,??DataTable82  ;; 0x20, 0x20, 0x00, 0x00
   \   00000448   0x.... 0x....      LDR.W    R10,??DataTable84
   \   0000044C   0xE00B             B.N      ??g29_what_command_5
   \                     ??g29_what_command_6: (+1)
   \   0000044E   0xB2C9             UXTB     R1,R1
   \   00000450   0x4648             MOV      R0,R9
   \   00000452   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??g29_what_command_7: (+1)
   \   00000456   0xF917 0x1B01      LDRSB    R1,[R7], #+1
   \   0000045A   0x0008             MOVS     R0,R1
   \   0000045C   0xD1F7             BNE.N    ??g29_what_command_6
   1305                SERIAL_PROTOCOL_F(LOGICAL_X_POSITION(mesh_index_to_xpos(i)), 3);
   1306                SERIAL_PROTOCOLPGM("  ");
   1307                safe_delay(25);
   \   0000045E   0x2019             MOVS     R0,#+25
   \   00000460   0x.... 0x....      BL       _Z10safe_delaym
   \   00000464   0x1C76             ADDS     R6,R6,#+1
   \                     ??g29_what_command_5: (+1)
   \   00000466   0xF895 0x0060      LDRB     R0,[R5, #+96]
   \   0000046A   0xB2F6             UXTB     R6,R6
   \   0000046C   0x4286             CMP      R6,R0
   \   0000046E   0xD212             BCS.N    ??g29_what_command_8
   \   00000470   0x4630             MOV      R0,R6
   \   00000472   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   00000476   0x4601             MOV      R1,R0
   \   00000478   0x2003             MOVS     R0,#+3
   \   0000047A   0x9000             STR      R0,[SP, #+0]
   \   0000047C   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   00000480   0x.... 0x....      BL       __aeabi_fadd
   \   00000484   0x.... 0x....      BL       __aeabi_f2d
   \   00000488   0x4602             MOV      R2,R0
   \   0000048A   0x460B             MOV      R3,R1
   \   0000048C   0x4648             MOV      R0,R9
   \   0000048E   0x.... 0x....      BL       _ZN5Print5printEdi
   \   00000492   0x4647             MOV      R7,R8
   \   00000494   0xE7DF             B.N      ??g29_what_command_7
   1308              }
   1309              SERIAL_EOL();
   \                     ??g29_what_command_8: (+1)
   \   00000496   0x210A             MOVS     R1,#+10
   \   00000498   0x4648             MOV      R0,R9
   \   0000049A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1310          
   1311              SERIAL_PROTOCOLPGM("Y-Axis Mesh Points at: ");
   \   0000049E   0x.... 0x....      ADR.W    R0,`?<Constant "Y-Axis Mesh Points at: ">`
   \   000004A2   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1312              for (uint8_t i = 0; i < GRID_MAX_POINTS_Y; i++) {
   \   000004A6   0x2500             MOVS     R5,#+0
   \   000004A8   0x.... 0x....      ADR.W    R8,??DataTable82  ;; 0x20, 0x20, 0x00, 0x00
   \   000004AC   0xE00B             B.N      ??g29_what_command_9
   \                     ??g29_what_command_10: (+1)
   \   000004AE   0xB2C9             UXTB     R1,R1
   \   000004B0   0x4648             MOV      R0,R9
   \   000004B2   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??g29_what_command_11: (+1)
   \   000004B6   0xF916 0x1B01      LDRSB    R1,[R6], #+1
   \   000004BA   0x0008             MOVS     R0,R1
   \   000004BC   0xD1F7             BNE.N    ??g29_what_command_10
   1313                SERIAL_PROTOCOL_F(LOGICAL_Y_POSITION(mesh_index_to_ypos(i)), 3);
   1314                SERIAL_PROTOCOLPGM("  ");
   1315                safe_delay(25);
   \   000004BE   0x2019             MOVS     R0,#+25
   \   000004C0   0x.... 0x....      BL       _Z10safe_delaym
   \   000004C4   0x1C6D             ADDS     R5,R5,#+1
   \                     ??g29_what_command_9: (+1)
   \   000004C6   0x7860             LDRB     R0,[R4, #+1]
   \   000004C8   0xB2ED             UXTB     R5,R5
   \   000004CA   0x4285             CMP      R5,R0
   \   000004CC   0xD211             BCS.N    ??g29_what_command_12
   \   000004CE   0x4628             MOV      R0,R5
   \   000004D0   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   000004D4   0x2103             MOVS     R1,#+3
   \   000004D6   0x9100             STR      R1,[SP, #+0]
   \   000004D8   0xF8DA 0x1004      LDR      R1,[R10, #+4]
   \   000004DC   0x.... 0x....      BL       __aeabi_fadd
   \   000004E0   0x.... 0x....      BL       __aeabi_f2d
   \   000004E4   0x4602             MOV      R2,R0
   \   000004E6   0x460B             MOV      R3,R1
   \   000004E8   0x4648             MOV      R0,R9
   \   000004EA   0x.... 0x....      BL       _ZN5Print5printEdi
   \   000004EE   0x4646             MOV      R6,R8
   \   000004F0   0xE7E1             B.N      ??g29_what_command_11
   1316              }
   1317              SERIAL_EOL();
   \                     ??g29_what_command_12: (+1)
   \   000004F2   0x210A             MOVS     R1,#+10
   \   000004F4   0x4648             MOV      R0,R9
   \   000004F6   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1318          
   1319              #if HAS_KILL
   1320                SERIAL_PROTOCOLPAIR("Kill pin on :", KILL_PIN);
   1321                SERIAL_PROTOCOLLNPAIR("  state:", READ(KILL_PIN));
   1322              #endif
   1323              SERIAL_EOL();
   \   000004FA   0x210A             MOVS     R1,#+10
   \   000004FC   0x4648             MOV      R0,R9
   \   000004FE   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1324              safe_delay(50);
   \   00000502   0x2032             MOVS     R0,#+50
   \   00000504   0x.... 0x....      BL       _Z10safe_delaym
   1325          
   1326              #if ENABLED(UBL_DEVEL_DEBUGGING)
   1327                SERIAL_PROTOCOLLNPAIR("ubl_state_at_invocation :", ubl_state_at_invocation);
   1328                SERIAL_EOL();
   1329                SERIAL_PROTOCOLLNPAIR("ubl_state_recursion_chk :", ubl_state_recursion_chk);
   1330                SERIAL_EOL();
   1331                safe_delay(50);
   1332          
   1333                SERIAL_PROTOCOLPAIR("Meshes go from ", hex_address((void*)settings.get_start_of_meshes()));
   1334                SERIAL_PROTOCOLLNPAIR(" to ", hex_address((void*)settings.get_end_of_meshes()));
   1335                safe_delay(50);
   1336          
   1337                SERIAL_PROTOCOLLNPAIR("sizeof(ubl) :  ", (int)sizeof(ubl));
   1338                SERIAL_EOL();
   1339                SERIAL_PROTOCOLLNPAIR("z_value[][] size: ", (int)sizeof(z_values));
   1340                SERIAL_EOL();
   1341                safe_delay(25);
   1342          
   1343                SERIAL_PROTOCOLLNPAIR("EEPROM free for UBL: ", hex_address((void*)(settings.get_end_of_meshes() - settings.get_start_of_meshes())));
   1344                safe_delay(50);
   1345          
   1346                SERIAL_PROTOCOLPAIR("EEPROM can hold ", settings.calc_num_meshes());
   1347                SERIAL_PROTOCOLLNPGM(" meshes.\n");
   1348                safe_delay(25);
   1349              #endif // UBL_DEVEL_DEBUGGING
   1350          
   1351              if (!sanity_check()) {
   \   00000508   0x.... 0x....      BL       _ZN20unified_bed_leveling12sanity_checkEv
   \   0000050C   0xB938             CBNZ.N   R0,??g29_what_command_13
   1352                echo_name();
   \   0000050E   0x.... 0x....      BL       _ZN20unified_bed_leveling9echo_nameEv
   1353                SERIAL_PROTOCOLLNPGM(" sanity checks passed.");
   \   00000512   0xE8BD 0x4FF2      POP      {R1,R4-R11,LR}
   \   00000516   0x.... 0x....      ADR.W    R0,`?<Constant " sanity checks passed.\\n">`
   \   0000051A   0x.... 0x....      B.W      _Z14serialprintPGMPKc
   1354              }
   1355            }
   \                     ??g29_what_command_13: (+1)
   \   0000051E   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
   1356          
   1357            /**
   1358             * When we are fully debugged, the EEPROM dump command will get deleted also. But
   1359             * right now, it is good to have the extra information. Soon... we prune this.
   1360             */

   \                                 In section .text, align 2, keep-with-next
   1361            void unified_bed_leveling::g29_eeprom_dump() {
   \                     _ZN20unified_bed_leveling15g29_eeprom_dumpEv: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   1362              unsigned char cccc;
   1363              unsigned int  kkkk;  // Needs to be of unspecfied size to compile clean on all platforms
   1364          
   1365              SERIAL_ECHO_START();
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable87
   \   00000008   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1366              SERIAL_ECHOLNPGM("EEPROM Dump:");
   \   0000000C   0x.... 0x....      ADR.W    R0,`?<Constant "EEPROM Dump:\\n">`
   \   00000010   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1367              for (uint16_t i = 0; i < E2END + 1; i += 16) {
   \   00000014   0x.... 0x....      LDR.W    R9,??DataTable83_4
   \   00000018   0x2400             MOVS     R4,#+0
   \   0000001A   0xF640 0x0801      MOVW     R8,#+2049
   \   0000001E   0x....             ADR.N    R7,??DataTable83_2  ;; 0x3A, 0x20, 0x00, 0x00
   1368                if (!(i & 0x3)) idle();
   \                     ??g29_eeprom_dump_0: (+1)
   \   00000020   0x2003             MOVS     R0,#+3
   \   00000022   0x4204             TST      R4,R0
   \   00000024   0xBF08             IT       EQ 
   \   00000026   0x.... 0x....      BLEQ     _Z4idlev
   1369                print_hex_word(i);
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       _Z14print_hex_wordt
   1370                SERIAL_ECHOPGM(": ");
   \   00000030   0x463D             MOV      R5,R7
   \   00000032   0xE003             B.N      ??g29_eeprom_dump_1
   \                     ??g29_eeprom_dump_2: (+1)
   \   00000034   0xB2C9             UXTB     R1,R1
   \   00000036   0x4648             MOV      R0,R9
   \   00000038   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??g29_eeprom_dump_1: (+1)
   \   0000003C   0xF915 0x1B01      LDRSB    R1,[R5], #+1
   \   00000040   0x0008             MOVS     R0,R1
   \   00000042   0xD1F7             BNE.N    ??g29_eeprom_dump_2
   1371                for (uint16_t j = 0; j < 16; j++) {
   \   00000044   0x4625             MOV      R5,R4
   \   00000046   0x2610             MOVS     R6,#+16
   1372                  kkkk = i + j;
   1373                  //eeprom_read_block(&cccc, (const void *) kkkk, sizeof(unsigned char));
   1374                  AT24CXX_Read((uint16_t)kkkk,&cccc,1);
   \                     ??g29_eeprom_dump_3: (+1)
   \   00000048   0x2201             MOVS     R2,#+1
   \   0000004A   0xA900             ADD      R1,SP,#+0
   \   0000004C   0xB2A8             UXTH     R0,R5
   \   0000004E   0x.... 0x....      BL       AT24CXX_Read
   1375                  print_hex_byte(cccc);
   \   00000052   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000056   0x.... 0x....      BL       _Z14print_hex_byteh
   1376                  SERIAL_ECHO(' ');
   \   0000005A   0x2120             MOVS     R1,#+32
   \   0000005C   0x4648             MOV      R0,R9
   \   0000005E   0x.... 0x....      BL       _ZN5Print5printEc
   1377                }
   \   00000062   0x1C6D             ADDS     R5,R5,#+1
   \   00000064   0x1E76             SUBS     R6,R6,#+1
   \   00000066   0xD1EF             BNE.N    ??g29_eeprom_dump_3
   1378                SERIAL_EOL();
   \   00000068   0x210A             MOVS     R1,#+10
   \   0000006A   0x4648             MOV      R0,R9
   \   0000006C   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1379              }
   \   00000070   0x3410             ADDS     R4,R4,#+16
   \   00000072   0xB2A4             UXTH     R4,R4
   \   00000074   0x4544             CMP      R4,R8
   \   00000076   0xDBD3             BLT.N    ??g29_eeprom_dump_0
   1380              SERIAL_EOL();
   \   00000078   0x210A             MOVS     R1,#+10
   \   0000007A   0x4648             MOV      R0,R9
   \   0000007C   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1381            }
   \   00000080   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
   1382          
   1383            /**
   1384             * When we are fully debugged, this may go away. But there are some valid
   1385             * use cases for the users. So we can wait and see what to do with it.
   1386             */

   \                                 In section .text, align 2, keep-with-next
   1387            void unified_bed_leveling::g29_compare_current_mesh_to_stored_mesh() {
   \                     _ZN20unified_bed_leveling39g29_compare_current_mesh_to_stored_meshEv: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xF5AD 0x7D10      SUB      SP,SP,#+576
   1388              int16_t a = settings.calc_num_meshes();
   \   00000008   0x.... 0x....      BL       _ZN14MarlinSettings15calc_num_meshesEv
   \   0000000C   0xB200             SXTH     R0,R0
   1389          
   1390              if (!a) {
   \   0000000E   0xB920             CBNZ.N   R0,??g29_compare_current_mesh_to_stored_mesh_0
   1391                SERIAL_PROTOCOLLNPGM("?EEPROM storage not available.");
   \   00000010   0x.... 0x....      ADR.W    R0,`?<Constant "?EEPROM storage not a...">`
   \   00000014   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1392                return;
   1393              }
   1394          
   1395              if (!parser.has_value()) {
   1396                SERIAL_PROTOCOLLNPGM("?Storage slot # required.");
   1397                SERIAL_PROTOCOLLNPAIR("?Use 0 to ", a - 1);
   1398                return;
   1399              }
   1400          
   1401              g29_storage_slot = parser.value_int();
   1402          
   1403              if (!WITHIN(g29_storage_slot, 0, a - 1)) {
   1404                SERIAL_PROTOCOLLNPGM("?Invalid storage slot.");
   1405                SERIAL_PROTOCOLLNPAIR("?Use 0 to ", a - 1);
   1406                return;
   1407              }
   1408          
   1409              //float tmp_z_values[GRID_MAX_POINTS_X][GRID_MAX_POINTS_Y];
   1410          	float tmp_z_values[GRID_MAX_POINTS_X_MAX][GRID_MAX_POINTS_Y_MAX];
   1411              settings.load_mesh(g29_storage_slot, &tmp_z_values);
   1412          
   1413              SERIAL_PROTOCOLPAIR("Subtracting mesh in slot ", g29_storage_slot);
   1414              SERIAL_PROTOCOLLNPGM(" from current mesh.");
   1415          
   1416              for (uint8_t x = 0; x < GRID_MAX_POINTS_X; x++)
   1417                for (uint8_t y = 0; y < GRID_MAX_POINTS_Y; y++)
   1418                  z_values[x][y] -= tmp_z_values[x][y];
   1419            }
   \   00000018   0x....             B.N      ?Subroutine2
   \                     ??g29_compare_current_mesh_to_stored_mesh_0: (+1)
   \   0000001A   0x1E44             SUBS     R4,R0,#+1
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable87_1
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xB910             CBNZ.N   R0,??g29_compare_current_mesh_to_stored_mesh_1
   \   00000024   0x.... 0x....      ADR.W    R0,`?<Constant "?Storage slot # requi...">`
   \   00000028   0xE00E             B.N      ??g29_compare_current_mesh_to_stored_mesh_2
   \                     ??g29_compare_current_mesh_to_stored_mesh_1: (+1)
   \   0000002A   0x.... 0x....      LDR.W    R5,??DataTable87_2
   \   0000002E   0x2300             MOVS     R3,#+0
   \   00000030   0x220A             MOVS     R2,#+10
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x.... 0x....      BL       __iar_Stolx
   \   00000038   0xB200             SXTH     R0,R0
   \   0000003A   0x6128             STR      R0,[R5, #+16]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD401             BMI.N    ??g29_compare_current_mesh_to_stored_mesh_3
   \   00000040   0x4284             CMP      R4,R0
   \   00000042   0xDA0E             BGE.N    ??g29_compare_current_mesh_to_stored_mesh_4
   \                     ??g29_compare_current_mesh_to_stored_mesh_3: (+1)
   \   00000044   0x.... 0x....      ADR.W    R0,`?<Constant "?Invalid storage slot.\\n">`
   \                     ??g29_compare_current_mesh_to_stored_mesh_2: (+1)
   \   00000048   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   0000004C   0x4621             MOV      R1,R4
   \   0000004E   0x.... 0x....      ADR.W    R0,`?<Constant "?Use 0 to ">`
   \   00000052   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable87_3
   \   0000005A   0x210A             MOVS     R1,#+10
   \   0000005C   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   00000060   0x....             B.N      ?Subroutine2
   \                     ??g29_compare_current_mesh_to_stored_mesh_4: (+1)
   \   00000062   0xA900             ADD      R1,SP,#+0
   \   00000064   0xB240             SXTB     R0,R0
   \   00000066   0x.... 0x....      BL       _ZN14MarlinSettings9load_meshEaPv
   \   0000006A   0x6929             LDR      R1,[R5, #+16]
   \   0000006C   0x.... 0x....      ADR.W    R0,`?<Constant "Subtracting mesh in s...">`
   \   00000070   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   00000074   0x.... 0x....      ADR.W    R0,`?<Constant " from current mesh.\\n">`
   \   00000078   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   0000007C   0x.... 0x....      LDR.W    R4,??DataTable87_4
   \   00000080   0xF894 0x5060      LDRB     R5,[R4, #+96]
   \   00000084   0xB1C5             CBZ.N    R5,??g29_compare_current_mesh_to_stored_mesh_5
   \   00000086   0x.... 0x....      LDR.W    R8,??DataTable87_5
   \   0000008A   0xF10D 0x0900      ADD      R9,SP,#+0
   \                     ??g29_compare_current_mesh_to_stored_mesh_6: (+1)
   \   0000008E   0xF104 0x0060      ADD      R0,R4,#+96
   \   00000092   0x7846             LDRB     R6,[R0, #+1]
   \   00000094   0xB156             CBZ.N    R6,??g29_compare_current_mesh_to_stored_mesh_7
   \   00000096   0x4647             MOV      R7,R8
   \   00000098   0x46CA             MOV      R10,R9
   \                     ??g29_compare_current_mesh_to_stored_mesh_8: (+1)
   \   0000009A   0x6838             LDR      R0,[R7, #+0]
   \   0000009C   0xF85A 0x1B04      LDR      R1,[R10], #+4
   \   000000A0   0x.... 0x....      BL       __aeabi_fsub
   \   000000A4   0xF847 0x0B04      STR      R0,[R7], #+4
   \   000000A8   0x1E76             SUBS     R6,R6,#+1
   \   000000AA   0xD1F6             BNE.N    ??g29_compare_current_mesh_to_stored_mesh_8
   \                     ??g29_compare_current_mesh_to_stored_mesh_7: (+1)
   \   000000AC   0xF109 0x0930      ADD      R9,R9,#+48
   \   000000B0   0xF108 0x0830      ADD      R8,R8,#+48
   \   000000B4   0x1E6D             SUBS     R5,R5,#+1
   \   000000B6   0xD1EA             BNE.N    ??g29_compare_current_mesh_to_stored_mesh_6
   \                     ??g29_compare_current_mesh_to_stored_mesh_5: (+1)
   \   000000B8                      REQUIRE ?Subroutine2
   \   000000B8                      ;; // Fall through to label ?Subroutine2

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0xF50D 0x7D10      ADD      SP,SP,#+576
   \   00000004   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   1420          

   \                                 In section .text, align 2, keep-with-next
   1421            mesh_index_pair unified_bed_leveling::find_furthest_invalid_mesh_point() {
   \                     _ZN20unified_bed_leveling32find_furthest_invalid_mesh_pointEv: (+1)
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xB08E             SUB      SP,SP,#+56
   1422          
   1423              bool found_a_NAN  = false, found_a_real = false;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF88D 0x0003      STRB     R0,[SP, #+3]
   \   0000000C   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   00000010   0xF04F 0x30FF      MOV      R0,#-1
   \   00000014   0xF88D 0x0019      STRB     R0,[SP, #+25]
   \   00000018   0xF88D 0x0018      STRB     R0,[SP, #+24]
   1424          
   1425              mesh_index_pair out_mesh;
   1426              out_mesh.x_index = out_mesh.y_index = -1;
   1427              out_mesh.distance = -99999.99;
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable87_6  ;; 0xc7c34fff
   \   00000020   0x9007             STR      R0,[SP, #+28]
   1428          
   1429              for (int8_t i = 0; i < GRID_MAX_POINTS_X; i++) {
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xE002             B.N      ??find_furthest_invalid_mesh_point_0
   \                     ??find_furthest_invalid_mesh_point_1: (+1)
   \   00000026   0x9805             LDR      R0,[SP, #+20]
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \   0000002A   0xB240             SXTB     R0,R0
   \                     ??find_furthest_invalid_mesh_point_0: (+1)
   \   0000002C   0x9005             STR      R0,[SP, #+20]
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable87_7
   \   00000032   0x9905             LDR      R1,[SP, #+20]
   \   00000034   0x9004             STR      R0,[SP, #+16]
   \   00000036   0x7A00             LDRB     R0,[R0, #+8]
   \   00000038   0x4281             CMP      R1,R0
   \   0000003A   0xF280 0x814D      BGE.W    ??find_furthest_invalid_mesh_point_2
   1430                for (int8_t j = 0; j < GRID_MAX_POINTS_Y; j++) {
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x9003             STR      R0,[SP, #+12]
   \   00000042   0x9805             LDR      R0,[SP, #+20]
   \   00000044   0xEB00 0x0140      ADD      R1,R0,R0, LSL #+1
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable87_5
   \   0000004C   0xEB00 0x1001      ADD      R0,R0,R1, LSL #+4
   \   00000050   0x900C             STR      R0,[SP, #+48]
   \   00000052   0xE018             B.N      ??find_furthest_invalid_mesh_point_3
   1431          
   1432                  if (isnan(z_values[i][j])) { // Check to see if this location holds an invalid mesh point
   1433          
   1434                    const float mx = mesh_index_to_xpos(i),
   1435                                my = mesh_index_to_ypos(j);
   1436                    if(MACHINETPYE & IS_KINEMATIC)
   1437                    {
   1438                      if (!position_is_reachable_by_probe_IS_KINEMATIC(mx, my))  // make sure the probe can get to the mesh point
   1439                          continue;
   1440                    }
   1441                    else
   1442                    {
   1443                        if (!position_is_reachable_by_probe_IS_CARTESIAN(mx, my))  // make sure the probe can get to the mesh point
   1444                            continue;
   1445                      
   1446                    }
   1447          
   1448                    found_a_NAN = true;
   1449          
   1450                    int8_t closest_x=-1, closest_y=-1;
   1451                    float d1, d2 = 99999.9;
   1452                    for (int8_t k = 0; k < GRID_MAX_POINTS_X; k++) {
   1453                      for (int8_t l = 0; l < GRID_MAX_POINTS_Y; l++) {
   1454                        if (!isnan(z_values[k][l])) {
   1455                          found_a_real = true;
   1456          
   1457                    // Add in a random weighting factor that scrambles the probing of the
   1458                    // last half of the mesh (when every unprobed mesh point is one index
   1459                    // from a probed location).
   1460          
   1461                          d1 = (float)(HYPOT((double)(i - k), (double)(j - l)) + (1.0 / ((millis() % 47) + 13)));
   1462          
   1463                          if (d1 < d2) {    // found a closer distance from invalid mesh point at (i,j) to defined mesh point at (k,l)
   1464                            d2 = d1;       // found a closer location with
   1465                            closest_x = i;    // an assigned mesh point value
   1466                            closest_y = j;
   1467                          }
   1468                        }
   1469                      }
   1470                    }
   1471          
   1472                    //
   1473                    // at this point d2 should have the closest defined mesh point to invalid mesh point (i,j)
   1474                    //
   1475          
   1476                    if (found_a_real && (closest_x >= 0) && (d2 > out_mesh.distance)) {
   \                     ??find_furthest_invalid_mesh_point_4: (+1)
   \   00000054   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000058   0xB188             CBZ.N    R0,??find_furthest_invalid_mesh_point_5
   \   0000005A   0xF99D 0x0000      LDRSB    R0,[SP, #+0]
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD40D             BMI.N    ??find_furthest_invalid_mesh_point_5
   \   00000062   0x9807             LDR      R0,[SP, #+28]
   \   00000064   0x9908             LDR      R1,[SP, #+32]
   \   00000066   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000006A   0xD208             BCS.N    ??find_furthest_invalid_mesh_point_5
   1477                      out_mesh.distance = d2;         // found an invalid location with a greater distance
   1478                      out_mesh.x_index = closest_x;   // to a defined mesh point
   \   0000006C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000070   0xF88D 0x0018      STRB     R0,[SP, #+24]
   \   00000074   0x9107             STR      R1,[SP, #+28]
   1479                      out_mesh.y_index = closest_y;
   \   00000076   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   0000007A   0xF88D 0x0019      STRB     R0,[SP, #+25]
   1480                    }
   \                     ??find_furthest_invalid_mesh_point_5: (+1)
   \   0000007E   0x9803             LDR      R0,[SP, #+12]
   \   00000080   0x1C40             ADDS     R0,R0,#+1
   \   00000082   0xB240             SXTB     R0,R0
   \   00000084   0x9003             STR      R0,[SP, #+12]
   \                     ??find_furthest_invalid_mesh_point_3: (+1)
   \   00000086   0x9904             LDR      R1,[SP, #+16]
   \   00000088   0x9803             LDR      R0,[SP, #+12]
   \   0000008A   0x7A49             LDRB     R1,[R1, #+9]
   \   0000008C   0x4288             CMP      R0,R1
   \   0000008E   0xDACA             BGE.N    ??find_furthest_invalid_mesh_point_1
   \   00000090   0x990C             LDR      R1,[SP, #+48]
   \   00000092   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   00000096   0x.... 0x....      BL       __iar_FDtest
   \   0000009A   0x2802             CMP      R0,#+2
   \   0000009C   0xD1EF             BNE.N    ??find_furthest_invalid_mesh_point_5
   \   0000009E   0x9805             LDR      R0,[SP, #+20]
   \   000000A0   0xB2C0             UXTB     R0,R0
   \   000000A2   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   000000A6   0x900A             STR      R0,[SP, #+40]
   \   000000A8   0x9803             LDR      R0,[SP, #+12]
   \   000000AA   0xB2C0             UXTB     R0,R0
   \   000000AC   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   000000B0   0x9009             STR      R0,[SP, #+36]
   \   000000B2   0xF240 0x3102      MOVW     R1,#+770
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable87_4
   \   000000BA   0xF8B0 0x0058      LDRH     R0,[R0, #+88]
   \   000000BE   0x4208             TST      R0,R1
   \   000000C0   0xD018             BEQ.N    ??find_furthest_invalid_mesh_point_6
   \   000000C2   0xA909             ADD      R1,SP,#+36
   \   000000C4   0xA80A             ADD      R0,SP,#+40
   \   000000C6   0x.... 0x....      BL       _Z34position_is_reachable_IS_KINEMATICRKfS0_
   \   000000CA   0x2800             CMP      R0,#+0
   \   000000CC   0xD0D7             BEQ.N    ??find_furthest_invalid_mesh_point_5
   \   000000CE   0x9904             LDR      R1,[SP, #+16]
   \   000000D0   0x980A             LDR      R0,[SP, #+40]
   \   000000D2   0x6949             LDR      R1,[R1, #+20]
   \   000000D4   0x.... 0x....      BL       __aeabi_fsub
   \   000000D8   0x9904             LDR      R1,[SP, #+16]
   \   000000DA   0x9002             STR      R0,[SP, #+8]
   \   000000DC   0x6989             LDR      R1,[R1, #+24]
   \   000000DE   0x9809             LDR      R0,[SP, #+36]
   \   000000E0   0x.... 0x....      BL       __aeabi_fsub
   \   000000E4   0x9001             STR      R0,[SP, #+4]
   \   000000E6   0xA901             ADD      R1,SP,#+4
   \   000000E8   0xA802             ADD      R0,SP,#+8
   \   000000EA   0x.... 0x....      BL       _Z34position_is_reachable_IS_KINEMATICRKfS0_
   \   000000EE   0x2800             CMP      R0,#+0
   \   000000F0   0xD14F             BNE.N    ??find_furthest_invalid_mesh_point_7
   \   000000F2   0xE7C4             B.N      ??find_furthest_invalid_mesh_point_5
   \                     ??find_furthest_invalid_mesh_point_6: (+1)
   \   000000F4   0x980A             LDR      R0,[SP, #+40]
   \   000000F6   0x.... 0x....      BL       __aeabi_f2d
   \   000000FA   0x4604             MOV      R4,R0
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable87_8
   \   00000100   0x6800             LDR      R0,[R0, #+0]
   \   00000102   0x460E             MOV      R6,R1
   \   00000104   0x.... 0x....      BL       __aeabi_f2d
   \   00000108   0x.... 0x....      LDR.W    R2,??DataTable87_9  ;; 0xd2f1a9fc
   \   0000010C   0x.... 0x....      LDR.W    R3,??DataTable87_10  ;; 0xbf50624d
   \   00000110   0x.... 0x....      BL       __aeabi_dadd
   \   00000114   0x4602             MOV      R2,R0
   \   00000116   0x460B             MOV      R3,R1
   \   00000118   0x4620             MOV      R0,R4
   \   0000011A   0x4631             MOV      R1,R6
   \   0000011C   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000120   0xD8AD             BHI.N    ??find_furthest_invalid_mesh_point_5
   \   00000122   0x.... 0x....      LDR.W    R0,??DataTable87_8
   \   00000126   0x6840             LDR      R0,[R0, #+4]
   \   00000128   0x.... 0x....      BL       __aeabi_f2d
   \   0000012C   0x.... 0x....      LDR.W    R2,??DataTable87_9  ;; 0xd2f1a9fc
   \   00000130   0x.... 0x....      LDR.W    R3,??DataTable87_11  ;; 0x3f50624d
   \   00000134   0x.... 0x....      BL       __aeabi_dadd
   \   00000138   0x4622             MOV      R2,R4
   \   0000013A   0x4633             MOV      R3,R6
   \   0000013C   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000140   0xD89D             BHI.N    ??find_furthest_invalid_mesh_point_5
   \   00000142   0x9809             LDR      R0,[SP, #+36]
   \   00000144   0x.... 0x....      BL       __aeabi_f2d
   \   00000148   0x4604             MOV      R4,R0
   \   0000014A   0x.... 0x....      LDR.W    R0,??DataTable87_8
   \   0000014E   0x6880             LDR      R0,[R0, #+8]
   \   00000150   0x460E             MOV      R6,R1
   \   00000152   0x.... 0x....      BL       __aeabi_f2d
   \   00000156   0x.... 0x....      LDR.W    R2,??DataTable87_9  ;; 0xd2f1a9fc
   \   0000015A   0x.... 0x....      LDR.W    R3,??DataTable87_10  ;; 0xbf50624d
   \   0000015E   0x.... 0x....      BL       __aeabi_dadd
   \   00000162   0x4602             MOV      R2,R0
   \   00000164   0x460B             MOV      R3,R1
   \   00000166   0x4620             MOV      R0,R4
   \   00000168   0x4631             MOV      R1,R6
   \   0000016A   0x.... 0x....      BL       __aeabi_cdrcmple
   \   0000016E   0xD886             BHI.N    ??find_furthest_invalid_mesh_point_5
   \   00000170   0x.... 0x....      LDR.W    R0,??DataTable87_8
   \   00000174   0x68C0             LDR      R0,[R0, #+12]
   \   00000176   0x.... 0x....      BL       __aeabi_f2d
   \   0000017A   0x.... 0x....      LDR.W    R2,??DataTable87_9  ;; 0xd2f1a9fc
   \   0000017E   0x.... 0x....      LDR.W    R3,??DataTable87_11  ;; 0x3f50624d
   \   00000182   0x.... 0x....      BL       __aeabi_dadd
   \   00000186   0x4622             MOV      R2,R4
   \   00000188   0x4633             MOV      R3,R6
   \   0000018A   0x.... 0x....      BL       __aeabi_cdrcmple
   \   0000018E   0xF63F 0xAF76      BHI.W    ??find_furthest_invalid_mesh_point_5
   \                     ??find_furthest_invalid_mesh_point_7: (+1)
   \   00000192   0x2001             MOVS     R0,#+1
   \   00000194   0xF88D 0x0003      STRB     R0,[SP, #+3]
   \   00000198   0xF04F 0x30FF      MOV      R0,#-1
   \   0000019C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000001A0   0xF88D 0x0002      STRB     R0,[SP, #+2]
   \   000001A4   0x.... 0x....      LDR.W    R0,??DataTable87_12  ;; 0x47c34ff3
   \   000001A8   0x9008             STR      R0,[SP, #+32]
   \   000001AA   0x2000             MOVS     R0,#+0
   \   000001AC   0xE002             B.N      ??find_furthest_invalid_mesh_point_8
   \                     ??find_furthest_invalid_mesh_point_9: (+1)
   \   000001AE   0x9802             LDR      R0,[SP, #+8]
   \   000001B0   0x1C40             ADDS     R0,R0,#+1
   \   000001B2   0xB240             SXTB     R0,R0
   \                     ??find_furthest_invalid_mesh_point_8: (+1)
   \   000001B4   0x9904             LDR      R1,[SP, #+16]
   \   000001B6   0x9002             STR      R0,[SP, #+8]
   \   000001B8   0x7A09             LDRB     R1,[R1, #+8]
   \   000001BA   0x9802             LDR      R0,[SP, #+8]
   \   000001BC   0x4288             CMP      R0,R1
   \   000001BE   0xF6BF 0xAF49      BGE.W    ??find_furthest_invalid_mesh_point_4
   \   000001C2   0x2000             MOVS     R0,#+0
   \   000001C4   0x9001             STR      R0,[SP, #+4]
   \   000001C6   0x9902             LDR      R1,[SP, #+8]
   \   000001C8   0x9805             LDR      R0,[SP, #+20]
   \   000001CA   0x1A46             SUBS     R6,R0,R1
   \   000001CC   0xEB01 0x0141      ADD      R1,R1,R1, LSL #+1
   \   000001D0   0x.... 0x....      LDR.W    R0,??DataTable87_5
   \   000001D4   0xEB00 0x1001      ADD      R0,R0,R1, LSL #+4
   \   000001D8   0x900B             STR      R0,[SP, #+44]
   \   000001DA   0xE044             B.N      ??find_furthest_invalid_mesh_point_10
   \                     ??find_furthest_invalid_mesh_point_11: (+1)
   \   000001DC   0x4640             MOV      R0,R8
   \   000001DE   0x4649             MOV      R1,R9
   \   000001E0   0x4642             MOV      R2,R8
   \   000001E2   0x464B             MOV      R3,R9
   \   000001E4   0x.... 0x....      BL       __aeabi_dmul
   \   000001E8   0x4680             MOV      R8,R0
   \   000001EA   0x4689             MOV      R9,R1
   \                     ??find_furthest_invalid_mesh_point_12: (+1)
   \   000001EC   0x07F8             LSLS     R0,R7,#+31
   \   000001EE   0xD507             BPL.N    ??find_furthest_invalid_mesh_point_13
   \   000001F0   0x4642             MOV      R2,R8
   \   000001F2   0x464B             MOV      R3,R9
   \   000001F4   0x4628             MOV      R0,R5
   \   000001F6   0x4659             MOV      R1,R11
   \   000001F8   0x.... 0x....      BL       __aeabi_dmul
   \   000001FC   0x4605             MOV      R5,R0
   \   000001FE   0x468B             MOV      R11,R1
   \                     ??find_furthest_invalid_mesh_point_13: (+1)
   \   00000200   0x087F             LSRS     R7,R7,#+1
   \   00000202   0xD1EB             BNE.N    ??find_furthest_invalid_mesh_point_11
   \   00000204   0x462A             MOV      R2,R5
   \   00000206   0x465B             MOV      R3,R11
   \   00000208   0x4620             MOV      R0,R4
   \   0000020A   0x4651             MOV      R1,R10
   \   0000020C   0x.... 0x....      BL       __aeabi_dadd
   \   00000210   0x.... 0x....      BL       sqrt
   \   00000214   0x4604             MOV      R4,R0
   \   00000216   0x460F             MOV      R7,R1
   \   00000218   0x.... 0x....      BL       HAL_GetTick
   \   0000021C   0x212F             MOVS     R1,#+47
   \   0000021E   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \   00000222   0x222F             MOVS     R2,#+47
   \   00000224   0xFB02 0x0011      MLS      R0,R2,R1,R0
   \   00000228   0x300D             ADDS     R0,R0,#+13
   \   0000022A   0x.... 0x....      BL       __aeabi_ui2d
   \   0000022E   0x4602             MOV      R2,R0
   \   00000230   0x460B             MOV      R3,R1
   \   00000232   0x2000             MOVS     R0,#+0
   \   00000234   0x.... 0x....      LDR.W    R1,??DataTable87_13  ;; 0x3ff00000
   \   00000238   0x.... 0x....      BL       __aeabi_ddiv
   \   0000023C   0x4622             MOV      R2,R4
   \   0000023E   0x463B             MOV      R3,R7
   \   00000240   0x.... 0x....      BL       __aeabi_dadd
   \   00000244   0x.... 0x....      BL       __aeabi_d2f
   \   00000248   0x9908             LDR      R1,[SP, #+32]
   \   0000024A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000024E   0xD206             BCS.N    ??find_furthest_invalid_mesh_point_14
   \   00000250   0x9008             STR      R0,[SP, #+32]
   \   00000252   0x9805             LDR      R0,[SP, #+20]
   \   00000254   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000258   0x9803             LDR      R0,[SP, #+12]
   \   0000025A   0xF88D 0x0002      STRB     R0,[SP, #+2]
   \                     ??find_furthest_invalid_mesh_point_14: (+1)
   \   0000025E   0x9801             LDR      R0,[SP, #+4]
   \   00000260   0x1C40             ADDS     R0,R0,#+1
   \   00000262   0xB240             SXTB     R0,R0
   \   00000264   0x9001             STR      R0,[SP, #+4]
   \                     ??find_furthest_invalid_mesh_point_10: (+1)
   \   00000266   0x9904             LDR      R1,[SP, #+16]
   \   00000268   0x9801             LDR      R0,[SP, #+4]
   \   0000026A   0x7A49             LDRB     R1,[R1, #+9]
   \   0000026C   0x4288             CMP      R0,R1
   \   0000026E   0xDA9E             BGE.N    ??find_furthest_invalid_mesh_point_9
   \   00000270   0x990B             LDR      R1,[SP, #+44]
   \   00000272   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   00000276   0x.... 0x....      BL       __iar_FDtest
   \   0000027A   0x2802             CMP      R0,#+2
   \   0000027C   0xD0EF             BEQ.N    ??find_furthest_invalid_mesh_point_14
   \   0000027E   0x2001             MOVS     R0,#+1
   \   00000280   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   00000284   0x4630             MOV      R0,R6
   \   00000286   0x.... 0x....      BL       __aeabi_i2d
   \   0000028A   0x4680             MOV      R8,R0
   \   0000028C   0x4689             MOV      R9,R1
   \   0000028E   0x2702             MOVS     R7,#+2
   \   00000290   0x2400             MOVS     R4,#+0
   \   00000292   0x.... 0x....      LDR.W    R10,??DataTable87_13  ;; 0x3ff00000
   \   00000296   0xE007             B.N      ??find_furthest_invalid_mesh_point_15
   \                     ??find_furthest_invalid_mesh_point_16: (+1)
   \   00000298   0x4640             MOV      R0,R8
   \   0000029A   0x4649             MOV      R1,R9
   \   0000029C   0x4642             MOV      R2,R8
   \   0000029E   0x464B             MOV      R3,R9
   \   000002A0   0x.... 0x....      BL       __aeabi_dmul
   \   000002A4   0x4680             MOV      R8,R0
   \   000002A6   0x4689             MOV      R9,R1
   \                     ??find_furthest_invalid_mesh_point_15: (+1)
   \   000002A8   0x07F8             LSLS     R0,R7,#+31
   \   000002AA   0xD507             BPL.N    ??find_furthest_invalid_mesh_point_17
   \   000002AC   0x4642             MOV      R2,R8
   \   000002AE   0x464B             MOV      R3,R9
   \   000002B0   0x4620             MOV      R0,R4
   \   000002B2   0x4651             MOV      R1,R10
   \   000002B4   0x.... 0x....      BL       __aeabi_dmul
   \   000002B8   0x4604             MOV      R4,R0
   \   000002BA   0x468A             MOV      R10,R1
   \                     ??find_furthest_invalid_mesh_point_17: (+1)
   \   000002BC   0x087F             LSRS     R7,R7,#+1
   \   000002BE   0xD1EB             BNE.N    ??find_furthest_invalid_mesh_point_16
   \   000002C0   0x9803             LDR      R0,[SP, #+12]
   \   000002C2   0x9901             LDR      R1,[SP, #+4]
   \   000002C4   0x1A40             SUBS     R0,R0,R1
   \   000002C6   0x.... 0x....      BL       __aeabi_i2d
   \   000002CA   0x4680             MOV      R8,R0
   \   000002CC   0x4689             MOV      R9,R1
   \   000002CE   0x2702             MOVS     R7,#+2
   \   000002D0   0x2500             MOVS     R5,#+0
   \   000002D2   0x.... 0x....      LDR.W    R11,??DataTable87_13  ;; 0x3ff00000
   \   000002D6   0xE789             B.N      ??find_furthest_invalid_mesh_point_12
   1481                  }
   1482                } // for j
   1483              } // for i
   1484          
   1485              if (!found_a_real && found_a_NAN) {        // if the mesh is totally unpopulated, start the probing
   \                     ??find_furthest_invalid_mesh_point_2: (+1)
   \   000002D8   0xF89D 0x2003      LDRB     R2,[SP, #+3]
   \   000002DC   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   000002E0   0xF082 0x0201      EOR      R2,R2,#0x1
   \   000002E4   0x4311             ORRS     R1,R2,R1
   \   000002E6   0xD10A             BNE.N    ??find_furthest_invalid_mesh_point_18
   1486                out_mesh.x_index = GRID_MAX_POINTS_X / 2;
   \   000002E8   0x0840             LSRS     R0,R0,#+1
   \   000002EA   0xF88D 0x0018      STRB     R0,[SP, #+24]
   1487                out_mesh.y_index = GRID_MAX_POINTS_Y / 2;
   \   000002EE   0x9804             LDR      R0,[SP, #+16]
   \   000002F0   0x7A40             LDRB     R0,[R0, #+9]
   \   000002F2   0x0840             LSRS     R0,R0,#+1
   \   000002F4   0xF88D 0x0019      STRB     R0,[SP, #+25]
   1488                out_mesh.distance = 1.0;
   \   000002F8   0xF04F 0x507E      MOV      R0,#+1065353216
   \   000002FC   0x9007             STR      R0,[SP, #+28]
   1489              }
   1490              return out_mesh;
   \                     ??find_furthest_invalid_mesh_point_18: (+1)
   \   000002FE   0xE9DD 0x0106      LDRD     R0,R1,[SP, #+24]
   \   00000302   0x9A0E             LDR      R2,[SP, #+56]
   \   00000304   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
   \   00000308   0xB00F             ADD      SP,SP,#+60
   \   0000030A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1491            }
   1492          

   \                                 In section .text, align 2, keep-with-next
   1493            mesh_index_pair unified_bed_leveling::find_closest_mesh_point_of_type(const MeshPointType type, const float &rx, const float &ry, const bool probe_as_reference, /*uint16_t*/unsigned int bits[16]) {
   \                     _ZN20unified_bed_leveling31find_closest_mesh_point_of_typeE13MeshPointTypeRKfS2_bPj: (+1)
   \   00000000   0xE92D 0x4FF7      PUSH     {R0-R2,R4-R11,LR}
   \   00000004   0xB08A             SUB      SP,SP,#+40
   1494              mesh_index_pair out_mesh;
   1495              out_mesh.x_index = out_mesh.y_index = -1;
   \   00000006   0xF04F 0x30FF      MOV      R0,#-1
   \   0000000A   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   0000000E   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00000012   0x461C             MOV      R4,R3
   1496              out_mesh.distance = -99999.9;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable87_14  ;; 0xc7c34ff3
   \   00000018   0x9003             STR      R0,[SP, #+12]
   \   0000001A   0xF89D 0x0058      LDRB     R0,[SP, #+88]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xBF1A             ITTE     NE 
   \   00000022   0x.... 0x....      LDRNE.W  R0,??DataTable87_15
   \   00000026   0x68C1             LDRNE    R1,[R0, #+12]
   \   00000028   0x2100             MOVEQ    R1,#+0
   \   0000002A   0x980C             LDR      R0,[SP, #+48]
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x.... 0x....      BL       __aeabi_fsub
   \   00000032   0x9009             STR      R0,[SP, #+36]
   1497          
   1498              // Get our reference position. Either the nozzle or probe location.
   1499              const float px = rx - (probe_as_reference == USE_PROBE_AS_REFERENCE ? X_PROBE_OFFSET_FROM_EXTRUDER : 0),
   1500                          py = ry - (probe_as_reference == USE_PROBE_AS_REFERENCE ? Y_PROBE_OFFSET_FROM_EXTRUDER : 0);
   \   00000034   0xF89D 0x0058      LDRB     R0,[SP, #+88]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xBF1A             ITTE     NE 
   \   0000003C   0x.... 0x....      LDRNE.W  R0,??DataTable87_15
   \   00000040   0x6901             LDRNE    R1,[R0, #+16]
   \   00000042   0x2100             MOVEQ    R1,#+0
   \   00000044   0x6820             LDR      R0,[R4, #+0]
   \   00000046   0x.... 0x....      BL       __aeabi_fsub
   \   0000004A   0x9008             STR      R0,[SP, #+32]
   1501          
   1502              float best_so_far = 99999.99;
   1503          
   1504              for (int8_t i = 0; i < GRID_MAX_POINTS_X; i++) {
   \   0000004C   0x2400             MOVS     R4,#+0
   \   0000004E   0xF99D 0x002C      LDRSB    R0,[SP, #+44]
   \   00000052   0x.... 0x....      LDR.W    R9,??DataTable87_16  ;; 0x47c34fff
   \   00000056   0x9007             STR      R0,[SP, #+28]
   \   00000058   0xE001             B.N      ??find_closest_mesh_point_of_type_0
   \                     ??find_closest_mesh_point_of_type_1: (+1)
   \   0000005A   0x1C60             ADDS     R0,R4,#+1
   \   0000005C   0xB244             SXTB     R4,R0
   \                     ??find_closest_mesh_point_of_type_0: (+1)
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable87_4
   \   00000062   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   00000066   0x4284             CMP      R4,R0
   \   00000068   0xF280 0x8189      BGE.W    ??find_closest_mesh_point_of_type_2
   1505                for (int8_t j = 0; j < GRID_MAX_POINTS_Y; j++) {
   \   0000006C   0xEB04 0x0044      ADD      R0,R4,R4, LSL #+1
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable87_5
   \   00000074   0xEB01 0x1000      ADD      R0,R1,R0, LSL #+4
   \   00000078   0x2600             MOVS     R6,#+0
   \   0000007A   0x9006             STR      R0,[SP, #+24]
   \   0000007C   0xE033             B.N      ??find_closest_mesh_point_of_type_3
   1506          
   1507                  if ( (type == INVALID && isnan(z_values[i][j]))  // Check to see if this location holds the right thing
   1508                    || (type == REAL && !isnan(z_values[i][j]))
   1509                    || (type == SET_IN_BITMAP && is_bitmap_set(bits, i, j))
   1510                  ) {
   \                     ??find_closest_mesh_point_of_type_4: (+1)
   \   0000007E   0x4658             MOV      R0,R11
   \   00000080   0x4659             MOV      R1,R11
   \   00000082   0x.... 0x....      BL       __aeabi_fmul
   \   00000086   0x4683             MOV      R11,R0
   \                     ??find_closest_mesh_point_of_type_5: (+1)
   \   00000088   0x07E8             LSLS     R0,R5,#+31
   \   0000008A   0xD504             BPL.N    ??find_closest_mesh_point_of_type_6
   \   0000008C   0x4650             MOV      R0,R10
   \   0000008E   0x4659             MOV      R1,R11
   \   00000090   0x.... 0x....      BL       __aeabi_fmul
   \   00000094   0x4682             MOV      R10,R0
   \                     ??find_closest_mesh_point_of_type_6: (+1)
   \   00000096   0x086D             LSRS     R5,R5,#+1
   \   00000098   0xD1F1             BNE.N    ??find_closest_mesh_point_of_type_4
   1511                    // We only get here if we found a Mesh Point of the specified type
   1512          
   1513                    const float mx = mesh_index_to_xpos(i),
   1514                                my = mesh_index_to_ypos(j);
   1515          
   1516                    // If using the probe as the reference there are some unreachable locations.
   1517                    // Also for round beds, there are grid points outside the bed the nozzle can't reach.
   1518                    // Prune them from the list and ignore them till the next Phase (manual nozzle probing).
   1519                    if(MACHINETPYE & IS_KINEMATIC)
   1520                    {
   1521                      if (probe_as_reference ? !position_is_reachable_by_probe_IS_KINEMATIC(mx, my) : !position_is_reachable_IS_KINEMATIC(mx, my))
   1522                          continue;
   1523                    }
   1524                    else
   1525                    {
   1526                      if (probe_as_reference ? !position_is_reachable_by_probe_IS_CARTESIAN(mx, my) : !position_is_reachable_IS_CARTESIAN(mx, my))
   1527                          continue;    
   1528                     }
   1529          
   1530                    // Reachable. Check if it's the best_so_far location to the nozzle.
   1531          
   1532                    float distance = HYPOT(px - mx, py - my);
   1533          
   1534                    // factor in the distance from the current location for the normal case
   1535                    // so the nozzle isn't running all over the bed.
   1536                    distance += HYPOT(current_position[X_AXIS] - mx, current_position[Y_AXIS] - my) * 0.1;
   \   0000009A   0x4638             MOV      R0,R7
   \   0000009C   0x.... 0x....      BL       __aeabi_f2d
   \   000000A0   0x4607             MOV      R7,R0
   \   000000A2   0x460D             MOV      R5,R1
   \   000000A4   0x4640             MOV      R0,R8
   \   000000A6   0x4651             MOV      R1,R10
   \   000000A8   0x.... 0x....      BL       __aeabi_fadd
   \   000000AC   0x.... 0x....      BL       sqrtf
   \   000000B0   0x.... 0x....      BL       __aeabi_f2d
   \   000000B4   0x.... 0x....      LDR.W    R2,??DataTable87_17  ;; 0x9999999a
   \   000000B8   0x.... 0x....      LDR.W    R3,??DataTable87_18  ;; 0x3fb99999
   \   000000BC   0x.... 0x....      BL       __aeabi_dmul
   \   000000C0   0x463A             MOV      R2,R7
   \   000000C2   0x462B             MOV      R3,R5
   \   000000C4   0x.... 0x....      BL       __aeabi_dadd
   \   000000C8   0x.... 0x....      BL       __aeabi_d2f
   1537                    if (distance < best_so_far) {
   \   000000CC   0x4649             MOV      R1,R9
   \   000000CE   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000D2   0xD206             BCS.N    ??find_closest_mesh_point_of_type_7
   1538                      best_so_far = distance;   // We found a closer location with
   \   000000D4   0x4681             MOV      R9,R0
   1539                      out_mesh.x_index = i;     // the specified type of mesh value.
   \   000000D6   0xF88D 0x4008      STRB     R4,[SP, #+8]
   1540                      out_mesh.y_index = j;
   \   000000DA   0xF88D 0x6009      STRB     R6,[SP, #+9]
   1541                      out_mesh.distance = best_so_far;
   \   000000DE   0xF8CD 0x900C      STR      R9,[SP, #+12]
   1542                    }
   \                     ??find_closest_mesh_point_of_type_7: (+1)
   \   000000E2   0x1C76             ADDS     R6,R6,#+1
   \   000000E4   0xB276             SXTB     R6,R6
   \                     ??find_closest_mesh_point_of_type_3: (+1)
   \   000000E6   0x.... 0x....      LDR.W    R5,??DataTable87_15
   \   000000EA   0x7868             LDRB     R0,[R5, #+1]
   \   000000EC   0x4286             CMP      R6,R0
   \   000000EE   0xDAB4             BGE.N    ??find_closest_mesh_point_of_type_1
   \   000000F0   0xF99D 0x002C      LDRSB    R0,[SP, #+44]
   \   000000F4   0xB930             CBNZ.N   R0,??find_closest_mesh_point_of_type_8
   \   000000F6   0x9806             LDR      R0,[SP, #+24]
   \   000000F8   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000000FC   0x.... 0x....      BL       __iar_FDtest
   \   00000100   0x2802             CMP      R0,#+2
   \   00000102   0xD013             BEQ.N    ??find_closest_mesh_point_of_type_9
   \                     ??find_closest_mesh_point_of_type_8: (+1)
   \   00000104   0x9807             LDR      R0,[SP, #+28]
   \   00000106   0x2801             CMP      R0,#+1
   \   00000108   0xD107             BNE.N    ??find_closest_mesh_point_of_type_10
   \   0000010A   0x9806             LDR      R0,[SP, #+24]
   \   0000010C   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00000110   0x.... 0x....      BL       __iar_FDtest
   \   00000114   0x2802             CMP      R0,#+2
   \   00000116   0xD109             BNE.N    ??find_closest_mesh_point_of_type_9
   \   00000118   0xE7E3             B.N      ??find_closest_mesh_point_of_type_7
   \                     ??find_closest_mesh_point_of_type_10: (+1)
   \   0000011A   0x2802             CMP      R0,#+2
   \   0000011C   0xD1E1             BNE.N    ??find_closest_mesh_point_of_type_7
   \   0000011E   0x9917             LDR      R1,[SP, #+92]
   \   00000120   0xB2F0             UXTB     R0,R6
   \   00000122   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   00000126   0x40E0             LSRS     R0,R0,R4
   \   00000128   0x07C0             LSLS     R0,R0,#+31
   \   0000012A   0xD5DA             BPL.N    ??find_closest_mesh_point_of_type_7
   \                     ??find_closest_mesh_point_of_type_9: (+1)
   \   0000012C   0xB2E0             UXTB     R0,R4
   \   0000012E   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   00000132   0x9001             STR      R0,[SP, #+4]
   \   00000134   0xB2F0             UXTB     R0,R6
   \   00000136   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   0000013A   0x9000             STR      R0,[SP, #+0]
   \   0000013C   0xF240 0x3102      MOVW     R1,#+770
   \   00000140   0x.... 0x....      LDR.W    R7,??DataTable87_19
   \   00000144   0xF8B7 0x0050      LDRH     R0,[R7, #+80]
   \   00000148   0x4208             TST      R0,R1
   \   0000014A   0xD01F             BEQ.N    ??find_closest_mesh_point_of_type_11
   \   0000014C   0xF89D 0x0058      LDRB     R0,[SP, #+88]
   \   00000150   0x2800             CMP      R0,#+0
   \   00000152   0xA900             ADD      R1,SP,#+0
   \   00000154   0xA801             ADD      R0,SP,#+4
   \   00000156   0xD011             BEQ.N    ??find_closest_mesh_point_of_type_12
   \   00000158   0x.... 0x....      BL       _Z34position_is_reachable_IS_KINEMATICRKfS0_
   \   0000015C   0xB190             CBZ.N    R0,??find_closest_mesh_point_of_type_13
   \   0000015E   0x9801             LDR      R0,[SP, #+4]
   \   00000160   0x68E9             LDR      R1,[R5, #+12]
   \   00000162   0x.... 0x....      BL       __aeabi_fsub
   \   00000166   0x9004             STR      R0,[SP, #+16]
   \   00000168   0x6929             LDR      R1,[R5, #+16]
   \   0000016A   0x9800             LDR      R0,[SP, #+0]
   \   0000016C   0x.... 0x....      BL       __aeabi_fsub
   \   00000170   0x9005             STR      R0,[SP, #+20]
   \   00000172   0xA905             ADD      R1,SP,#+20
   \   00000174   0xA804             ADD      R0,SP,#+16
   \   00000176   0x.... 0x....      BL       _Z34position_is_reachable_IS_KINEMATICRKfS0_
   \   0000017A   0xE003             B.N      ??find_closest_mesh_point_of_type_13
   \                     ??find_closest_mesh_point_of_type_12: (+1)
   \   0000017C   0x.... 0x....      BL       _Z34position_is_reachable_IS_KINEMATICRKfS0_
   \   00000180   0xF000 0x0001      AND      R0,R0,#0x1
   \                     ??find_closest_mesh_point_of_type_13: (+1)
   \   00000184   0xF090 0x0001      EORS     R0,R0,#0x1
   \   00000188   0xD1AB             BNE.N    ??find_closest_mesh_point_of_type_7
   \   0000018A   0xE09F             B.N      ??find_closest_mesh_point_of_type_14
   \                     ??find_closest_mesh_point_of_type_11: (+1)
   \   0000018C   0x9801             LDR      R0,[SP, #+4]
   \   0000018E   0x.... 0x....      BL       __aeabi_f2d
   \   00000192   0x4605             MOV      R5,R0
   \   00000194   0xF89D 0x0058      LDRB     R0,[SP, #+88]
   \   00000198   0x468A             MOV      R10,R1
   \   0000019A   0x2800             CMP      R0,#+0
   \   0000019C   0xD04C             BEQ.N    ??find_closest_mesh_point_of_type_15
   \   0000019E   0x.... 0x....      LDR.W    R0,??DataTable87_8
   \   000001A2   0x6800             LDR      R0,[R0, #+0]
   \   000001A4   0x.... 0x....      BL       __aeabi_f2d
   \   000001A8   0x.... 0x....      LDR.W    R2,??DataTable87_9  ;; 0xd2f1a9fc
   \   000001AC   0x.... 0x....      LDR.W    R3,??DataTable87_10  ;; 0xbf50624d
   \   000001B0   0x.... 0x....      BL       __aeabi_dadd
   \   000001B4   0x4602             MOV      R2,R0
   \   000001B6   0x460B             MOV      R3,R1
   \   000001B8   0x4628             MOV      R0,R5
   \   000001BA   0x4651             MOV      R1,R10
   \   000001BC   0x.... 0x....      BL       __aeabi_cdrcmple
   \   000001C0   0xD838             BHI.N    ??find_closest_mesh_point_of_type_16
   \   000001C2   0x.... 0x....      LDR.W    R0,??DataTable87_8
   \   000001C6   0x6840             LDR      R0,[R0, #+4]
   \   000001C8   0x.... 0x....      BL       __aeabi_f2d
   \   000001CC   0x.... 0x....      LDR.W    R2,??DataTable87_9  ;; 0xd2f1a9fc
   \   000001D0   0x.... 0x....      LDR.W    R3,??DataTable87_11  ;; 0x3f50624d
   \   000001D4   0x.... 0x....      BL       __aeabi_dadd
   \   000001D8   0x462A             MOV      R2,R5
   \   000001DA   0x4653             MOV      R3,R10
   \   000001DC   0x.... 0x....      BL       __aeabi_cdrcmple
   \   000001E0   0xD828             BHI.N    ??find_closest_mesh_point_of_type_16
   \   000001E2   0x9800             LDR      R0,[SP, #+0]
   \   000001E4   0x.... 0x....      BL       __aeabi_f2d
   \   000001E8   0x4607             MOV      R7,R0
   \   000001EA   0x.... 0x....      LDR.W    R0,??DataTable87_8
   \   000001EE   0x6880             LDR      R0,[R0, #+8]
   \   000001F0   0x460D             MOV      R5,R1
   \   000001F2   0x.... 0x....      BL       __aeabi_f2d
   \   000001F6   0x.... 0x....      LDR.W    R2,??DataTable87_9  ;; 0xd2f1a9fc
   \   000001FA   0x.... 0x....      LDR.W    R3,??DataTable87_10  ;; 0xbf50624d
   \   000001FE   0x.... 0x....      BL       __aeabi_dadd
   \   00000202   0x4602             MOV      R2,R0
   \   00000204   0x460B             MOV      R3,R1
   \   00000206   0x4638             MOV      R0,R7
   \   00000208   0x4629             MOV      R1,R5
   \   0000020A   0x.... 0x....      BL       __aeabi_cdrcmple
   \   0000020E   0xD811             BHI.N    ??find_closest_mesh_point_of_type_16
   \   00000210   0x.... 0x....      LDR.W    R0,??DataTable87_8
   \   00000214   0x68C0             LDR      R0,[R0, #+12]
   \   00000216   0x.... 0x....      BL       __aeabi_f2d
   \   0000021A   0x.... 0x....      LDR.W    R2,??DataTable87_9  ;; 0xd2f1a9fc
   \   0000021E   0x.... 0x....      LDR.W    R3,??DataTable87_11  ;; 0x3f50624d
   \   00000222   0x.... 0x....      BL       __aeabi_dadd
   \   00000226   0x463A             MOV      R2,R7
   \   00000228   0x462B             MOV      R3,R5
   \   0000022A   0x.... 0x....      BL       __aeabi_cdrcmple
   \   0000022E   0xBF98             IT       LS 
   \   00000230   0x2001             MOVLS    R0,#+1
   \   00000232   0xD947             BLS.N    ??find_closest_mesh_point_of_type_17
   \                     ??find_closest_mesh_point_of_type_16: (+1)
   \   00000234   0x2000             MOVS     R0,#+0
   \   00000236   0xE045             B.N      ??find_closest_mesh_point_of_type_17
   \                     ??find_closest_mesh_point_of_type_15: (+1)
   \   00000238   0x.... 0x....      LDR.W    R0,??DataTable87_4
   \   0000023C   0x6880             LDR      R0,[R0, #+8]
   \   0000023E   0x.... 0x....      BL       __aeabi_f2d
   \   00000242   0x.... 0x....      LDR.W    R2,??DataTable87_9  ;; 0xd2f1a9fc
   \   00000246   0x.... 0x....      LDR.W    R3,??DataTable87_10  ;; 0xbf50624d
   \   0000024A   0x.... 0x....      BL       __aeabi_dadd
   \   0000024E   0x4602             MOV      R2,R0
   \   00000250   0x460B             MOV      R3,R1
   \   00000252   0x4628             MOV      R0,R5
   \   00000254   0x4651             MOV      R1,R10
   \   00000256   0x.... 0x....      BL       __aeabi_cdrcmple
   \   0000025A   0xD832             BHI.N    ??find_closest_mesh_point_of_type_18
   \   0000025C   0x68F8             LDR      R0,[R7, #+12]
   \   0000025E   0x.... 0x....      BL       __aeabi_f2d
   \   00000262   0x.... 0x....      LDR.W    R2,??DataTable87_9  ;; 0xd2f1a9fc
   \   00000266   0x.... 0x....      LDR.W    R3,??DataTable87_11  ;; 0x3f50624d
   \   0000026A   0x.... 0x....      BL       __aeabi_dadd
   \   0000026E   0x462A             MOV      R2,R5
   \   00000270   0x4653             MOV      R3,R10
   \   00000272   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000276   0xD824             BHI.N    ??find_closest_mesh_point_of_type_18
   \   00000278   0x9800             LDR      R0,[SP, #+0]
   \   0000027A   0x.... 0x....      BL       __aeabi_f2d
   \   0000027E   0x4605             MOV      R5,R0
   \   00000280   0x6878             LDR      R0,[R7, #+4]
   \   00000282   0x468A             MOV      R10,R1
   \   00000284   0x.... 0x....      BL       __aeabi_f2d
   \   00000288   0x.... 0x....      LDR.W    R2,??DataTable87_9  ;; 0xd2f1a9fc
   \   0000028C   0x.... 0x....      LDR.W    R3,??DataTable87_10  ;; 0xbf50624d
   \   00000290   0x.... 0x....      BL       __aeabi_dadd
   \   00000294   0x4602             MOV      R2,R0
   \   00000296   0x460B             MOV      R3,R1
   \   00000298   0x4628             MOV      R0,R5
   \   0000029A   0x4651             MOV      R1,R10
   \   0000029C   0x.... 0x....      BL       __aeabi_cdrcmple
   \   000002A0   0xD80F             BHI.N    ??find_closest_mesh_point_of_type_18
   \   000002A2   0x6938             LDR      R0,[R7, #+16]
   \   000002A4   0x.... 0x....      BL       __aeabi_f2d
   \   000002A8   0x.... 0x....      LDR.W    R2,??DataTable87_9  ;; 0xd2f1a9fc
   \   000002AC   0x.... 0x....      LDR.W    R3,??DataTable87_11  ;; 0x3f50624d
   \   000002B0   0x.... 0x....      BL       __aeabi_dadd
   \   000002B4   0x462A             MOV      R2,R5
   \   000002B6   0x4653             MOV      R3,R10
   \   000002B8   0x.... 0x....      BL       __aeabi_cdrcmple
   \   000002BC   0xBF98             IT       LS 
   \   000002BE   0x2001             MOVLS    R0,#+1
   \   000002C0   0xD900             BLS.N    ??find_closest_mesh_point_of_type_17
   \                     ??find_closest_mesh_point_of_type_18: (+1)
   \   000002C2   0x2000             MOVS     R0,#+0
   \                     ??find_closest_mesh_point_of_type_17: (+1)
   \   000002C4   0xF090 0x0001      EORS     R0,R0,#0x1
   \   000002C8   0xF47F 0xAF0B      BNE.W    ??find_closest_mesh_point_of_type_7
   \                     ??find_closest_mesh_point_of_type_14: (+1)
   \   000002CC   0x9809             LDR      R0,[SP, #+36]
   \   000002CE   0x9901             LDR      R1,[SP, #+4]
   \   000002D0   0x.... 0x....      BL       __aeabi_fsub
   \   000002D4   0x4682             MOV      R10,R0
   \   000002D6   0x2702             MOVS     R7,#+2
   \   000002D8   0xF04F 0x587E      MOV      R8,#+1065353216
   \   000002DC   0xE004             B.N      ??find_closest_mesh_point_of_type_19
   \                     ??find_closest_mesh_point_of_type_20: (+1)
   \   000002DE   0x4650             MOV      R0,R10
   \   000002E0   0x4651             MOV      R1,R10
   \   000002E2   0x.... 0x....      BL       __aeabi_fmul
   \   000002E6   0x4682             MOV      R10,R0
   \                     ??find_closest_mesh_point_of_type_19: (+1)
   \   000002E8   0x07F8             LSLS     R0,R7,#+31
   \   000002EA   0xD504             BPL.N    ??find_closest_mesh_point_of_type_21
   \   000002EC   0x4640             MOV      R0,R8
   \   000002EE   0x4651             MOV      R1,R10
   \   000002F0   0x.... 0x....      BL       __aeabi_fmul
   \   000002F4   0x4680             MOV      R8,R0
   \                     ??find_closest_mesh_point_of_type_21: (+1)
   \   000002F6   0x087F             LSRS     R7,R7,#+1
   \   000002F8   0xD1F1             BNE.N    ??find_closest_mesh_point_of_type_20
   \   000002FA   0x9808             LDR      R0,[SP, #+32]
   \   000002FC   0x9900             LDR      R1,[SP, #+0]
   \   000002FE   0x.... 0x....      BL       __aeabi_fsub
   \   00000302   0x4682             MOV      R10,R0
   \   00000304   0x2702             MOVS     R7,#+2
   \   00000306   0xF04F 0x557E      MOV      R5,#+1065353216
   \   0000030A   0xE004             B.N      ??find_closest_mesh_point_of_type_22
   \                     ??find_closest_mesh_point_of_type_23: (+1)
   \   0000030C   0x4650             MOV      R0,R10
   \   0000030E   0x4651             MOV      R1,R10
   \   00000310   0x.... 0x....      BL       __aeabi_fmul
   \   00000314   0x4682             MOV      R10,R0
   \                     ??find_closest_mesh_point_of_type_22: (+1)
   \   00000316   0x07F8             LSLS     R0,R7,#+31
   \   00000318   0xD504             BPL.N    ??find_closest_mesh_point_of_type_24
   \   0000031A   0x4628             MOV      R0,R5
   \   0000031C   0x4651             MOV      R1,R10
   \   0000031E   0x.... 0x....      BL       __aeabi_fmul
   \   00000322   0x4605             MOV      R5,R0
   \                     ??find_closest_mesh_point_of_type_24: (+1)
   \   00000324   0x087F             LSRS     R7,R7,#+1
   \   00000326   0xD1F1             BNE.N    ??find_closest_mesh_point_of_type_23
   \   00000328   0x4640             MOV      R0,R8
   \   0000032A   0x4629             MOV      R1,R5
   \   0000032C   0x.... 0x....      BL       __aeabi_fadd
   \   00000330   0x.... 0x....      BL       sqrtf
   \   00000334   0x4607             MOV      R7,R0
   \   00000336   0x.... 0x....      LDR.W    R0,??DataTable88
   \   0000033A   0x9901             LDR      R1,[SP, #+4]
   \   0000033C   0x6800             LDR      R0,[R0, #+0]
   \   0000033E   0x.... 0x....      BL       __aeabi_fsub
   \   00000342   0x4682             MOV      R10,R0
   \   00000344   0x2502             MOVS     R5,#+2
   \   00000346   0xF04F 0x587E      MOV      R8,#+1065353216
   \   0000034A   0xE004             B.N      ??find_closest_mesh_point_of_type_25
   \                     ??find_closest_mesh_point_of_type_26: (+1)
   \   0000034C   0x4650             MOV      R0,R10
   \   0000034E   0x4651             MOV      R1,R10
   \   00000350   0x.... 0x....      BL       __aeabi_fmul
   \   00000354   0x4682             MOV      R10,R0
   \                     ??find_closest_mesh_point_of_type_25: (+1)
   \   00000356   0x07E8             LSLS     R0,R5,#+31
   \   00000358   0xD504             BPL.N    ??find_closest_mesh_point_of_type_27
   \   0000035A   0x4640             MOV      R0,R8
   \   0000035C   0x4651             MOV      R1,R10
   \   0000035E   0x.... 0x....      BL       __aeabi_fmul
   \   00000362   0x4680             MOV      R8,R0
   \                     ??find_closest_mesh_point_of_type_27: (+1)
   \   00000364   0x086D             LSRS     R5,R5,#+1
   \   00000366   0xD1F1             BNE.N    ??find_closest_mesh_point_of_type_26
   \   00000368   0x.... 0x....      LDR.W    R0,??DataTable88
   \   0000036C   0x9900             LDR      R1,[SP, #+0]
   \   0000036E   0x6840             LDR      R0,[R0, #+4]
   \   00000370   0x.... 0x....      BL       __aeabi_fsub
   \   00000374   0x4683             MOV      R11,R0
   \   00000376   0x2502             MOVS     R5,#+2
   \   00000378   0xF04F 0x5A7E      MOV      R10,#+1065353216
   \   0000037C   0xE684             B.N      ??find_closest_mesh_point_of_type_5
   1543                  }
   1544                } // for j
   1545              } // for i
   1546          
   1547              return out_mesh;
   \                     ??find_closest_mesh_point_of_type_2: (+1)
   \   0000037E   0xE9DD 0x0102      LDRD     R0,R1,[SP, #+8]
   \   00000382   0x9A0A             LDR      R2,[SP, #+40]
   \   00000384   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
   \   00000388   0xB00D             ADD      SP,SP,#+52
   \   0000038A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1548            }
   1549          
   1550            #if ENABLED(NEWPANEL)
   1551          
   1552              void abort_fine_tune() {
   1553                lcd_return_to_status();
   1554                do_blocking_move_to_z(Z_CLEARANCE_BETWEEN_PROBES);
   1555                LCD_MESSAGEPGM(MSG_EDITING_STOPPED);
   1556              }
   1557          
   1558              void unified_bed_leveling::fine_tune_mesh(const float &rx, const float &ry, const bool do_ubl_mesh_map) {
   1559                if (!parser.seen('R'))    // fine_tune_mesh() is special. If no repetition count flag is specified
   1560                  g29_repetition_cnt = 1;   // do exactly one mesh location. Otherwise use what the parser decided.
   1561          
   1562                #if ENABLED(UBL_MESH_EDIT_MOVES_Z)
   1563                  const bool is_offset = parser.seen('H');
   1564                  const float h_offset = is_offset ? parser.value_linear_units() : Z_CLEARANCE_BETWEEN_PROBES;
   1565                  if (is_offset && !WITHIN(h_offset, 0, 10)) {
   1566                    SERIAL_PROTOCOLLNPGM("Offset out of bounds. (0 to 10mm)\n");
   1567                    return;
   1568                  }
   1569                #endif
   1570          
   1571                mesh_index_pair location;
   1572          
   1573                if (!position_is_reachable(rx, ry)) {
   1574                  SERIAL_PROTOCOLLNPGM("(X,Y) outside printable radius.");
   1575                  return;
   1576                }
   1577          
   1578                save_ubl_active_state_and_disable();
   1579          
   1580                LCD_MESSAGEPGM(MSG_UBL_FINE_TUNE_MESH);
   1581          
   1582                do_blocking_move_to(rx, ry, Z_CLEARANCE_BETWEEN_PROBES);
   1583          
   1584                //uint16_t not_done[16];
   1585          	  unsigned int not_done[16];
   1586                memset(not_done, 0xFF, sizeof(not_done));
   1587                do {
   1588                  location = find_closest_mesh_point_of_type(SET_IN_BITMAP, rx, ry, USE_NOZZLE_AS_REFERENCE, not_done);
   1589          
   1590                  if (location.x_index < 0) break; // stop when we can't find any more reachable points.
   1591          
   1592                  bitmap_clear(not_done, location.x_index, location.y_index); // Mark this location as 'adjusted' so we will find a
   1593                                                                              // different location the next time through the loop
   1594          
   1595                  const float rawx = mesh_index_to_xpos(location.x_index),
   1596                              rawy = mesh_index_to_ypos(location.y_index);
   1597          
   1598                  if (!position_is_reachable(rawx, rawy)) // SHOULD NOT OCCUR because find_closest_mesh_point_of_type will only return reachable
   1599                    break;
   1600          
   1601                  do_blocking_move_to(rawx, rawy, Z_CLEARANCE_BETWEEN_PROBES); // Move the nozzle to the edit point
   1602          
   1603                  KEEPALIVE_STATE(PAUSED_FOR_USER);
   1604                  lcd_external_control = true;
   1605          
   1606                  if (do_ubl_mesh_map) display_map(g29_map_type);  // show the user which point is being adjusted
   1607          
   1608                  lcd_refresh();
   1609          
   1610                  float new_z = z_values[location.x_index][location.y_index];
   1611                  if (isnan(new_z)) new_z = 0.0;          // Set invalid mesh points to 0.0 so they can be edited
   1612                  new_z = FLOOR(new_z * 1000.0) * 0.001;  // Chop off digits after the 1000ths place
   1613          
   1614                  lcd_mesh_edit_setup(new_z);
   1615          
   1616                  while (!is_lcd_clicked()) {
   1617                    new_z = lcd_mesh_edit();
   1618                    #if ENABLED(UBL_MESH_EDIT_MOVES_Z)
   1619                      do_blocking_move_to_z(h_offset + new_z); // Move the nozzle as the point is edited
   1620                    #endif
   1621                    idle();
   1622                  }
   1623          
   1624                  if (!lcd_map_control) lcd_return_to_status();
   1625          
   1626                  // The technique used here generates a race condition for the encoder click.
   1627                  // It could get detected in lcd_mesh_edit (actually _lcd_mesh_fine_tune) or here.
   1628                  // Let's work on specifying a proper API for the LCD ASAP, OK?
   1629                  lcd_external_control = true;
   1630          
   1631                  // this sequence to detect an is_lcd_clicked() debounce it and leave if it is
   1632                  // a Press and Hold is repeated in a lot of places (including G26_Mesh_Validation.cpp).   This
   1633                  // should be redone and compressed.
   1634                  if (click_and_hold(abort_fine_tune))
   1635                    goto FINE_TUNE_EXIT;
   1636          
   1637                  safe_delay(20);                       // We don't want any switch noise.
   1638          
   1639                  z_values[location.x_index][location.y_index] = new_z;
   1640          
   1641                  lcd_refresh();
   1642          
   1643                } while (location.x_index >= 0 && --g29_repetition_cnt > 0);
   1644          
   1645                FINE_TUNE_EXIT:
   1646          
   1647                lcd_external_control = false;
   1648                KEEPALIVE_STATE(IN_HANDLER);
   1649          
   1650                if (do_ubl_mesh_map) display_map(g29_map_type);
   1651                restore_ubl_active_state_and_leave();
   1652          
   1653                do_blocking_move_to(rx, ry, Z_CLEARANCE_BETWEEN_PROBES);
   1654          
   1655                LCD_MESSAGEPGM(MSG_UBL_DONE_EDITING_MESH);
   1656                SERIAL_ECHOLNPGM("Done Editing Mesh");
   1657          
   1658                if (lcd_map_control)
   1659                  lcd_goto_screen(_lcd_ubl_output_map_lcd);
   1660                else
   1661                  lcd_return_to_status();
   1662              }
   1663          
   1664            #endif // NEWPANEL
   1665          
   1666            /**
   1667             * 'Smart Fill': Scan from the outward edges of the mesh towards the center.
   1668             * If an invalid location is found, use the next two points (if valid) to
   1669             * calculate a 'reasonable' value for the unprobed mesh point.
   1670             */
   1671          

   \                                 In section .text, align 2, keep-with-next
   1672            bool unified_bed_leveling::smart_fill_one(const uint8_t x, const uint8_t y, const int8_t xdir, const int8_t ydir) {
   \                     _ZN20unified_bed_leveling14smart_fill_oneEhhaa: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   1673              const int8_t x1 = x + xdir, x2 = x1 + xdir,
   \   00000004   0x1814             ADDS     R4,R2,R0
   \   00000006   0xFA4F 0xF984      SXTB     R9,R4
   \   0000000A   0xEB02 0x0709      ADD      R7,R2,R9
   1674                           y1 = y + ydir, y2 = y1 + ydir;
   \   0000000E   0x185A             ADDS     R2,R3,R1
   \   00000010   0xB256             SXTB     R6,R2
   1675              // A NAN next to a pair of real values?
   1676              if (isnan(z_values[x][y]) && !isnan(z_values[x1][y1]) && !isnan(z_values[x2][y2])) {
   \   00000012   0x.... 0x....      LDR.W    R10,??DataTable88_1
   \   00000016   0xEB00 0x0240      ADD      R2,R0,R0, LSL #+1
   \   0000001A   0xEB0A 0x1802      ADD      R8,R10,R2, LSL #+4
   \   0000001E   0x460C             MOV      R4,R1
   \   00000020   0x199D             ADDS     R5,R3,R6
   \   00000022   0xF858 0x0024      LDR      R0,[R8, R4, LSL #+2]
   \   00000026   0xB27F             SXTB     R7,R7
   \   00000028   0xB26D             SXTB     R5,R5
   \   0000002A   0x.... 0x....      BL       __iar_FDtest
   \   0000002E   0x2802             CMP      R0,#+2
   \   00000030   0xD138             BNE.N    ??smart_fill_one_0
   \   00000032   0xEB09 0x0049      ADD      R0,R9,R9, LSL #+1
   \   00000036   0xEB0A 0x1900      ADD      R9,R10,R0, LSL #+4
   \   0000003A   0xF859 0x0026      LDR      R0,[R9, R6, LSL #+2]
   \   0000003E   0x.... 0x....      BL       __iar_FDtest
   \   00000042   0x2802             CMP      R0,#+2
   \   00000044   0xD02E             BEQ.N    ??smart_fill_one_0
   \   00000046   0xEB07 0x0047      ADD      R0,R7,R7, LSL #+1
   \   0000004A   0xEB0A 0x1700      ADD      R7,R10,R0, LSL #+4
   \   0000004E   0xF857 0x0025      LDR      R0,[R7, R5, LSL #+2]
   \   00000052   0x.... 0x....      BL       __iar_FDtest
   \   00000056   0x2802             CMP      R0,#+2
   \   00000058   0xD024             BEQ.N    ??smart_fill_one_0
   1677                if (z_values[x1][y1] < z_values[x2][y2])                  // Angled downward?
   \   0000005A   0xF859 0x2026      LDR      R2,[R9, R6, LSL #+2]
   \   0000005E   0xF857 0x1025      LDR      R1,[R7, R5, LSL #+2]
   \   00000062   0x4610             MOV      R0,R2
   \   00000064   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000068   0xBF38             IT       CC 
   1678                  z_values[x][y] = z_values[x1][y1];                      // Use nearest (maybe a little too high.)
   \   0000006A   0xF848 0x2024      STRCC    R2,[R8, R4, LSL #+2]
   \   0000006E   0xD316             BCC.N    ??smart_fill_one_1
   1679                else
   1680                  z_values[x][y] = 2.0 * z_values[x1][y1] - z_values[x2][y2];   // Angled upward...
   \   00000070   0x.... 0x....      BL       __aeabi_f2d
   \   00000074   0x2200             MOVS     R2,#+0
   \   00000076   0xF04F 0x4380      MOV      R3,#+1073741824
   \   0000007A   0x.... 0x....      BL       __aeabi_dmul
   \   0000007E   0x4606             MOV      R6,R0
   \   00000080   0xF857 0x0025      LDR      R0,[R7, R5, LSL #+2]
   \   00000084   0x4689             MOV      R9,R1
   \   00000086   0x.... 0x....      BL       __aeabi_f2d
   \   0000008A   0x4602             MOV      R2,R0
   \   0000008C   0x460B             MOV      R3,R1
   \   0000008E   0x4630             MOV      R0,R6
   \   00000090   0x4649             MOV      R1,R9
   \   00000092   0x.... 0x....      BL       __aeabi_dsub
   \   00000096   0x.... 0x....      BL       __aeabi_d2f
   \   0000009A   0xF848 0x0024      STR      R0,[R8, R4, LSL #+2]
   1681                return true;
   \                     ??smart_fill_one_1: (+1)
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0xE8BD 0x87F0      POP      {R4-R10,PC}
   1682              }
   1683              return false;
   \                     ??smart_fill_one_0: (+1)
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   1684            }
   1685          
   1686            typedef struct { uint8_t sx, ex, sy, ey; bool yfirst; } smart_fill_info;
   1687          

   \                                 In section .text, align 2, keep-with-next
   1688            void unified_bed_leveling::smart_fill_mesh() {
   \                     _ZN20unified_bed_leveling15smart_fill_meshEv: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable88_2
   \   00000008   0x7D01             LDRB     R1,[R0, #+20]
   \   0000000A   0xB087             SUB      SP,SP,#+28
   \   0000000C   0xB9D9             CBNZ.N   R1,??smart_fill_mesh_0
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x7501             STRB     R1,[R0, #+20]
   1689              /*
   1690              static const smart_fill_info
   1691                info0 PROGMEM = { 0, GRID_MAX_POINTS_X,      0, GRID_MAX_POINTS_Y - 2,  false },  // Bottom of the mesh looking up
   1692                info1 PROGMEM = { 0, GRID_MAX_POINTS_X,      GRID_MAX_POINTS_Y - 1, 0,  false },  // Top of the mesh looking down
   1693                info2 PROGMEM = { 0, GRID_MAX_POINTS_X - 2,  0, GRID_MAX_POINTS_Y,      true  },  // Left side of the mesh looking right
   1694                info3 PROGMEM = { GRID_MAX_POINTS_X - 1, 0,  0, GRID_MAX_POINTS_Y,      true  };  // Right side of the mesh looking left
   1695              static const smart_fill_info * const info[] PROGMEM = { &info0, &info1, &info2, &info3 };
   1696          */
   1697              static const smart_fill_info info[]=
   \   00000012   0x....             LDR.N    R1,??DataTable87_4
   \   00000014   0xF891 0x2060      LDRB     R2,[R1, #+96]
   \   00000018   0x7042             STRB     R2,[R0, #+1]
   \   0000001A   0xF101 0x0260      ADD      R2,R1,#+96
   \   0000001E   0x7853             LDRB     R3,[R2, #+1]
   \   00000020   0x1E9B             SUBS     R3,R3,#+2
   \   00000022   0x70C3             STRB     R3,[R0, #+3]
   \   00000024   0xF891 0x3060      LDRB     R3,[R1, #+96]
   \   00000028   0x7183             STRB     R3,[R0, #+6]
   \   0000002A   0x7853             LDRB     R3,[R2, #+1]
   \   0000002C   0x1E5B             SUBS     R3,R3,#+1
   \   0000002E   0x71C3             STRB     R3,[R0, #+7]
   \   00000030   0xF891 0x3060      LDRB     R3,[R1, #+96]
   \   00000034   0xF891 0x1060      LDRB     R1,[R1, #+96]
   \   00000038   0x1E9B             SUBS     R3,R3,#+2
   \   0000003A   0x72C3             STRB     R3,[R0, #+11]
   \   0000003C   0x1E49             SUBS     R1,R1,#+1
   \   0000003E   0x7853             LDRB     R3,[R2, #+1]
   \   00000040   0x7343             STRB     R3,[R0, #+13]
   \   00000042   0x73C1             STRB     R1,[R0, #+15]
   \   00000044   0x7483             STRB     R3,[R0, #+18]
   1698              {
   1699                { 0, GRID_MAX_POINTS_X,      0, GRID_MAX_POINTS_Y - 2,  false }, 
   1700                { 0, GRID_MAX_POINTS_X,      GRID_MAX_POINTS_Y - 1, 0,  false },
   1701                { 0, GRID_MAX_POINTS_X - 2,  0, GRID_MAX_POINTS_Y,      true  },
   1702                { GRID_MAX_POINTS_X - 1, 0,  0, GRID_MAX_POINTS_Y,      true  }
   1703              };
   1704              
   1705          
   1706              for (uint8_t i = 0; i < COUNT(info); ++i) {
   \                     ??smart_fill_mesh_0: (+1)
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0xF88D 0x1018      STRB     R1,[SP, #+24]
   \   0000004C   0x9001             STR      R0,[SP, #+4]
   1707                const smart_fill_info *f = &info[i];//(smart_fill_info*)pgm_read_ptr(&info[i]);
   1708                const int8_t sx = pgm_read_byte(&f->sx), sy = pgm_read_byte(&f->sy),
   \                     ??smart_fill_mesh_1: (+1)
   \   0000004E   0x9801             LDR      R0,[SP, #+4]
   \   00000050   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   00000054   0x9005             STR      R0,[SP, #+20]
   \   00000056   0x9801             LDR      R0,[SP, #+4]
   \   00000058   0xF990 0x0002      LDRSB    R0,[R0, #+2]
   \   0000005C   0x9004             STR      R0,[SP, #+16]
   1709                             ex = pgm_read_byte(&f->ex), ey = pgm_read_byte(&f->ey);
   \   0000005E   0x9801             LDR      R0,[SP, #+4]
   \   00000060   0xF990 0x0001      LDRSB    R0,[R0, #+1]
   \   00000064   0x9003             STR      R0,[SP, #+12]
   \   00000066   0x9801             LDR      R0,[SP, #+4]
   \   00000068   0xF990 0x0003      LDRSB    R0,[R0, #+3]
   \   0000006C   0x9002             STR      R0,[SP, #+8]
   1710                if (pgm_read_byte(&f->yfirst)) {
   \   0000006E   0x9801             LDR      R0,[SP, #+4]
   \   00000070   0x7900             LDRB     R0,[R0, #+4]
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD06E             BEQ.N    ??smart_fill_mesh_2
   1711                  const int8_t dir = ex > sx ? 1 : -1;
   \   00000076   0xA805             ADD      R0,SP,#+20
   \   00000078   0x9903             LDR      R1,[SP, #+12]
   \   0000007A   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   0000007E   0x4288             CMP      R0,R1
   \   00000080   0xBFB4             ITE      LT 
   \   00000082   0x2401             MOVLT    R4,#+1
   \   00000084   0xF04F 0x34FF      MOVGE    R4,#-1
   1712                  for (uint8_t y = sy; y != ey; ++y)
   \   00000088   0x9D04             LDR      R5,[SP, #+16]
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable88_1
   \   0000008E   0xB2ED             UXTB     R5,R5
   \   00000090   0xEB00 0x0085      ADD      R0,R0,R5, LSL #+2
   \   00000094   0xE01B             B.N      ??smart_fill_mesh_3
   1713                    for (uint8_t x = sx; x != ex; x += dir)
   1714                      if (smart_fill_one(x, y, dir, 0)) break;
   \                     ??smart_fill_mesh_4: (+1)
   \   00000096   0x.... 0x....      BL       __aeabi_f2d
   \   0000009A   0x2200             MOVS     R2,#+0
   \   0000009C   0xF04F 0x4380      MOV      R3,#+1073741824
   \   000000A0   0x.... 0x....      BL       __aeabi_dmul
   \   000000A4   0x4607             MOV      R7,R0
   \   000000A6   0xF856 0x0008      LDR      R0,[R6, R8]
   \   000000AA   0x468B             MOV      R11,R1
   \   000000AC   0x.... 0x....      BL       __aeabi_f2d
   \   000000B0   0x4602             MOV      R2,R0
   \   000000B2   0x460B             MOV      R3,R1
   \   000000B4   0x4638             MOV      R0,R7
   \   000000B6   0x4659             MOV      R1,R11
   \   000000B8   0x.... 0x....      BL       __aeabi_dsub
   \   000000BC   0x.... 0x....      BL       __aeabi_d2f
   \   000000C0   0x4602             MOV      R2,R0
   \                     ??smart_fill_mesh_5: (+1)
   \   000000C2   0x9800             LDR      R0,[SP, #+0]
   \   000000C4   0xF849 0x2000      STR      R2,[R9, R0]
   \                     ??smart_fill_mesh_6: (+1)
   \   000000C8   0x1C6D             ADDS     R5,R5,#+1
   \   000000CA   0x9800             LDR      R0,[SP, #+0]
   \   000000CC   0x1D00             ADDS     R0,R0,#+4
   \                     ??smart_fill_mesh_3: (+1)
   \   000000CE   0x9000             STR      R0,[SP, #+0]
   \   000000D0   0xB2ED             UXTB     R5,R5
   \   000000D2   0x9802             LDR      R0,[SP, #+8]
   \   000000D4   0x4285             CMP      R5,R0
   \   000000D6   0xF000 0x80A7      BEQ.W    ??smart_fill_mesh_7
   \   000000DA   0x9F05             LDR      R7,[SP, #+20]
   \   000000DC   0xE000             B.N      ??smart_fill_mesh_8
   \                     ??smart_fill_mesh_9: (+1)
   \   000000DE   0x19E7             ADDS     R7,R4,R7
   \                     ??smart_fill_mesh_8: (+1)
   \   000000E0   0x9903             LDR      R1,[SP, #+12]
   \   000000E2   0xB2FF             UXTB     R7,R7
   \   000000E4   0x428F             CMP      R7,R1
   \   000000E6   0xD0EF             BEQ.N    ??smart_fill_mesh_6
   \   000000E8   0x19E0             ADDS     R0,R4,R7
   \   000000EA   0xFA4F 0xFB80      SXTB     R11,R0
   \   000000EE   0xEB07 0x0147      ADD      R1,R7,R7, LSL #+1
   \   000000F2   0x9800             LDR      R0,[SP, #+0]
   \   000000F4   0xEA4F 0x1901      LSL      R9,R1,#+4
   \   000000F8   0xEB04 0x060B      ADD      R6,R4,R11
   \   000000FC   0xF859 0x0000      LDR      R0,[R9, R0]
   \   00000100   0xB276             SXTB     R6,R6
   \   00000102   0xB26D             SXTB     R5,R5
   \   00000104   0x.... 0x....      BL       __iar_FDtest
   \   00000108   0x2802             CMP      R0,#+2
   \   0000010A   0xD1E8             BNE.N    ??smart_fill_mesh_9
   \   0000010C   0x.... 0x....      LDR.W    R0,??DataTable88_1
   \   00000110   0xEB00 0x0A85      ADD      R10,R0,R5, LSL #+2
   \   00000114   0xEB0B 0x004B      ADD      R0,R11,R11, LSL #+1
   \   00000118   0xEA4F 0x1B00      LSL      R11,R0,#+4
   \   0000011C   0xF85B 0x000A      LDR      R0,[R11, R10]
   \   00000120   0x.... 0x....      BL       __iar_FDtest
   \   00000124   0x2802             CMP      R0,#+2
   \   00000126   0xD0DA             BEQ.N    ??smart_fill_mesh_9
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable88_1
   \   0000012C   0xEB00 0x0885      ADD      R8,R0,R5, LSL #+2
   \   00000130   0xEB06 0x0046      ADD      R0,R6,R6, LSL #+1
   \   00000134   0x0106             LSLS     R6,R0,#+4
   \   00000136   0xF856 0x0008      LDR      R0,[R6, R8]
   \   0000013A   0x.... 0x....      BL       __iar_FDtest
   \   0000013E   0x2802             CMP      R0,#+2
   \   00000140   0xD0CD             BEQ.N    ??smart_fill_mesh_9
   \   00000142   0xF85B 0x200A      LDR      R2,[R11, R10]
   \   00000146   0xF856 0x1008      LDR      R1,[R6, R8]
   \   0000014A   0x4610             MOV      R0,R2
   \   0000014C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000150   0xD2A1             BCS.N    ??smart_fill_mesh_4
   \   00000152   0xE7B6             B.N      ??smart_fill_mesh_5
   1715                }
   1716                else {
   1717                  const int8_t dir = ey > sy ? 1 : -1;
   \                     ??smart_fill_mesh_2: (+1)
   \   00000154   0xA804             ADD      R0,SP,#+16
   \   00000156   0x9902             LDR      R1,[SP, #+8]
   \   00000158   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   0000015C   0x4288             CMP      R0,R1
   \   0000015E   0xBFB4             ITE      LT 
   \   00000160   0x2401             MOVLT    R4,#+1
   \   00000162   0xF04F 0x34FF      MOVGE    R4,#-1
   1718                   for (uint8_t x = sx; x != ex; ++x)
   \   00000166   0x9D05             LDR      R5,[SP, #+20]
   \   00000168   0x.... 0x....      LDR.W    R1,??DataTable88_1
   \   0000016C   0xB2ED             UXTB     R5,R5
   \   0000016E   0xEB05 0x0045      ADD      R0,R5,R5, LSL #+1
   \   00000172   0xEB01 0x1000      ADD      R0,R1,R0, LSL #+4
   \   00000176   0xE01B             B.N      ??smart_fill_mesh_10
   1719                    for (uint8_t y = sy; y != ey; y += dir)
   1720                      if (smart_fill_one(x, y, 0, dir)) break;
   \                     ??smart_fill_mesh_11: (+1)
   \   00000178   0x.... 0x....      BL       __aeabi_f2d
   \   0000017C   0x2200             MOVS     R2,#+0
   \   0000017E   0xF04F 0x4380      MOV      R3,#+1073741824
   \   00000182   0x.... 0x....      BL       __aeabi_dmul
   \   00000186   0x4607             MOV      R7,R0
   \   00000188   0xF858 0x0026      LDR      R0,[R8, R6, LSL #+2]
   \   0000018C   0x468B             MOV      R11,R1
   \   0000018E   0x.... 0x....      BL       __aeabi_f2d
   \   00000192   0x4602             MOV      R2,R0
   \   00000194   0x460B             MOV      R3,R1
   \   00000196   0x4638             MOV      R0,R7
   \   00000198   0x4659             MOV      R1,R11
   \   0000019A   0x.... 0x....      BL       __aeabi_dsub
   \   0000019E   0x.... 0x....      BL       __aeabi_d2f
   \   000001A2   0x4602             MOV      R2,R0
   \                     ??smart_fill_mesh_12: (+1)
   \   000001A4   0x9800             LDR      R0,[SP, #+0]
   \   000001A6   0xF840 0x2029      STR      R2,[R0, R9, LSL #+2]
   \                     ??smart_fill_mesh_13: (+1)
   \   000001AA   0x1C6D             ADDS     R5,R5,#+1
   \   000001AC   0x9800             LDR      R0,[SP, #+0]
   \   000001AE   0x3030             ADDS     R0,R0,#+48
   \                     ??smart_fill_mesh_10: (+1)
   \   000001B0   0x9000             STR      R0,[SP, #+0]
   \   000001B2   0xB2ED             UXTB     R5,R5
   \   000001B4   0x9803             LDR      R0,[SP, #+12]
   \   000001B6   0x4285             CMP      R5,R0
   \   000001B8   0xD036             BEQ.N    ??smart_fill_mesh_7
   \   000001BA   0x9F04             LDR      R7,[SP, #+16]
   \   000001BC   0xE000             B.N      ??smart_fill_mesh_14
   \                     ??smart_fill_mesh_15: (+1)
   \   000001BE   0x19E7             ADDS     R7,R4,R7
   \                     ??smart_fill_mesh_14: (+1)
   \   000001C0   0xB2FF             UXTB     R7,R7
   \   000001C2   0x9802             LDR      R0,[SP, #+8]
   \   000001C4   0x46B9             MOV      R9,R7
   \   000001C6   0x4581             CMP      R9,R0
   \   000001C8   0xD0EF             BEQ.N    ??smart_fill_mesh_13
   \   000001CA   0x19E0             ADDS     R0,R4,R7
   \   000001CC   0xFA4F 0xFA80      SXTB     R10,R0
   \   000001D0   0x9800             LDR      R0,[SP, #+0]
   \   000001D2   0xF850 0x0029      LDR      R0,[R0, R9, LSL #+2]
   \   000001D6   0xEB04 0x060A      ADD      R6,R4,R10
   \   000001DA   0xB26D             SXTB     R5,R5
   \   000001DC   0xB276             SXTB     R6,R6
   \   000001DE   0x.... 0x....      BL       __iar_FDtest
   \   000001E2   0x2802             CMP      R0,#+2
   \   000001E4   0xD1EB             BNE.N    ??smart_fill_mesh_15
   \   000001E6   0xEB05 0x0045      ADD      R0,R5,R5, LSL #+1
   \   000001EA   0x.... 0x....      LDR.W    R1,??DataTable88_1
   \   000001EE   0xEB01 0x1B00      ADD      R11,R1,R0, LSL #+4
   \   000001F2   0xF85B 0x002A      LDR      R0,[R11, R10, LSL #+2]
   \   000001F6   0x.... 0x....      BL       __iar_FDtest
   \   000001FA   0x2802             CMP      R0,#+2
   \   000001FC   0xD0DF             BEQ.N    ??smart_fill_mesh_15
   \   000001FE   0x.... 0x....      LDR.W    R1,??DataTable88_1
   \   00000202   0xEB05 0x0045      ADD      R0,R5,R5, LSL #+1
   \   00000206   0xEB01 0x1800      ADD      R8,R1,R0, LSL #+4
   \   0000020A   0xF858 0x0026      LDR      R0,[R8, R6, LSL #+2]
   \   0000020E   0x.... 0x....      BL       __iar_FDtest
   \   00000212   0x2802             CMP      R0,#+2
   \   00000214   0xD0D3             BEQ.N    ??smart_fill_mesh_15
   \   00000216   0xF85B 0x202A      LDR      R2,[R11, R10, LSL #+2]
   \   0000021A   0xF858 0x1026      LDR      R1,[R8, R6, LSL #+2]
   \   0000021E   0x4610             MOV      R0,R2
   \   00000220   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000224   0xD2A8             BCS.N    ??smart_fill_mesh_11
   \   00000226   0xE7BD             B.N      ??smart_fill_mesh_12
   1721                }
   1722              }
   \                     ??smart_fill_mesh_7: (+1)
   \   00000228   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   0000022C   0x1C40             ADDS     R0,R0,#+1
   \   0000022E   0xF88D 0x0018      STRB     R0,[SP, #+24]
   \   00000232   0x9801             LDR      R0,[SP, #+4]
   \   00000234   0xF200 0x0005      ADDW     R0,R0,#+5
   \   00000238   0x9001             STR      R0,[SP, #+4]
   \   0000023A   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   0000023E   0x2804             CMP      R0,#+4
   \   00000240   0xF4FF 0xAF05      BCC.W    ??smart_fill_mesh_1
   1723            }
   \   00000244   0x.... 0x....      B.W      ?Subroutine0

   \                                 In section .data, align 4
   \                     ??info:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x01    
   \   00000014   0x00               DC8 0
   1724          
   1725            #if HAS_BED_PROBE
   1726          

   \                                 In section .text, align 4, keep-with-next
   1727              void unified_bed_leveling::tilt_mesh_based_on_probed_grid(const bool do_ubl_mesh_map) {
   \                     _ZN20unified_bed_leveling30tilt_mesh_based_on_probed_gridEb: (+1)
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable88_3
   \   00000008   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   0000000C   0xB0A4             SUB      SP,SP,#+144
   \   0000000E   0x.... 0x....      BL       __aeabi_ui2f
   \   00000012   0x.... 0x....      LDR.W    R6,??DataTable88_4
   \   00000016   0x.... 0x....      LDR.W    R7,??DataTable88_5
   \   0000001A   0x4680             MOV      R8,R0
   \   0000001C   0xF9B6 0x0050      LDRSH    R0,[R6, #+80]
   \   00000020   0xF240 0x3102      MOVW     R1,#+770
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xD134             BNE.N    ??tilt_mesh_based_on_probed_grid_0
   1728              /*
   1729                constexpr int16_t x_min = max(MIN_PROBE_X, MESH_MIN_X),
   1730                                  x_max = min(MAX_PROBE_X, MESH_MAX_X),
   1731                                  y_min = max(MIN_PROBE_Y, MESH_MIN_Y),
   1732                                  y_max = min(MAX_PROBE_Y, MESH_MAX_Y);
   1733          */
   1734                //const 
   1735                int16_t x_min,x_max,y_min,y_max;
   1736                if(MACHINETPYE == IS_KINEMATIC)
   1737                {
   1738                      x_min = max(MIN_PROBE_X, MESH_MIN_X_IS_KINEMATIC),
                                   ^
Warning[Pa093]: implicit conversion from floating point to integer
   1739                      x_max = min(MAX_PROBE_X, MESH_MAX_X_IS_KINEMATIC),
                                   ^
Warning[Pa093]: implicit conversion from floating point to integer
   1740                      y_min = max(MIN_PROBE_Y, MESH_MIN_Y_IS_KINEMATIC),
                                   ^
Warning[Pa093]: implicit conversion from floating point to integer
   1741                      y_max = min(MAX_PROBE_Y, MESH_MAX_Y_IS_KINEMATIC);
                                   ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   00000028   0x683C             LDR      R4,[R7, #+0]
   \   0000002A   0x4640             MOV      R0,R8
   \   0000002C   0x4621             MOV      R1,R4
   \   0000002E   0x.... 0x....      BL       __aeabi_fadd
   \   00000032   0x4621             MOV      R1,R4
   \   00000034   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000038   0xBF38             IT       CC 
   \   0000003A   0x4620             MOVCC    R0,R4
   \   0000003C   0x.... 0x....      BL       __aeabi_f2iz
   \   00000040   0x687D             LDR      R5,[R7, #+4]
   \   00000042   0xB204             SXTH     R4,R0
   \   00000044   0x4628             MOV      R0,R5
   \   00000046   0x4641             MOV      R1,R8
   \   00000048   0x.... 0x....      BL       __aeabi_fsub
   \   0000004C   0x4601             MOV      R1,R0
   \   0000004E   0x4628             MOV      R0,R5
   \   00000050   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000054   0xBF28             IT       CS 
   \   00000056   0x4608             MOVCS    R0,R1
   \   00000058   0x.... 0x....      BL       __aeabi_f2iz
   \   0000005C   0x68BE             LDR      R6,[R7, #+8]
   \   0000005E   0x4605             MOV      R5,R0
   \   00000060   0x4640             MOV      R0,R8
   \   00000062   0x4631             MOV      R1,R6
   \   00000064   0x.... 0x....      BL       __aeabi_fadd
   \   00000068   0x4631             MOV      R1,R6
   \   0000006A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000006E   0xBF38             IT       CC 
   \   00000070   0x4630             MOVCC    R0,R6
   \   00000072   0x.... 0x....      BL       __aeabi_f2iz
   \   00000076   0x68FF             LDR      R7,[R7, #+12]
   \   00000078   0xB206             SXTH     R6,R0
   \   0000007A   0x4638             MOV      R0,R7
   \   0000007C   0x4641             MOV      R1,R8
   \   0000007E   0x.... 0x....      BL       __aeabi_fsub
   \   00000082   0x4601             MOV      R1,R0
   \   00000084   0x4638             MOV      R0,R7
   \   00000086   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000008A   0xF0C0 0x809B      BCC.W    ??tilt_mesh_based_on_probed_grid_1
   \   0000008E   0x4608             MOV      R0,R1
   \   00000090   0xE098             B.N      ??tilt_mesh_based_on_probed_grid_1
   1742                }
   1743                else
   1744                {
   1745                      x_min = max(MIN_PROBE_X, MESH_MIN_X_IS_Cartesian),
                                   ^
Warning[Pa093]: implicit conversion from floating point to integer
   1746                      x_max = min(MAX_PROBE_X, MESH_MAX_X_IS_Cartesian),
                                   ^
Warning[Pa093]: implicit conversion from floating point to integer
   1747                      y_min = max(MIN_PROBE_Y, MESH_MIN_Y_IS_Cartesian),
                                   ^
Warning[Pa093]: implicit conversion from floating point to integer
   1748                      y_max = min(MAX_PROBE_Y, MESH_MAX_Y_IS_Cartesian);      
                                   ^
Warning[Pa093]: implicit conversion from floating point to integer
   \                     ??tilt_mesh_based_on_probed_grid_0: (+1)
   \   00000092   0x68F5             LDR      R5,[R6, #+12]
   \   00000094   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000098   0x4629             MOV      R1,R5
   \   0000009A   0x.... 0x....      BL       __aeabi_fmul
   \   0000009E   0x4681             MOV      R9,R0
   \   000000A0   0x4649             MOV      R1,R9
   \   000000A2   0x.... 0x....      BL       __aeabi_fsub
   \   000000A6   0x4641             MOV      R1,R8
   \   000000A8   0x.... 0x....      BL       __aeabi_fadd
   \   000000AC   0x4683             MOV      R11,R0
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable88_6
   \   000000B2   0xF8D0 0xA00C      LDR      R10,[R0, #+12]
   \   000000B6   0x9001             STR      R0,[SP, #+4]
   \   000000B8   0x4651             MOV      R1,R10
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable88_3
   \   000000BE   0x6880             LDR      R0,[R0, #+8]
   \   000000C0   0x.... 0x....      BL       __aeabi_fadd
   \   000000C4   0x4659             MOV      R1,R11
   \   000000C6   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000CA   0x4602             MOV      R2,R0
   \   000000CC   0xBF38             IT       CC 
   \   000000CE   0x4658             MOVCC    R0,R11
   \   000000D0   0x683C             LDR      R4,[R7, #+0]
   \   000000D2   0x4621             MOV      R1,R4
   \   000000D4   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000D8   0xBF38             IT       CC 
   \   000000DA   0x4620             MOVCC    R0,R4
   \   000000DC   0xD305             BCC.N    ??tilt_mesh_based_on_probed_grid_2
   \   000000DE   0x4610             MOV      R0,R2
   \   000000E0   0x4659             MOV      R1,R11
   \   000000E2   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000E6   0xBF38             IT       CC 
   \   000000E8   0x4658             MOVCC    R0,R11
   \                     ??tilt_mesh_based_on_probed_grid_2: (+1)
   \   000000EA   0x.... 0x....      BL       __aeabi_f2iz
   \   000000EE   0xB204             SXTH     R4,R0
   \   000000F0   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000000F4   0x4649             MOV      R1,R9
   \   000000F6   0x.... 0x....      BL       __aeabi_fmul
   \   000000FA   0x4641             MOV      R1,R8
   \   000000FC   0x.... 0x....      BL       __aeabi_fsub
   \   00000100   0x4681             MOV      R9,R0
   \   00000102   0x4628             MOV      R0,R5
   \   00000104   0x4651             MOV      R1,R10
   \   00000106   0x.... 0x....      BL       __aeabi_fadd
   \   0000010A   0x4602             MOV      R2,R0
   \   0000010C   0x4648             MOV      R0,R9
   \   0000010E   0x4611             MOV      R1,R2
   \   00000110   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000114   0xBF38             IT       CC 
   \   00000116   0x4649             MOVCC    R1,R9
   \   00000118   0x6878             LDR      R0,[R7, #+4]
   \   0000011A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000011E   0xD305             BCC.N    ??tilt_mesh_based_on_probed_grid_3
   \   00000120   0x4648             MOV      R0,R9
   \   00000122   0x4611             MOV      R1,R2
   \   00000124   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000128   0xBF28             IT       CS 
   \   0000012A   0x4610             MOVCS    R0,R2
   \                     ??tilt_mesh_based_on_probed_grid_3: (+1)
   \   0000012C   0x.... 0x....      BL       __aeabi_f2iz
   \   00000130   0xF8D6 0x9010      LDR      R9,[R6, #+16]
   \   00000134   0x4605             MOV      R5,R0
   \   00000136   0xF04F 0x507C      MOV      R0,#+1056964608
   \   0000013A   0x4649             MOV      R1,R9
   \   0000013C   0x.... 0x....      BL       __aeabi_fmul
   \   00000140   0x4682             MOV      R10,R0
   \   00000142   0x4651             MOV      R1,R10
   \   00000144   0x.... 0x....      BL       __aeabi_fsub
   \   00000148   0x4641             MOV      R1,R8
   \   0000014A   0x.... 0x....      BL       __aeabi_fadd
   \   0000014E   0x4683             MOV      R11,R0
   \   00000150   0x9801             LDR      R0,[SP, #+4]
   \   00000152   0x6900             LDR      R0,[R0, #+16]
   \   00000154   0x6871             LDR      R1,[R6, #+4]
   \   00000156   0x9000             STR      R0,[SP, #+0]
   \   00000158   0x.... 0x....      BL       __aeabi_fadd
   \   0000015C   0x4659             MOV      R1,R11
   \   0000015E   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000162   0x4602             MOV      R2,R0
   \   00000164   0xBF38             IT       CC 
   \   00000166   0x4658             MOVCC    R0,R11
   \   00000168   0x68BE             LDR      R6,[R7, #+8]
   \   0000016A   0x4631             MOV      R1,R6
   \   0000016C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000170   0xBF38             IT       CC 
   \   00000172   0x4630             MOVCC    R0,R6
   \   00000174   0xD305             BCC.N    ??tilt_mesh_based_on_probed_grid_4
   \   00000176   0x4610             MOV      R0,R2
   \   00000178   0x4659             MOV      R1,R11
   \   0000017A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000017E   0xBF38             IT       CC 
   \   00000180   0x4658             MOVCC    R0,R11
   \                     ??tilt_mesh_based_on_probed_grid_4: (+1)
   \   00000182   0x.... 0x....      BL       __aeabi_f2iz
   \   00000186   0xB206             SXTH     R6,R0
   \   00000188   0xF04F 0x4080      MOV      R0,#+1073741824
   \   0000018C   0x4651             MOV      R1,R10
   \   0000018E   0x.... 0x....      BL       __aeabi_fmul
   \   00000192   0x4641             MOV      R1,R8
   \   00000194   0x.... 0x....      BL       __aeabi_fsub
   \   00000198   0x4680             MOV      R8,R0
   \   0000019A   0x9800             LDR      R0,[SP, #+0]
   \   0000019C   0x4649             MOV      R1,R9
   \   0000019E   0x.... 0x....      BL       __aeabi_fadd
   \   000001A2   0x4602             MOV      R2,R0
   \   000001A4   0x4640             MOV      R0,R8
   \   000001A6   0x4611             MOV      R1,R2
   \   000001A8   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001AC   0xBF38             IT       CC 
   \   000001AE   0x4641             MOVCC    R1,R8
   \   000001B0   0x68F8             LDR      R0,[R7, #+12]
   \   000001B2   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001B6   0xD305             BCC.N    ??tilt_mesh_based_on_probed_grid_1
   \   000001B8   0x4640             MOV      R0,R8
   \   000001BA   0x4611             MOV      R1,R2
   \   000001BC   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001C0   0xBF28             IT       CS 
   \   000001C2   0x4610             MOVCS    R0,R2
   \                     ??tilt_mesh_based_on_probed_grid_1: (+1)
   \   000001C4   0x.... 0x....      BL       __aeabi_f2iz
   1749                }
   1750          
   1751                const float dx = float(x_max - x_min) / (g29_grid_size - 1.0),
   \   000001C8   0x.... 0x....      LDR.W    R7,??DataTable88_7
   \   000001CC   0x4680             MOV      R8,R0
   \   000001CE   0x6A78             LDR      R0,[R7, #+36]
   \   000001D0   0x.... 0x....      BL       __aeabi_i2d
   \   000001D4   0x.... 0x....      LDR.W    R3,??DataTable88_8  ;; 0xbff00000
   \   000001D8   0x2200             MOVS     R2,#+0
   \   000001DA   0x.... 0x....      BL       __aeabi_dadd
   \   000001DE   0x4682             MOV      R10,R0
   \   000001E0   0xB22D             SXTH     R5,R5
   \   000001E2   0x468B             MOV      R11,R1
   \   000001E4   0x1B28             SUBS     R0,R5,R4
   \   000001E6   0x.... 0x....      BL       __aeabi_i2f
   \   000001EA   0x.... 0x....      BL       __aeabi_f2d
   \   000001EE   0x4652             MOV      R2,R10
   \   000001F0   0x465B             MOV      R3,R11
   \   000001F2   0x.... 0x....      BL       __aeabi_ddiv
   \   000001F6   0x.... 0x....      BL       __aeabi_d2f
   \   000001FA   0x9007             STR      R0,[SP, #+28]
   1752                            dy = float(y_max - y_min) / (g29_grid_size - 1.0);
   \   000001FC   0xFA0F 0xF188      SXTH     R1,R8
   \   00000200   0x1B88             SUBS     R0,R1,R6
   \   00000202   0x.... 0x....      BL       __aeabi_i2f
   \   00000206   0x.... 0x....      BL       __aeabi_f2d
   \   0000020A   0x4652             MOV      R2,R10
   \   0000020C   0x465B             MOV      R3,R11
   \   0000020E   0x.... 0x....      BL       __aeabi_ddiv
   \   00000212   0x.... 0x....      BL       __aeabi_d2f
   \   00000216   0x9006             STR      R0,[SP, #+24]
   1753          
   1754                struct linear_fit_data lsf_results;
   1755                incremental_LSF_reset(&lsf_results);
   \   00000218   0x213C             MOVS     R1,#+60
   \   0000021A   0xA80B             ADD      R0,SP,#+44
   \   0000021C   0x.... 0x....      BL       __aeabi_memclr4
   1756          
   1757                bool zig_zag = false;
   \   00000220   0x2500             MOVS     R5,#+0
   1758                for (uint8_t ix = 0; ix < g29_grid_size; ix++) {
   \   00000222   0x46A8             MOV      R8,R5
   \   00000224   0x4630             MOV      R0,R6
   \   00000226   0x.... 0x....      BL       __aeabi_i2f
   \   0000022A   0x9005             STR      R0,[SP, #+20]
   \   0000022C   0x4620             MOV      R0,R4
   \   0000022E   0x.... 0x....      BL       __aeabi_i2f
   \   00000232   0x9004             STR      R0,[SP, #+16]
   \   00000234   0x.... 0x....      LDR.W    R4,??DataTable88_9
   \   00000238   0x.... 0x....      LDR.W    R6,??DataTable88_10
   \   0000023C   0x.... 0x....      LDR.W    R9,??DataTable88_11
   \   00000240   0x.... 0x....      LDR.W    R10,??DataTable88_12
   \   00000244   0xE007             B.N      ??tilt_mesh_based_on_probed_grid_5
   1759                  const float rx = float(x_min) + ix * dx;
   1760                  for (int8_t iy = 0; iy < g29_grid_size; iy++) {
   1761                    const float ry = float(y_min) + dy * (zig_zag ? g29_grid_size - 1 - iy : iy);
   1762                    float measured_z = probe_pt(rx, ry, parser.seen('E'), g29_verbose_level); // TODO: Needs error handling
   1763                    #if ENABLED(DEBUG_LEVELING_FEATURE)
   1764                      if (DEBUGGING(LEVELING)) {
   1765                        SERIAL_CHAR('(');
   1766                        SERIAL_PROTOCOL_F(rx, 7);
   1767                        SERIAL_CHAR(',');
   1768                        SERIAL_PROTOCOL_F(ry, 7);
   1769                        SERIAL_ECHOPGM(")   logical: ");
   1770                        SERIAL_CHAR('(');
   1771                        SERIAL_PROTOCOL_F(LOGICAL_X_POSITION(rx), 7);
   1772                        SERIAL_CHAR(',');
   1773                        SERIAL_PROTOCOL_F(LOGICAL_Y_POSITION(ry), 7);
   1774                        SERIAL_ECHOPGM(")   measured: ");
   1775                        SERIAL_PROTOCOL_F(measured_z, 7);
   1776                        SERIAL_ECHOPGM("   correction: ");
   1777                        SERIAL_PROTOCOL_F(get_z_correction(rx, ry), 7);
   1778                      }
   1779                    #endif
   1780          
   1781                    measured_z -= get_z_correction(rx, ry) /* + zprobe_zoffset */ ;
   1782          
   1783                    #if ENABLED(DEBUG_LEVELING_FEATURE)
   1784                      if (DEBUGGING(LEVELING)) {
   1785                        SERIAL_ECHOPGM("   final >>>---> ");
   1786                        SERIAL_PROTOCOL_F(measured_z, 7);
   1787                        SERIAL_EOL();
   1788                      }
   1789                    #endif
   1790          
   1791                    incremental_LSF(&lsf_results, rx, ry, measured_z);
   1792                  }
   1793          
   1794                  zig_zag ^= true;
   \                     ??tilt_mesh_based_on_probed_grid_6: (+1)
   \   00000246   0xF085 0x0001      EOR      R0,R5,#0x1
   \   0000024A   0x1E45             SUBS     R5,R0,#+1
   \   0000024C   0x41AD             SBCS     R5,R5,R5
   \   0000024E   0x43ED             MVNS     R5,R5
   \   00000250   0x0FED             LSRS     R5,R5,#+31
   \   00000252   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??tilt_mesh_based_on_probed_grid_5: (+1)
   \   00000256   0x6A78             LDR      R0,[R7, #+36]
   \   00000258   0xFA5F 0xF888      UXTB     R8,R8
   \   0000025C   0x4580             CMP      R8,R0
   \   0000025E   0xDA4A             BGE.N    ??tilt_mesh_based_on_probed_grid_7
   \   00000260   0x4640             MOV      R0,R8
   \   00000262   0x.... 0x....      BL       __aeabi_ui2f
   \   00000266   0x9907             LDR      R1,[SP, #+28]
   \   00000268   0x.... 0x....      BL       __aeabi_fmul
   \   0000026C   0x4601             MOV      R1,R0
   \   0000026E   0x9804             LDR      R0,[SP, #+16]
   \   00000270   0x.... 0x....      BL       __aeabi_fadd
   \   00000274   0x9003             STR      R0,[SP, #+12]
   \   00000276   0xF04F 0x0B00      MOV      R11,#+0
   \   0000027A   0xE01C             B.N      ??tilt_mesh_based_on_probed_grid_8
   \                     ??tilt_mesh_based_on_probed_grid_9: (+1)
   \   0000027C   0x6020             STR      R0,[R4, #+0]
   \                     ??tilt_mesh_based_on_probed_grid_10: (+1)
   \   0000027E   0x2001             MOVS     R0,#+1
   \   00000280   0x9000             STR      R0,[SP, #+0]
   \   00000282   0xA902             ADD      R1,SP,#+8
   \   00000284   0x687B             LDR      R3,[R7, #+4]
   \   00000286   0xB2DB             UXTB     R3,R3
   \   00000288   0xA803             ADD      R0,SP,#+12
   \   0000028A   0x.... 0x....      BL       _Z8probe_ptRKfS0_bhb
   \   0000028E   0x9001             STR      R0,[SP, #+4]
   \   00000290   0xA902             ADD      R1,SP,#+8
   \   00000292   0xA803             ADD      R0,SP,#+12
   \   00000294   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_z_correctionERKfS1_
   \   00000298   0x4601             MOV      R1,R0
   \   0000029A   0x9801             LDR      R0,[SP, #+4]
   \   0000029C   0x.... 0x....      BL       __aeabi_fsub
   \   000002A0   0x9001             STR      R0,[SP, #+4]
   \   000002A2   0xAB01             ADD      R3,SP,#+4
   \   000002A4   0xAA02             ADD      R2,SP,#+8
   \   000002A6   0xA903             ADD      R1,SP,#+12
   \   000002A8   0xA80B             ADD      R0,SP,#+44
   \   000002AA   0x.... 0x....      BL       _Z15incremental_LSFP15linear_fit_dataRKfS2_S2_
   \   000002AE   0xF10B 0x0001      ADD      R0,R11,#+1
   \   000002B2   0xFA4F 0xFB80      SXTB     R11,R0
   \                     ??tilt_mesh_based_on_probed_grid_8: (+1)
   \   000002B6   0x6A78             LDR      R0,[R7, #+36]
   \   000002B8   0x4583             CMP      R11,R0
   \   000002BA   0xDAC4             BGE.N    ??tilt_mesh_based_on_probed_grid_6
   \   000002BC   0x2D00             CMP      R5,#+0
   \   000002BE   0xBF1A             ITTE     NE 
   \   000002C0   0x1E40             SUBNE    R0,R0,#+1
   \   000002C2   0xEBA0 0x000B      SUBNE    R0,R0,R11
   \   000002C6   0x4658             MOVEQ    R0,R11
   \   000002C8   0x.... 0x....      BL       __aeabi_i2f
   \   000002CC   0x9906             LDR      R1,[SP, #+24]
   \   000002CE   0x.... 0x....      BL       __aeabi_fmul
   \   000002D2   0x4601             MOV      R1,R0
   \   000002D4   0x9805             LDR      R0,[SP, #+20]
   \   000002D6   0x.... 0x....      BL       __aeabi_fadd
   \   000002DA   0x9002             STR      R0,[SP, #+8]
   \   000002DC   0xF89A 0x0000      LDRB     R0,[R10, #+0]
   \   000002E0   0x0900             LSRS     R0,R0,#+4
   \   000002E2   0xF010 0x0201      ANDS     R2,R0,#0x1
   \   000002E6   0xD0CA             BEQ.N    ??tilt_mesh_based_on_probed_grid_10
   \   000002E8   0xF899 0x0004      LDRB     R0,[R9, #+4]
   \   000002EC   0x2800             CMP      R0,#+0
   \   000002EE   0xD0C5             BEQ.N    ??tilt_mesh_based_on_probed_grid_9
   \   000002F0   0x6831             LDR      R1,[R6, #+0]
   \   000002F2   0x1840             ADDS     R0,R0,R1
   \   000002F4   0xE7C2             B.N      ??tilt_mesh_based_on_probed_grid_9
   1795                }
   1796          
   1797                if (finish_incremental_LSF(&lsf_results)) {
   \                     ??tilt_mesh_based_on_probed_grid_7: (+1)
   \   000002F6   0xA80B             ADD      R0,SP,#+44
   \   000002F8   0x.... 0x....      BL       _Z22finish_incremental_LSFP15linear_fit_data
   \   000002FC   0xB120             CBZ.N    R0,??tilt_mesh_based_on_probed_grid_11
   1798                  SERIAL_ECHOPGM("Could not complete LSF!");
   \   000002FE   0x.... 0x....      ADR.W    R0,`?<Constant "Could not complete LSF!">`
   \   00000302   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1799                  return;
   1800                }
   1801          
   1802                if (g29_verbose_level > 3) {
   1803                  SERIAL_ECHOPGM("LSF Results A=");
   1804                  SERIAL_PROTOCOL_F(lsf_results.A, 7);
   1805                  SERIAL_ECHOPGM("  B=");
   1806                  SERIAL_PROTOCOL_F(lsf_results.B, 7);
   1807                  SERIAL_ECHOPGM("  D=");
   1808                  SERIAL_PROTOCOL_F(lsf_results.D, 7);
   1809                  SERIAL_EOL();
   1810                }
   1811          
   1812                vector_3 normal = vector_3(lsf_results.A, lsf_results.B, 1.0000).get_normal();
   1813          
   1814                if (g29_verbose_level > 2) {
   1815                  SERIAL_ECHOPGM("bed plane normal = [");
   1816                  SERIAL_PROTOCOL_F(normal.x, 7);
   1817                  SERIAL_PROTOCOLCHAR(',');
   1818                  SERIAL_PROTOCOL_F(normal.y, 7);
   1819                  SERIAL_PROTOCOLCHAR(',');
   1820                  SERIAL_PROTOCOL_F(normal.z, 7);
   1821                  SERIAL_ECHOLNPGM("]");
   1822                }
   1823          
   1824                matrix_3x3 rotation = matrix_3x3::create_look_at(vector_3(lsf_results.A, lsf_results.B, 1));
   1825          
   1826                for (uint8_t i = 0; i < GRID_MAX_POINTS_X; i++) {
   1827                  for (uint8_t j = 0; j < GRID_MAX_POINTS_Y; j++) {
   1828                    float x_tmp = mesh_index_to_xpos(i),
   1829                          y_tmp = mesh_index_to_ypos(j),
   1830                          z_tmp = z_values[i][j];
   1831          
   1832                    #if ENABLED(DEBUG_LEVELING_FEATURE)
   1833                      if (DEBUGGING(LEVELING)) {
   1834                        SERIAL_ECHOPGM("before rotation = [");
   1835                        SERIAL_PROTOCOL_F(x_tmp, 7);
   1836                        SERIAL_PROTOCOLCHAR(',');
   1837                        SERIAL_PROTOCOL_F(y_tmp, 7);
   1838                        SERIAL_PROTOCOLCHAR(',');
   1839                        SERIAL_PROTOCOL_F(z_tmp, 7);
   1840                        SERIAL_ECHOPGM("]   ---> ");
   1841                        safe_delay(20);
   1842                      }
   1843                    #endif
   1844          
   1845                    apply_rotation_xyz(rotation, x_tmp, y_tmp, z_tmp);
   1846          
   1847                    #if ENABLED(DEBUG_LEVELING_FEATURE)
   1848                      if (DEBUGGING(LEVELING)) {
   1849                        SERIAL_ECHOPGM("after rotation = [");
   1850                        SERIAL_PROTOCOL_F(x_tmp, 7);
   1851                        SERIAL_PROTOCOLCHAR(',');
   1852                        SERIAL_PROTOCOL_F(y_tmp, 7);
   1853                        SERIAL_PROTOCOLCHAR(',');
   1854                        SERIAL_PROTOCOL_F(z_tmp, 7);
   1855                        SERIAL_ECHOLNPGM("]");
   1856                        safe_delay(55);
   1857                      }
   1858                    #endif
   1859          
   1860                    z_values[i][j] += z_tmp - lsf_results.D;
   1861                  }
   1862                }
   1863          
   1864                #if ENABLED(DEBUG_LEVELING_FEATURE)
   1865                  if (DEBUGGING(LEVELING)) {
   1866                    rotation.debug(PSTR("rotation matrix:"));
   1867                    SERIAL_ECHOPGM("LSF Results A=");
   1868                    SERIAL_PROTOCOL_F(lsf_results.A, 7);
   1869                    SERIAL_ECHOPGM("  B=");
   1870                    SERIAL_PROTOCOL_F(lsf_results.B, 7);
   1871                    SERIAL_ECHOPGM("  D=");
   1872                    SERIAL_PROTOCOL_F(lsf_results.D, 7);
   1873                    SERIAL_EOL();
   1874                    safe_delay(55);
   1875          
   1876                    SERIAL_ECHOPGM("bed plane normal = [");
   1877                    SERIAL_PROTOCOL_F(normal.x, 7);
   1878                    SERIAL_PROTOCOLCHAR(',');
   1879                    SERIAL_PROTOCOL_F(normal.y, 7);
   1880                    SERIAL_PROTOCOLCHAR(',');
   1881                    SERIAL_PROTOCOL_F(normal.z, 7);
   1882                    SERIAL_ECHOPGM("]\n");
   1883                    SERIAL_EOL();
   1884                  }
   1885                #endif
   1886          
   1887                if (do_ubl_mesh_map) display_map(g29_map_type);
   1888              }
   \   00000306   0x....             B.N      ?Subroutine1
   \                     ??tilt_mesh_based_on_probed_grid_11: (+1)
   \   00000308   0x6878             LDR      R0,[R7, #+4]
   \   0000030A   0x2804             CMP      R0,#+4
   \   0000030C   0xDB2F             BLT.N    ??tilt_mesh_based_on_probed_grid_12
   \   0000030E   0x.... 0x....      ADR.W    R0,`?<Constant "LSF Results A=">`
   \   00000312   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   00000316   0x2007             MOVS     R0,#+7
   \   00000318   0x9000             STR      R0,[SP, #+0]
   \   0000031A   0x.... 0x....      LDR.W    R4,??DataTable88_13
   \   0000031E   0x9816             LDR      R0,[SP, #+88]
   \   00000320   0x.... 0x....      BL       __aeabi_f2d
   \   00000324   0x4602             MOV      R2,R0
   \   00000326   0x460B             MOV      R3,R1
   \   00000328   0x4620             MOV      R0,R4
   \   0000032A   0x.... 0x....      BL       _ZN5Print5printEdi
   \   0000032E   0x.... 0x....      ADR.W    R0,`?<Constant "  B=">`
   \   00000332   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   00000336   0x2007             MOVS     R0,#+7
   \   00000338   0x9000             STR      R0,[SP, #+0]
   \   0000033A   0x9817             LDR      R0,[SP, #+92]
   \   0000033C   0x.... 0x....      BL       __aeabi_f2d
   \   00000340   0x4602             MOV      R2,R0
   \   00000342   0x460B             MOV      R3,R1
   \   00000344   0x4620             MOV      R0,R4
   \   00000346   0x.... 0x....      BL       _ZN5Print5printEdi
   \   0000034A   0x.... 0x....      ADR.W    R0,`?<Constant "  D=">`
   \   0000034E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   00000352   0x2007             MOVS     R0,#+7
   \   00000354   0x9000             STR      R0,[SP, #+0]
   \   00000356   0x9818             LDR      R0,[SP, #+96]
   \   00000358   0x.... 0x....      BL       __aeabi_f2d
   \   0000035C   0x4602             MOV      R2,R0
   \   0000035E   0x460B             MOV      R3,R1
   \   00000360   0x4620             MOV      R0,R4
   \   00000362   0x.... 0x....      BL       _ZN5Print5printEdi
   \   00000366   0x210A             MOVS     R1,#+10
   \   00000368   0x4620             MOV      R0,R4
   \   0000036A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??tilt_mesh_based_on_probed_grid_12: (+1)
   \   0000036E   0x9A17             LDR      R2,[SP, #+92]
   \   00000370   0x9916             LDR      R1,[SP, #+88]
   \   00000372   0xF04F 0x537E      MOV      R3,#+1065353216
   \   00000376   0xA804             ADD      R0,SP,#+16
   \   00000378   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \   0000037C   0xA904             ADD      R1,SP,#+16
   \   0000037E   0xA801             ADD      R0,SP,#+4
   \   00000380   0x.... 0x....      BL       _ZN8vector_310get_normalEv
   \   00000384   0x6878             LDR      R0,[R7, #+4]
   \   00000386   0x2803             CMP      R0,#+3
   \   00000388   0xDB2E             BLT.N    ??tilt_mesh_based_on_probed_grid_13
   \   0000038A   0x.... 0x....      ADR.W    R0,`?<Constant "bed plane normal = [">`
   \   0000038E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   00000392   0x2007             MOVS     R0,#+7
   \   00000394   0x9000             STR      R0,[SP, #+0]
   \   00000396   0x.... 0x....      LDR.W    R4,??DataTable88_13
   \   0000039A   0x9801             LDR      R0,[SP, #+4]
   \   0000039C   0x.... 0x....      BL       __aeabi_f2d
   \   000003A0   0x4602             MOV      R2,R0
   \   000003A2   0x460B             MOV      R3,R1
   \   000003A4   0x4620             MOV      R0,R4
   \   000003A6   0x.... 0x....      BL       _ZN5Print5printEdi
   \   000003AA   0x212C             MOVS     R1,#+44
   \   000003AC   0x4620             MOV      R0,R4
   \   000003AE   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   000003B2   0x2007             MOVS     R0,#+7
   \   000003B4   0x9000             STR      R0,[SP, #+0]
   \   000003B6   0x9802             LDR      R0,[SP, #+8]
   \   000003B8   0x.... 0x....      BL       __aeabi_f2d
   \   000003BC   0x4602             MOV      R2,R0
   \   000003BE   0x460B             MOV      R3,R1
   \   000003C0   0x4620             MOV      R0,R4
   \   000003C2   0x.... 0x....      BL       _ZN5Print5printEdi
   \   000003C6   0x212C             MOVS     R1,#+44
   \   000003C8   0x4620             MOV      R0,R4
   \   000003CA   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   000003CE   0x2007             MOVS     R0,#+7
   \   000003D0   0x9000             STR      R0,[SP, #+0]
   \   000003D2   0x9803             LDR      R0,[SP, #+12]
   \   000003D4   0x.... 0x....      BL       __aeabi_f2d
   \   000003D8   0x4602             MOV      R2,R0
   \   000003DA   0x460B             MOV      R3,R1
   \   000003DC   0x4620             MOV      R0,R4
   \   000003DE   0x.... 0x....      BL       _ZN5Print5printEdi
   \   000003E2   0xA026             ADR.N    R0,??tilt_mesh_based_on_probed_grid_14  ;; 0x5D, 0x0A, 0x00, 0x00
   \   000003E4   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \                     ??tilt_mesh_based_on_probed_grid_13: (+1)
   \   000003E8   0x9A17             LDR      R2,[SP, #+92]
   \   000003EA   0x9916             LDR      R1,[SP, #+88]
   \   000003EC   0xF04F 0x537E      MOV      R3,#+1065353216
   \   000003F0   0xA800             ADD      R0,SP,#+0
   \   000003F2   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \   000003F6   0xA800             ADD      R0,SP,#+0
   \   000003F8   0xE890 0x000E      LDM      R0,{R1-R3}
   \   000003FC   0xA81A             ADD      R0,SP,#+104
   \   000003FE   0x.... 0x....      BL       _ZN10matrix_3x314create_look_atE8vector_3
   \   00000402   0x2400             MOVS     R4,#+0
   \   00000404   0xE02C             B.N      ??tilt_mesh_based_on_probed_grid_15
   \                     ??tilt_mesh_based_on_probed_grid_16: (+1)
   \   00000406   0x4620             MOV      R0,R4
   \   00000408   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   0000040C   0x900A             STR      R0,[SP, #+40]
   \   0000040E   0x4628             MOV      R0,R5
   \   00000410   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   00000414   0x9009             STR      R0,[SP, #+36]
   \   00000416   0xA91A             ADD      R1,SP,#+104
   \   00000418   0xF856 0x0025      LDR      R0,[R6, R5, LSL #+2]
   \   0000041C   0x9008             STR      R0,[SP, #+32]
   \   0000041E   0x2224             MOVS     R2,#+36
   \   00000420   0xA808             ADD      R0,SP,#+32
   \   00000422   0x9007             STR      R0,[SP, #+28]
   \   00000424   0xA809             ADD      R0,SP,#+36
   \   00000426   0x9006             STR      R0,[SP, #+24]
   \   00000428   0xA80A             ADD      R0,SP,#+40
   \   0000042A   0x9005             STR      R0,[SP, #+20]
   \   0000042C   0xB084             SUB      SP,SP,#+16
   \   0000042E   0x4668             MOV      R0,SP
   \   00000430   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000434   0xBC0F             POP      {R0-R3}
   \   00000436   0x.... 0x....      BL       _Z18apply_rotation_xyz10matrix_3x3RfS0_S0_
   \   0000043A   0x9808             LDR      R0,[SP, #+32]
   \   0000043C   0x9918             LDR      R1,[SP, #+96]
   \   0000043E   0x.... 0x....      BL       __aeabi_fsub
   \   00000442   0xF856 0x1025      LDR      R1,[R6, R5, LSL #+2]
   \   00000446   0x.... 0x....      BL       __aeabi_fadd
   \   0000044A   0xF846 0x0025      STR      R0,[R6, R5, LSL #+2]
   \   0000044E   0x1C6D             ADDS     R5,R5,#+1
   \   00000450   0xB2ED             UXTB     R5,R5
   \                     ??tilt_mesh_based_on_probed_grid_17: (+1)
   \   00000452   0x.... 0x....      LDR.W    R0,??DataTable88_6
   \   00000456   0x7840             LDRB     R0,[R0, #+1]
   \   00000458   0x4285             CMP      R5,R0
   \   0000045A   0xDBD4             BLT.N    ??tilt_mesh_based_on_probed_grid_16
   \   0000045C   0x1C64             ADDS     R4,R4,#+1
   \   0000045E   0xB2E4             UXTB     R4,R4
   \                     ??tilt_mesh_based_on_probed_grid_15: (+1)
   \   00000460   0x.... 0x....      LDR.W    R0,??DataTable88_3
   \   00000464   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   00000468   0x4284             CMP      R4,R0
   \   0000046A   0xDA09             BGE.N    ??tilt_mesh_based_on_probed_grid_18
   \   0000046C   0xEB04 0x0044      ADD      R0,R4,R4, LSL #+1
   \   00000470   0x.... 0x....      LDR.W    R1,??DataTable88_1
   \   00000474   0x2500             MOVS     R5,#+0
   \   00000476   0xEB01 0x1600      ADD      R6,R1,R0, LSL #+4
   \   0000047A   0xE7EA             B.N      ??tilt_mesh_based_on_probed_grid_17
   \                     ??tilt_mesh_based_on_probed_grid_14:
   \   0000047C   0x5D 0x0A          DC8      0x5D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   \                     ??tilt_mesh_based_on_probed_grid_18: (+1)
   \   00000480   0xF89D 0x0090      LDRB     R0,[SP, #+144]
   \   00000484   0xB110             CBZ.N    R0,??tilt_mesh_based_on_probed_grid_19
   \   00000486   0x6978             LDR      R0,[R7, #+20]
   \   00000488   0x.... 0x....      BL       _ZN20unified_bed_leveling11display_mapEi
   \                     ??tilt_mesh_based_on_probed_grid_19: (+1)
   \   0000048C                      REQUIRE ?Subroutine1
   \   0000048C                      ;; // Fall through to label ?Subroutine1

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0xB025             ADD      SP,SP,#+148
   \   00000002   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1889          
   1890            #endif // HAS_BED_PROBE
   1891          
   1892            #if ENABLED(UBL_G29_P31)

   \                                 In section .text, align 2, keep-with-next
   1893              void unified_bed_leveling::smart_fill_wlsf(const float &weight_factor) {
   \                     _ZN20unified_bed_leveling15smart_fill_wlsfERKf: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0A1             SUB      SP,SP,#+132
   \   00000006   0x4681             MOV      R9,R0
   1894          
   1895                // For each undefined mesh point, compute a distance-weighted least squares fit
   1896                // from all the originally populated mesh points, weighted toward the point
   1897                // being extrapolated so that nearby points will have greater influence on
   1898                // the point being extrapolated.  Then extrapolate the mesh point from WLSF.
   1899          
   1900                //static_assert(GRID_MAX_POINTS_Y <= 16, "GRID_MAX_POINTS_Y too big");
   1901                uint16_t bitmap[GRID_MAX_POINTS_X_MAX] = { 0 };
   \   00000008   0xA81B             ADD      R0,SP,#+108
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x460B             MOV      R3,R1
   \   00000010   0xC00E             STM      R0!,{R1-R3}
   \   00000012   0xC00E             STM      R0!,{R1-R3}
   1902                struct linear_fit_data lsf_results;
   1903          
   1904                SERIAL_ECHOPGM("Extrapolating mesh...");
   \   00000014   0x.... 0x....      ADR.W    R0,`?<Constant "Extrapolating mesh...">`
   \   00000018   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable88_3
   \   00000020   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   00000024   0x.... 0x....      BL       __aeabi_ui2f
   \   00000028   0x.... 0x....      LDR.W    R7,??DataTable88_4
   \   0000002C   0x4680             MOV      R8,R0
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable88_6
   \   00000032   0x9000             STR      R0,[SP, #+0]
   \   00000034   0xF240 0x3102      MOVW     R1,#+770
   \   00000038   0xF8B7 0x0050      LDRH     R0,[R7, #+80]
   \   0000003C   0x4208             TST      R0,R1
   \   0000003E   0xD03A             BEQ.N    ??smart_fill_wlsf_0
   1905          
   1906                //const 
   1907                float weight_scaled;
   1908                if(MACHINETPYE & IS_KINEMATIC)
   1909                {
   1910                  weight_scaled = weight_factor * max(MESH_X_DIST_IS_KINEMATIC, MESH_Y_DIST_IS_KINEMATIC);
   \   00000040   0x9800             LDR      R0,[SP, #+0]
   \   00000042   0x7840             LDRB     R0,[R0, #+1]
   \   00000044   0x1E40             SUBS     R0,R0,#+1
   \   00000046   0x.... 0x....      BL       __aeabi_i2f
   \   0000004A   0x.... 0x....      LDR.W    R4,??DataTable88_5
   \   0000004E   0x4607             MOV      R7,R0
   \   00000050   0x68E0             LDR      R0,[R4, #+12]
   \   00000052   0x4641             MOV      R1,R8
   \   00000054   0x.... 0x....      BL       __aeabi_fsub
   \   00000058   0x4605             MOV      R5,R0
   \   0000005A   0x68A0             LDR      R0,[R4, #+8]
   \   0000005C   0x4641             MOV      R1,R8
   \   0000005E   0x.... 0x....      BL       __aeabi_fadd
   \   00000062   0x4601             MOV      R1,R0
   \   00000064   0x4628             MOV      R0,R5
   \   00000066   0x.... 0x....      BL       __aeabi_fsub
   \   0000006A   0x4639             MOV      R1,R7
   \   0000006C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000070   0x4605             MOV      R5,R0
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable88_3
   \   00000076   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   0000007A   0x1E40             SUBS     R0,R0,#+1
   \   0000007C   0x.... 0x....      BL       __aeabi_i2f
   \   00000080   0x4606             MOV      R6,R0
   \   00000082   0x6860             LDR      R0,[R4, #+4]
   \   00000084   0x4641             MOV      R1,R8
   \   00000086   0x.... 0x....      BL       __aeabi_fsub
   \   0000008A   0x4607             MOV      R7,R0
   \   0000008C   0x6820             LDR      R0,[R4, #+0]
   \   0000008E   0x4641             MOV      R1,R8
   \   00000090   0x.... 0x....      BL       __aeabi_fadd
   \   00000094   0x4601             MOV      R1,R0
   \   00000096   0x4638             MOV      R0,R7
   \   00000098   0x.... 0x....      BL       __aeabi_fsub
   \   0000009C   0x4631             MOV      R1,R6
   \   0000009E   0x.... 0x....      BL       __aeabi_fdiv
   \   000000A2   0x4601             MOV      R1,R0
   \   000000A4   0x4628             MOV      R0,R5
   \   000000A6   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000AA   0xBF38             IT       CC 
   \   000000AC   0x460D             MOVCC    R5,R1
   \   000000AE   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   000000B2   0x4629             MOV      R1,R5
   \   000000B4   0xE08C             B.N      ??smart_fill_wlsf_1
   1911                }
   1912                else
   1913                {
   1914                  weight_scaled = weight_factor * max(MESH_X_DIST_IS_Cartesian, MESH_Y_DIST_IS_Cartesian);
   \                     ??smart_fill_wlsf_0: (+1)
   \   000000B6   0xF8D7 0xA010      LDR      R10,[R7, #+16]
   \   000000BA   0xF04F 0x507C      MOV      R0,#+1056964608
   \   000000BE   0x4651             MOV      R1,R10
   \   000000C0   0x.... 0x....      BL       __aeabi_fmul
   \   000000C4   0x4604             MOV      R4,R0
   \   000000C6   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000000CA   0x4621             MOV      R1,R4
   \   000000CC   0x.... 0x....      BL       __aeabi_fmul
   \   000000D0   0x4641             MOV      R1,R8
   \   000000D2   0x.... 0x....      BL       __aeabi_fsub
   \   000000D6   0x4605             MOV      R5,R0
   \   000000D8   0x9800             LDR      R0,[SP, #+0]
   \   000000DA   0x6906             LDR      R6,[R0, #+16]
   \   000000DC   0x4650             MOV      R0,R10
   \   000000DE   0x4631             MOV      R1,R6
   \   000000E0   0x.... 0x....      BL       __aeabi_fadd
   \   000000E4   0x4601             MOV      R1,R0
   \   000000E6   0x4628             MOV      R0,R5
   \   000000E8   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000EC   0xBF28             IT       CS 
   \   000000EE   0x460D             MOVCS    R5,R1
   \   000000F0   0x4620             MOV      R0,R4
   \   000000F2   0x4621             MOV      R1,R4
   \   000000F4   0x.... 0x....      BL       __aeabi_fsub
   \   000000F8   0x4641             MOV      R1,R8
   \   000000FA   0x.... 0x....      BL       __aeabi_fadd
   \   000000FE   0x4604             MOV      R4,R0
   \   00000100   0x6878             LDR      R0,[R7, #+4]
   \   00000102   0x4631             MOV      R1,R6
   \   00000104   0x.... 0x....      BL       __aeabi_fadd
   \   00000108   0x4621             MOV      R1,R4
   \   0000010A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000010E   0xBF28             IT       CS 
   \   00000110   0x4604             MOVCS    R4,R0
   \   00000112   0xF8D7 0xB00C      LDR      R11,[R7, #+12]
   \   00000116   0xF04F 0x507C      MOV      R0,#+1056964608
   \   0000011A   0x4659             MOV      R1,R11
   \   0000011C   0x.... 0x....      BL       __aeabi_fmul
   \   00000120   0x4682             MOV      R10,R0
   \   00000122   0xF04F 0x4080      MOV      R0,#+1073741824
   \   00000126   0x4651             MOV      R1,R10
   \   00000128   0x.... 0x....      BL       __aeabi_fmul
   \   0000012C   0x4641             MOV      R1,R8
   \   0000012E   0x.... 0x....      BL       __aeabi_fsub
   \   00000132   0x4607             MOV      R7,R0
   \   00000134   0x9800             LDR      R0,[SP, #+0]
   \   00000136   0x68C6             LDR      R6,[R0, #+12]
   \   00000138   0x4658             MOV      R0,R11
   \   0000013A   0x4631             MOV      R1,R6
   \   0000013C   0x.... 0x....      BL       __aeabi_fadd
   \   00000140   0x4601             MOV      R1,R0
   \   00000142   0x4638             MOV      R0,R7
   \   00000144   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000148   0xBF28             IT       CS 
   \   0000014A   0x460F             MOVCS    R7,R1
   \   0000014C   0x4650             MOV      R0,R10
   \   0000014E   0x4651             MOV      R1,R10
   \   00000150   0x.... 0x....      BL       __aeabi_fsub
   \   00000154   0x4641             MOV      R1,R8
   \   00000156   0x.... 0x....      BL       __aeabi_fadd
   \   0000015A   0x4680             MOV      R8,R0
   \   0000015C   0x....             LDR.N    R0,??DataTable88_3
   \   0000015E   0x6880             LDR      R0,[R0, #+8]
   \   00000160   0x4631             MOV      R1,R6
   \   00000162   0x.... 0x....      BL       __aeabi_fadd
   \   00000166   0x4641             MOV      R1,R8
   \   00000168   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000016C   0xBF28             IT       CS 
   \   0000016E   0x4680             MOVCS    R8,R0
   \   00000170   0x9800             LDR      R0,[SP, #+0]
   \   00000172   0x7840             LDRB     R0,[R0, #+1]
   \   00000174   0x1E40             SUBS     R0,R0,#+1
   \   00000176   0x.... 0x....      BL       __aeabi_i2f
   \   0000017A   0x4606             MOV      R6,R0
   \   0000017C   0x....             LDR.N    R0,??DataTable88_3
   \   0000017E   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   00000182   0x1E40             SUBS     R0,R0,#+1
   \   00000184   0x.... 0x....      BL       __aeabi_i2f
   \   00000188   0x4682             MOV      R10,R0
   \   0000018A   0x4638             MOV      R0,R7
   \   0000018C   0x4641             MOV      R1,R8
   \   0000018E   0x.... 0x....      BL       __aeabi_fsub
   \   00000192   0x4651             MOV      R1,R10
   \   00000194   0x.... 0x....      BL       __aeabi_fdiv
   \   00000198   0x4683             MOV      R11,R0
   \   0000019A   0x4628             MOV      R0,R5
   \   0000019C   0x4621             MOV      R1,R4
   \   0000019E   0x.... 0x....      BL       __aeabi_fsub
   \   000001A2   0x4631             MOV      R1,R6
   \   000001A4   0x.... 0x....      BL       __aeabi_fdiv
   \   000001A8   0x4659             MOV      R1,R11
   \   000001AA   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001AE   0xD205             BCS.N    ??smart_fill_wlsf_2
   \   000001B0   0x4638             MOV      R0,R7
   \   000001B2   0x4641             MOV      R1,R8
   \   000001B4   0x.... 0x....      BL       __aeabi_fsub
   \   000001B8   0x4651             MOV      R1,R10
   \   000001BA   0xE004             B.N      ??smart_fill_wlsf_3
   \                     ??smart_fill_wlsf_2: (+1)
   \   000001BC   0x4628             MOV      R0,R5
   \   000001BE   0x4621             MOV      R1,R4
   \   000001C0   0x.... 0x....      BL       __aeabi_fsub
   \   000001C4   0x4631             MOV      R1,R6
   \                     ??smart_fill_wlsf_3: (+1)
   \   000001C6   0x.... 0x....      BL       __aeabi_fdiv
   \   000001CA   0x4601             MOV      R1,R0
   \   000001CC   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \                     ??smart_fill_wlsf_1: (+1)
   \   000001D0   0x.... 0x....      BL       __aeabi_fmul
   1915                }
   1916          
   1917                for (uint8_t jx = 0; jx < GRID_MAX_POINTS_X; jx++)
   \   000001D4   0x.... 0x....      LDR.W    R9,??DataTable88_1
   \   000001D8   0x900A             STR      R0,[SP, #+40]
   \   000001DA   0x2400             MOVS     R4,#+0
   \   000001DC   0xAD1B             ADD      R5,SP,#+108
   \   000001DE   0xE015             B.N      ??smart_fill_wlsf_4
   1918                  for (uint8_t jy = 0; jy < GRID_MAX_POINTS_Y; jy++)
   1919                    if (!isnan(z_values[jx][jy]))
   \                     ??smart_fill_wlsf_5: (+1)
   \   000001E0   0xF859 0x0027      LDR      R0,[R9, R7, LSL #+2]
   \   000001E4   0x.... 0x....      BL       __iar_FDtest
   \   000001E8   0x2802             CMP      R0,#+2
   \   000001EA   0xD004             BEQ.N    ??smart_fill_wlsf_6
   1920                      SBI(bitmap[jx], jy);
   \   000001EC   0x2101             MOVS     R1,#+1
   \   000001EE   0x8828             LDRH     R0,[R5, #+0]
   \   000001F0   0x40B9             LSLS     R1,R1,R7
   \   000001F2   0x4308             ORRS     R0,R1,R0
   \   000001F4   0x8028             STRH     R0,[R5, #+0]
   \                     ??smart_fill_wlsf_6: (+1)
   \   000001F6   0x1C7F             ADDS     R7,R7,#+1
   \   000001F8   0xB2FF             UXTB     R7,R7
   \                     ??smart_fill_wlsf_7: (+1)
   \   000001FA   0x9800             LDR      R0,[SP, #+0]
   \   000001FC   0x7840             LDRB     R0,[R0, #+1]
   \   000001FE   0x4287             CMP      R7,R0
   \   00000200   0xDBEE             BLT.N    ??smart_fill_wlsf_5
   \   00000202   0x1C64             ADDS     R4,R4,#+1
   \   00000204   0xB2E4             UXTB     R4,R4
   \   00000206   0xF109 0x0930      ADD      R9,R9,#+48
   \   0000020A   0x1CAD             ADDS     R5,R5,#+2
   \                     ??smart_fill_wlsf_4: (+1)
   \   0000020C   0x....             LDR.N    R0,??DataTable88_3
   \   0000020E   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   00000212   0x4284             CMP      R4,R0
   \   00000214   0xBFB8             IT       LT 
   \   00000216   0x2700             MOVLT    R7,#+0
   \   00000218   0xDBEF             BLT.N    ??smart_fill_wlsf_7
   1921          
   1922                for (uint8_t ix = 0; ix < GRID_MAX_POINTS_X; ix++) {
   \   0000021A   0x2000             MOVS     R0,#+0
   \   0000021C   0xE002             B.N      ??smart_fill_wlsf_8
   \                     ??smart_fill_wlsf_9: (+1)
   \   0000021E   0x9802             LDR      R0,[SP, #+8]
   \   00000220   0x1C40             ADDS     R0,R0,#+1
   \   00000222   0xB2C0             UXTB     R0,R0
   \                     ??smart_fill_wlsf_8: (+1)
   \   00000224   0x9002             STR      R0,[SP, #+8]
   \   00000226   0x....             LDR.N    R1,??DataTable88_3
   \   00000228   0x9802             LDR      R0,[SP, #+8]
   \   0000022A   0xF891 0x1060      LDRB     R1,[R1, #+96]
   \   0000022E   0x4288             CMP      R0,R1
   \   00000230   0xF280 0x8121      BGE.W    ??smart_fill_wlsf_10
   1923                  const float px = mesh_index_to_xpos(ix);
   \   00000234   0xB2C0             UXTB     R0,R0
   \   00000236   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   0000023A   0x9009             STR      R0,[SP, #+36]
   1924                  for (uint8_t iy = 0; iy < GRID_MAX_POINTS_Y; iy++) {
   \   0000023C   0x2000             MOVS     R0,#+0
   \   0000023E   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000242   0x9802             LDR      R0,[SP, #+8]
   \   00000244   0xEB00 0x0140      ADD      R1,R0,R0, LSL #+1
   \   00000248   0x....             LDR.N    R0,??DataTable88_1
   \   0000024A   0xEB00 0x1001      ADD      R0,R0,R1, LSL #+4
   \   0000024E   0x9008             STR      R0,[SP, #+32]
   \   00000250   0xE01D             B.N      ??smart_fill_wlsf_11
   1925                    const float py = mesh_index_to_ypos(iy);
   1926                    if (isnan(z_values[ix][iy])) {
   1927                      // undefined mesh point at (px,py), compute weighted LSF from original valid mesh points.
   1928                      incremental_LSF_reset(&lsf_results);
   1929                      for (uint8_t jx = 0; jx < GRID_MAX_POINTS_X; jx++) {
   1930                        const float rx = mesh_index_to_xpos(jx);
   1931                        for (uint8_t jy = 0; jy < GRID_MAX_POINTS_Y; jy++) {
   1932                          if (TEST(bitmap[jx], jy)) {
   1933                            const float ry = mesh_index_to_ypos(jy),
   1934                                        rz = z_values[jx][jy],
   1935                                        w  = 1.0 + weight_scaled / HYPOT((rx - px), (ry - py));
   1936                            incremental_WLSF(&lsf_results, rx, ry, rz, w);
   1937                          }
   1938                        }
   1939                      }
   1940                      if (finish_incremental_LSF(&lsf_results)) {
   1941                        SERIAL_ECHOLNPGM("Insufficient data");
   1942                        return;
   1943                      }
   1944                      const float ez = -lsf_results.D - lsf_results.A * px - lsf_results.B * py;
   1945                      z_values[ix][iy] = ez;
   \                     ??smart_fill_wlsf_12: (+1)
   \   00000252   0x9817             LDR      R0,[SP, #+92]
   \   00000254   0x9909             LDR      R1,[SP, #+36]
   \   00000256   0x.... 0x....      BL       __aeabi_fmul
   \   0000025A   0x4601             MOV      R1,R0
   \   0000025C   0x9819             LDR      R0,[SP, #+100]
   \   0000025E   0xF080 0x4000      EOR      R0,R0,#0x80000000
   \   00000262   0x.... 0x....      BL       __aeabi_fsub
   \   00000266   0x4604             MOV      R4,R0
   \   00000268   0x9818             LDR      R0,[SP, #+96]
   \   0000026A   0x9906             LDR      R1,[SP, #+24]
   \   0000026C   0x.... 0x....      BL       __aeabi_fmul
   \   00000270   0x4601             MOV      R1,R0
   \   00000272   0x4620             MOV      R0,R4
   \   00000274   0x.... 0x....      BL       __aeabi_fsub
   \   00000278   0x9A08             LDR      R2,[SP, #+32]
   \   0000027A   0x9907             LDR      R1,[SP, #+28]
   \   0000027C   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   1946                      idle();   // housekeeping
   \   00000280   0x.... 0x....      BL       _Z4idlev
   \                     ??smart_fill_wlsf_13: (+1)
   \   00000284   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000288   0x1C40             ADDS     R0,R0,#+1
   \   0000028A   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \                     ??smart_fill_wlsf_11: (+1)
   \   0000028E   0x9900             LDR      R1,[SP, #+0]
   \   00000290   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000294   0x7849             LDRB     R1,[R1, #+1]
   \   00000296   0x4288             CMP      R0,R1
   \   00000298   0xD2C1             BCS.N    ??smart_fill_wlsf_9
   \   0000029A   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   0000029E   0x9006             STR      R0,[SP, #+24]
   \   000002A0   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000002A4   0x9908             LDR      R1,[SP, #+32]
   \   000002A6   0x9007             STR      R0,[SP, #+28]
   \   000002A8   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   000002AC   0x.... 0x....      BL       __iar_FDtest
   \   000002B0   0x2802             CMP      R0,#+2
   \   000002B2   0xD1E7             BNE.N    ??smart_fill_wlsf_13
   \   000002B4   0x213C             MOVS     R1,#+60
   \   000002B6   0xA80C             ADD      R0,SP,#+48
   \   000002B8   0x.... 0x....      BL       __aeabi_memclr4
   \   000002BC   0xA81B             ADD      R0,SP,#+108
   \   000002BE   0x9005             STR      R0,[SP, #+20]
   \   000002C0   0x2400             MOVS     R4,#+0
   \   000002C2   0x....             LDR.N    R0,??DataTable88_1
   \   000002C4   0x9004             STR      R0,[SP, #+16]
   \   000002C6   0xE007             B.N      ??smart_fill_wlsf_14
   \                     ??smart_fill_wlsf_15: (+1)
   \   000002C8   0x9804             LDR      R0,[SP, #+16]
   \   000002CA   0x3030             ADDS     R0,R0,#+48
   \   000002CC   0x9004             STR      R0,[SP, #+16]
   \   000002CE   0x1C64             ADDS     R4,R4,#+1
   \   000002D0   0x9805             LDR      R0,[SP, #+20]
   \   000002D2   0x1C80             ADDS     R0,R0,#+2
   \   000002D4   0xB2E4             UXTB     R4,R4
   \   000002D6   0x9005             STR      R0,[SP, #+20]
   \                     ??smart_fill_wlsf_14: (+1)
   \   000002D8   0x....             LDR.N    R0,??DataTable88_3
   \   000002DA   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   000002DE   0x4284             CMP      R4,R0
   \   000002E0   0xF280 0x80C0      BGE.W    ??smart_fill_wlsf_16
   \   000002E4   0x4620             MOV      R0,R4
   \   000002E6   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   000002EA   0x9909             LDR      R1,[SP, #+36]
   \   000002EC   0x9003             STR      R0,[SP, #+12]
   \   000002EE   0x2500             MOVS     R5,#+0
   \   000002F0   0x.... 0x....      BL       __aeabi_fsub
   \   000002F4   0x900B             STR      R0,[SP, #+44]
   \   000002F6   0xE001             B.N      ??smart_fill_wlsf_17
   \                     ??smart_fill_wlsf_18: (+1)
   \   000002F8   0x9016             STR      R0,[SP, #+88]
   \                     ??smart_fill_wlsf_19: (+1)
   \   000002FA   0x1C6D             ADDS     R5,R5,#+1
   \                     ??smart_fill_wlsf_17: (+1)
   \   000002FC   0x9800             LDR      R0,[SP, #+0]
   \   000002FE   0x7840             LDRB     R0,[R0, #+1]
   \   00000300   0xB2ED             UXTB     R5,R5
   \   00000302   0x4285             CMP      R5,R0
   \   00000304   0xD2E0             BCS.N    ??smart_fill_wlsf_15
   \   00000306   0x9805             LDR      R0,[SP, #+20]
   \   00000308   0x8800             LDRH     R0,[R0, #+0]
   \   0000030A   0x2101             MOVS     R1,#+1
   \   0000030C   0x40A9             LSLS     R1,R1,R5
   \   0000030E   0x4208             TST      R0,R1
   \   00000310   0xD0F3             BEQ.N    ??smart_fill_wlsf_19
   \   00000312   0x4628             MOV      R0,R5
   \   00000314   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   00000318   0x4681             MOV      R9,R0
   \   0000031A   0x9804             LDR      R0,[SP, #+16]
   \   0000031C   0x9E0B             LDR      R6,[SP, #+44]
   \   0000031E   0xF850 0x7025      LDR      R7,[R0, R5, LSL #+2]
   \   00000322   0xF04F 0x0A02      MOV      R10,#+2
   \   00000326   0xF04F 0x587E      MOV      R8,#+1065353216
   \   0000032A   0xE004             B.N      ??smart_fill_wlsf_20
   \                     ??smart_fill_wlsf_21: (+1)
   \   0000032C   0x4630             MOV      R0,R6
   \   0000032E   0x4631             MOV      R1,R6
   \   00000330   0x.... 0x....      BL       __aeabi_fmul
   \   00000334   0x4606             MOV      R6,R0
   \                     ??smart_fill_wlsf_20: (+1)
   \   00000336   0xEA5F 0x70CA      LSLS     R0,R10,#+31
   \   0000033A   0xD504             BPL.N    ??smart_fill_wlsf_22
   \   0000033C   0x4640             MOV      R0,R8
   \   0000033E   0x4631             MOV      R1,R6
   \   00000340   0x.... 0x....      BL       __aeabi_fmul
   \   00000344   0x4680             MOV      R8,R0
   \                     ??smart_fill_wlsf_22: (+1)
   \   00000346   0xEA5F 0x0A5A      LSRS     R10,R10,#+1
   \   0000034A   0xD1EF             BNE.N    ??smart_fill_wlsf_21
   \   0000034C   0x9906             LDR      R1,[SP, #+24]
   \   0000034E   0x4648             MOV      R0,R9
   \   00000350   0x.... 0x....      BL       __aeabi_fsub
   \   00000354   0x4683             MOV      R11,R0
   \   00000356   0x2602             MOVS     R6,#+2
   \   00000358   0xF04F 0x5A7E      MOV      R10,#+1065353216
   \   0000035C   0xE004             B.N      ??smart_fill_wlsf_23
   \                     ??smart_fill_wlsf_24: (+1)
   \   0000035E   0x4658             MOV      R0,R11
   \   00000360   0x4659             MOV      R1,R11
   \   00000362   0x.... 0x....      BL       __aeabi_fmul
   \   00000366   0x4683             MOV      R11,R0
   \                     ??smart_fill_wlsf_23: (+1)
   \   00000368   0x07F0             LSLS     R0,R6,#+31
   \   0000036A   0xD504             BPL.N    ??smart_fill_wlsf_25
   \   0000036C   0x4650             MOV      R0,R10
   \   0000036E   0x4659             MOV      R1,R11
   \   00000370   0x.... 0x....      BL       __aeabi_fmul
   \   00000374   0x4682             MOV      R10,R0
   \                     ??smart_fill_wlsf_25: (+1)
   \   00000376   0x0876             LSRS     R6,R6,#+1
   \   00000378   0xD1F1             BNE.N    ??smart_fill_wlsf_24
   \   0000037A   0x4640             MOV      R0,R8
   \   0000037C   0x4651             MOV      R1,R10
   \   0000037E   0x.... 0x....      BL       __aeabi_fadd
   \   00000382   0x.... 0x....      BL       sqrtf
   \   00000386   0x4601             MOV      R1,R0
   \   00000388   0x980A             LDR      R0,[SP, #+40]
   \   0000038A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000038E   0xF04F 0x517E      MOV      R1,#+1065353216
   \   00000392   0x.... 0x....      BL       __aeabi_fadd
   \   00000396   0x4680             MOV      R8,R0
   \   00000398   0x9803             LDR      R0,[SP, #+12]
   \   0000039A   0x4641             MOV      R1,R8
   \   0000039C   0x.... 0x....      BL       __aeabi_fmul
   \   000003A0   0x4606             MOV      R6,R0
   \   000003A2   0x980C             LDR      R0,[SP, #+48]
   \   000003A4   0x4631             MOV      R1,R6
   \   000003A6   0x.... 0x....      BL       __aeabi_fadd
   \   000003AA   0x900C             STR      R0,[SP, #+48]
   \   000003AC   0x4649             MOV      R1,R9
   \   000003AE   0x4640             MOV      R0,R8
   \   000003B0   0x.... 0x....      BL       __aeabi_fmul
   \   000003B4   0x4682             MOV      R10,R0
   \   000003B6   0x980D             LDR      R0,[SP, #+52]
   \   000003B8   0x4651             MOV      R1,R10
   \   000003BA   0x.... 0x....      BL       __aeabi_fadd
   \   000003BE   0x900D             STR      R0,[SP, #+52]
   \   000003C0   0x4639             MOV      R1,R7
   \   000003C2   0x4640             MOV      R0,R8
   \   000003C4   0x.... 0x....      BL       __aeabi_fmul
   \   000003C8   0x4683             MOV      R11,R0
   \   000003CA   0x980E             LDR      R0,[SP, #+56]
   \   000003CC   0x4659             MOV      R1,R11
   \   000003CE   0x.... 0x....      BL       __aeabi_fadd
   \   000003D2   0x900E             STR      R0,[SP, #+56]
   \   000003D4   0x4631             MOV      R1,R6
   \   000003D6   0x9803             LDR      R0,[SP, #+12]
   \   000003D8   0x.... 0x....      BL       __aeabi_fmul
   \   000003DC   0x990F             LDR      R1,[SP, #+60]
   \   000003DE   0x.... 0x....      BL       __aeabi_fadd
   \   000003E2   0x900F             STR      R0,[SP, #+60]
   \   000003E4   0x4649             MOV      R1,R9
   \   000003E6   0x4650             MOV      R0,R10
   \   000003E8   0x.... 0x....      BL       __aeabi_fmul
   \   000003EC   0x9910             LDR      R1,[SP, #+64]
   \   000003EE   0x.... 0x....      BL       __aeabi_fadd
   \   000003F2   0x9010             STR      R0,[SP, #+64]
   \   000003F4   0x4639             MOV      R1,R7
   \   000003F6   0x4658             MOV      R0,R11
   \   000003F8   0x.... 0x....      BL       __aeabi_fmul
   \   000003FC   0x9911             LDR      R1,[SP, #+68]
   \   000003FE   0x.... 0x....      BL       __aeabi_fadd
   \   00000402   0x9011             STR      R0,[SP, #+68]
   \   00000404   0x4649             MOV      R1,R9
   \   00000406   0x4630             MOV      R0,R6
   \   00000408   0x.... 0x....      BL       __aeabi_fmul
   \   0000040C   0x9912             LDR      R1,[SP, #+72]
   \   0000040E   0x.... 0x....      BL       __aeabi_fadd
   \   00000412   0x9012             STR      R0,[SP, #+72]
   \   00000414   0x4639             MOV      R1,R7
   \   00000416   0x4630             MOV      R0,R6
   \   00000418   0x.... 0x....      BL       __aeabi_fmul
   \   0000041C   0x9913             LDR      R1,[SP, #+76]
   \   0000041E   0x.... 0x....      BL       __aeabi_fadd
   \   00000422   0x9013             STR      R0,[SP, #+76]
   \   00000424   0x4639             MOV      R1,R7
   \   00000426   0x4650             MOV      R0,R10
   \   00000428   0x.... 0x....      BL       __aeabi_fmul
   \   0000042C   0x9914             LDR      R1,[SP, #+80]
   \   0000042E   0x.... 0x....      BL       __aeabi_fadd
   \   00000432   0x9014             STR      R0,[SP, #+80]
   \   00000434   0x4641             MOV      R1,R8
   \   00000436   0x981A             LDR      R0,[SP, #+104]
   \   00000438   0x.... 0x....      BL       __aeabi_fadd
   \   0000043C   0x901A             STR      R0,[SP, #+104]
   \   0000043E   0xF026 0x4100      BIC      R1,R6,#0x80000000
   \   00000442   0x9815             LDR      R0,[SP, #+84]
   \   00000444   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000448   0xBF38             IT       CC 
   \   0000044A   0xF026 0x4000      BICCC    R0,R6,#0x80000000
   \   0000044E   0x9015             STR      R0,[SP, #+84]
   \   00000450   0xF02A 0x4100      BIC      R1,R10,#0x80000000
   \   00000454   0x9816             LDR      R0,[SP, #+88]
   \   00000456   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000045A   0xF4BF 0xAF4D      BCS.W    ??smart_fill_wlsf_18
   \   0000045E   0xF02A 0x4000      BIC      R0,R10,#0x80000000
   \   00000462   0xE749             B.N      ??smart_fill_wlsf_18
   \                     ??smart_fill_wlsf_16: (+1)
   \   00000464   0xA80C             ADD      R0,SP,#+48
   \   00000466   0x.... 0x....      BL       _Z22finish_incremental_LSFP15linear_fit_data
   \   0000046A   0x2800             CMP      R0,#+0
   \   0000046C   0xF43F 0xAEF1      BEQ.W    ??smart_fill_wlsf_12
   \   00000470   0x.... 0x....      ADR.W    R0,`?<Constant "Insufficient data\\n">`
   \   00000474   0xE001             B.N      ??smart_fill_wlsf_26
   1947                    }
   1948                  }
   1949                }
   1950          
   1951                SERIAL_ECHOLNPGM("done");
   \                     ??smart_fill_wlsf_10: (+1)
   \   00000476   0x.... 0x....      ADR.W    R0,`?<Constant "done\\n">`
   \                     ??smart_fill_wlsf_26: (+1)
   \   0000047A   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1952              }
   \   0000047E   0xB021             ADD      SP,SP,#+132
   \   00000480   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Attempt to probe off ...">`:
   \   00000000   0x41 0x74          DC8 "Attempt to probe off the bed.\012"
   \              0x74 0x65    
   \              0x6D 0x70    
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x20 0x70    
   \              0x72 0x6F    
   \              0x62 0x65    
   \              0x20 0x6F    
   \              0x66 0x66    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x62    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Default storage slot ...">`:
   \   00000000   0x44 0x65          DC8 "Default storage slot 0 selected.\012"
   \              0x66 0x61    
   \              0x75 0x6C    
   \              0x74 0x20    
   \              0x73 0x74    
   \              0x6F 0x72    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x73 0x6C    
   \              0x6F 0x74    
   \              0x20 0x30    
   \              0x20 0x73    
   \              0x65 0x6C    
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Mesh zeroed.\\n">`:
   \   00000000   0x4D 0x65          DC8 "Mesh zeroed.\012"
   \              0x73 0x68    
   \              0x20 0x7A    
   \              0x65 0x72    
   \              0x6F 0x65    
   \              0x64 0x2E    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Mesh invalidated. Pro...">`:
   \   00000000   0x4D 0x65          DC8 "Mesh invalidated. Probing mesh.\012"
   \              0x73 0x68    
   \              0x20 0x69    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x61 0x74    
   \              0x65 0x64    
   \              0x2E 0x20    
   \              0x50 0x72    
   \              0x6F 0x62    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6D 0x65    
   \              0x73 0x68    
   \              0x2E 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Probing Mesh Points C...">`:
   \   00000000   0x50 0x72          DC8 "Probing Mesh Points Closest to ("
   \              0x6F 0x62    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x4D 0x65    
   \              0x73 0x68    
   \              0x20 0x50    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x73 0x20    
   \              0x43 0x6C    
   \              0x6F 0x73    
   \              0x65 0x73    
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x20 0x28    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ").\\n\\n">`:
   \   00000000   0x29 0x2E          DC8 ").\012\012"
   \              0x0A 0x0A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?P2 is only available...">`:
   \   00000000   0x3F 0x50          DC8 "?P2 is only available when an LCD is present.\012"
   \              0x32 0x20    
   \              0x69 0x73    
   \              0x20 0x6F    
   \              0x6E 0x6C    
   \              0x79 0x20    
   \              0x61 0x76    
   \              0x61 0x69    
   \              0x6C 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x77 0x68    
   \              0x65 0x6E    
   \              0x20 0x61    
   \              0x6E 0x20    
   \              0x4C 0x43    
   \              0x44 0x20    
   \              0x69 0x73    
   \              0x20 0x70    
   \              0x72 0x65    
   \              0x73 0x65    
   \              0x6E 0x74    
   \              0x2E 0x0A    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?P4 is only available...">`:
   \   00000000   0x3F 0x50          DC8 "?P4 is only available when an LCD is present.\012"
   \              0x34 0x20    
   \              0x69 0x73    
   \              0x20 0x6F    
   \              0x6E 0x6C    
   \              0x79 0x20    
   \              0x61 0x76    
   \              0x61 0x69    
   \              0x6C 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x77 0x68    
   \              0x65 0x6E    
   \              0x20 0x61    
   \              0x6E 0x20    
   \              0x4C 0x43    
   \              0x44 0x20    
   \              0x69 0x73    
   \              0x20 0x70    
   \              0x72 0x65    
   \              0x73 0x65    
   \              0x6E 0x74    
   \              0x2E 0x0A    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "G29 I 999\\n">`:
   \   00000000   0x47 0x32          DC8 "G29 I 999\012"
   \              0x39 0x20    
   \              0x49 0x20    
   \              0x39 0x39    
   \              0x39 0x0A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " ; X ">`:
   \   00000000   0x20 0x3B          DC8 " ; X "
   \              0x20 0x58    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ", Y ">`:
   \   00000000   0x2C 0x20          DC8 ", Y "
   \              0x59 0x20    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "M421 I ">`:
   \   00000000   0x4D 0x34          DC8 "M421 I "
   \              0x32 0x31    
   \              0x20 0x49    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Done.\\n">`:
   \   00000000   0x44 0x6F          DC8 "Done.\012"
   \              0x6E 0x65    
   \              0x2E 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75:
   \   00000000   0x........         DC32     _ZN11GCodeParser11command_ptrE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75_1:
   \   00000000   0x........         DC32     _ZN20unified_bed_leveling10g29_c_flagE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75_2:
   \   00000000   0x........         DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75_3:
   \   00000000   0x........         DC32     _ZN20unified_bed_leveling8z_valuesE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75_4:
   \   00000000   0x........         DC32     `?<Constant "Entire Mesh invalidat...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75_5:
   \   00000000   0x........         DC32     `?<Constant "Locations invalidated.\\n\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75_6:
   \   00000000   0x........         DC32     `?<Constant "Invalid test_pattern ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75_7:
   \   00000000   0x........         DC32     `?<Constant "Loading test_pattern ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "# of samples: ">`:
   \   00000000   0x23 0x20          DC8 "# of samples: "
   \              0x6F 0x66    
   \              0x20 0x73    
   \              0x61 0x6D    
   \              0x70 0x6C    
   \              0x65 0x73    
   \              0x3A 0x20    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Mean Mesh Height: ">`:
   \   00000000   0x4D 0x65          DC8 "Mean Mesh Height: "
   \              0x61 0x6E    
   \              0x20 0x4D    
   \              0x65 0x73    
   \              0x68 0x20    
   \              0x48 0x65    
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x3A 0x20    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Standard Deviation: ">`:
   \   00000000   0x53 0x74          DC8 "Standard Deviation: "
   \              0x61 0x6E    
   \              0x64 0x61    
   \              0x72 0x64    
   \              0x20 0x44    
   \              0x65 0x76    
   \              0x69 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x3A 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable76:
   \   00000000   0x3FE00000         DC32     0x3fe00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable76_1:
   \   00000000   0xED916873         DC32     0xed916873

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable76_2:
   \   00000000   0x4023FF7C         DC32     0x4023ff7c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable76_3:
   \   00000000   0x47AE147B         DC32     0x47ae147b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable76_4:
   \   00000000   0x4023FAE1         DC32     0x4023fae1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77:
   \   00000000   0x........         DC32     _ZN7Planner15leveling_activeE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77_1:
   \   00000000   0x........         DC32     errormagic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77_2:
   \   00000000   0x........         DC32     mksTmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78:
   \   00000000   0x........         DC32     _ZN20unified_bed_leveling12storage_slotE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_1:
   \   00000000   0x........         DC32     Serial3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_2:
   \   00000000   0x5D 0x0A          DC8      0x5D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_3:
   \   00000000   0x20 0x0A          DC8      0x20, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_4:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_5:
   \   00000000   0xCCCCCCCD         DC32     0xcccccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_6:
   \   00000000   0xC008CCCC         DC32     0xc008cccc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_7:
   \   00000000   0x40590000         DC32     0x40590000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_8:
   \   00000000   0x........         DC32     workspace_offset

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "rotation matrix:">`:
   \   00000000   0x72 0x6F          DC8 "rotation matrix:"
   \              0x74 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x6D    
   \              0x61 0x74    
   \              0x72 0x69    
   \              0x78 0x3A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "D constant: ">`:
   \   00000000   0x44 0x20          DC8 "D constant: "
   \              0x63 0x6F    
   \              0x6E 0x73    
   \              0x74 0x61    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79:
   \   00000000   0x........         DC32     `?<Constant "?EEPROM storage not a...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_1:
   \   00000000   0x........         DC32     `?<Constant "?Invalid storage slot.\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_2:
   \   00000000   0x........         DC32     `?<Constant "?Use 0 to ">`

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?(R)epetition count i...">`:
   \   00000000   0x3F 0x28          DC8 "?(R)epetition count invalid (1+).\012\012"
   \              0x52 0x29    
   \              0x65 0x70    
   \              0x65 0x74    
   \              0x69 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x63 0x6F    
   \              0x75 0x6E    
   \              0x74 0x20    
   \              0x69 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x28 0x31    
   \              0x2B 0x29    
   \              0x2E 0x0A    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?(V)erbose level is i...">`:
   \   00000000   0x3F 0x28          DC8 "?(V)erbose level is implausible (0-4).\012\012"
   \              0x56 0x29    
   \              0x65 0x72    
   \              0x62 0x6F    
   \              0x73 0x65    
   \              0x20 0x6C    
   \              0x65 0x76    
   \              0x65 0x6C    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x69 0x6D    
   \              0x70 0x6C    
   \              0x61 0x75    
   \              0x73 0x69    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x28 0x30    
   \              0x2D 0x34    
   \              0x29 0x2E    
   \              0x0A 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?(P)hase value invali...">`:
   \   00000000   0x3F 0x28          DC8 "?(P)hase value invalid (0-6).\012\012"
   \              0x50 0x29    
   \              0x68 0x61    
   \              0x73 0x65    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x20 0x69    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x28    
   \              0x30 0x2D    
   \              0x36 0x29    
   \              0x2E 0x0A    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?Invalid grid size (J...">`:
   \   00000000   0x3F 0x49          DC8 "?Invalid grid size (J) specified (2-9).\012\012"
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x67    
   \              0x72 0x69    
   \              0x64 0x20    
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x20 0x28    
   \              0x4A 0x29    
   \              0x20 0x73    
   \              0x70 0x65    
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x65 0x64    
   \              0x20 0x28    
   \              0x32 0x2D    
   \              0x39 0x29    
   \              0x2E 0x0A    
   \              0x0A 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Both X & Y locations ...">`:
   \   00000000   0x42 0x6F          DC8 "Both X & Y locations must be specified.\012\012"
   \              0x74 0x68    
   \              0x20 0x58    
   \              0x20 0x26    
   \              0x20 0x59    
   \              0x20 0x6C    
   \              0x6F 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x73    
   \              0x20 0x6D    
   \              0x75 0x73    
   \              0x74 0x20    
   \              0x62 0x65    
   \              0x20 0x73    
   \              0x70 0x65    
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x0A 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?Can\\'t activate and d...">`:
   \   00000000   0x3F 0x43          DC8 3FH, 43H, 61H, 6EH, 27H, 74H, 20H, 61H
   \              0x61 0x6E    
   \              0x27 0x74    
   \              0x20 0x61    
   \   00000008   0x63 0x74          DC8 63H, 74H, 69H, 76H, 61H, 74H, 65H, 20H
   \              0x69 0x76    
   \              0x61 0x74    
   \              0x65 0x20    
   \   00000010   0x61 0x6E          DC8 61H, 6EH, 64H, 20H, 64H, 65H, 61H, 63H
   \              0x64 0x20    
   \              0x64 0x65    
   \              0x61 0x63    
   \   00000018   0x74 0x69          DC8 74H, 69H, 76H, 61H, 74H, 65H, 20H, 61H
   \              0x76 0x61    
   \              0x74 0x65    
   \              0x20 0x61    
   \   00000020   0x74 0x20          DC8 74H, 20H, 74H, 68H, 65H, 20H, 73H, 61H
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x73 0x61    
   \   00000028   0x6D 0x65          DC8 6DH, 65H, 20H, 74H, 69H, 6DH, 65H, 2EH
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x2E    
   \   00000030   0x0A 0x0A          DC8 0AH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?(F)ade height for Be...">`:
   \   00000000   0x3F 0x28          DC8 3FH, 28H, 46H, 29H, 61H, 64H, 65H, 20H
   \              0x46 0x29    
   \              0x61 0x64    
   \              0x65 0x20    
   \   00000008   0x68 0x65          DC8 68H, 65H, 69H, 67H, 68H, 74H, 20H, 66H
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x20 0x66    
   \   00000010   0x6F 0x72          DC8 6FH, 72H, 20H, 42H, 65H, 64H, 20H, 4CH
   \              0x20 0x42    
   \              0x65 0x64    
   \              0x20 0x4C    
   \   00000018   0x65 0x76          DC8 65H, 76H, 65H, 6CH, 20H, 43H, 6FH, 72H
   \              0x65 0x6C    
   \              0x20 0x43    
   \              0x6F 0x72    
   \   00000020   0x72 0x65          DC8 72H, 65H, 63H, 74H, 69H, 6FH, 6EH, 20H
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \   00000028   0x6E 0x6F          DC8 6EH, 6FH, 74H, 20H, 70H, 6CH, 61H, 75H
   \              0x74 0x20    
   \              0x70 0x6C    
   \              0x61 0x75    
   \   00000030   0x73 0x69          DC8 73H, 69H, 62H, 6CH, 65H, 2EH, 0AH, 0AH
   \              0x62 0x6C    
   \              0x65 0x2E    
   \              0x0A 0x0A    
   \   00000038   0x00               DC8 0
   \   00000039   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Invalid map type.\\n\\n">`:
   \   00000000   0x49 0x6E          DC8 "Invalid map type.\012\012"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x6D 0x61    
   \              0x70 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x2E 0x0A    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable81:
   \   00000000   0x........         DC32     mksCfg+0x60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable81_1:
   \   00000000   0x........         DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable81_2:
   \   00000000   0x........         DC32     _ZN20unified_bed_leveling10g29_c_flagE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable81_3:
   \   00000000   0x........         DC32     _ZN20unified_bed_leveling8z_valuesE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable82:
   \   00000000   0x20 0x20          DC8      0x20, 0x20, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable82_1:
   \   00000000   0x........         DC32     `?<Constant "bed plane normal = [">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable82_2:
   \   00000000   0x........         DC32     _ZN11GCodeParser8codebitsE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable82_3:
   \   00000000   0x........         DC32     _ZN11GCodeParser9value_ptrE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable82_4:
   \   00000000   0x........         DC32     _ZN11GCodeParser5paramE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable82_5:
   \   00000000   0x........         DC32     _ZN11GCodeParser11command_ptrE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable82_6:
   \   00000000   0x........         DC32     current_position

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No Mesh Loaded.">`:
   \   00000000   0x4E 0x6F          DC8 "No Mesh Loaded."
   \              0x20 0x4D    
   \              0x65 0x73    
   \              0x68 0x20    
   \              0x4C 0x6F    
   \              0x61 0x64    
   \              0x65 0x64    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Mesh ">`:
   \   00000000   0x4D 0x65          DC8 "Mesh "
   \              0x73 0x68    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Loaded.">`:
   \   00000000   0x20 0x4C          DC8 " Loaded."
   \              0x6F 0x61    
   \              0x64 0x65    
   \              0x64 0x2E    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "UBL object count: ">`:
   \   00000000   0x55 0x42          DC8 "UBL object count: "
   \              0x4C 0x20    
   \              0x6F 0x62    
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x20 0x63    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "planner.z_fade_height : ">`:
   \   00000000   0x70 0x6C          DC8 "planner.z_fade_height : "
   \              0x61 0x6E    
   \              0x6E 0x65    
   \              0x72 0x2E    
   \              0x7A 0x5F    
   \              0x66 0x61    
   \              0x64 0x65    
   \              0x5F 0x68    
   \              0x65 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x3A 0x20    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "zprobe_zoffset: ">`:
   \   00000000   0x7A 0x70          DC8 "zprobe_zoffset: "
   \              0x72 0x6F    
   \              0x62 0x65    
   \              0x5F 0x7A    
   \              0x6F 0x66    
   \              0x66 0x73    
   \              0x65 0x74    
   \              0x3A 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MESH_MIN_X  (mksTmp.m...">`:
   \   00000000   0x4D 0x45          DC8 4DH, 45H, 53H, 48H, 5FH, 4DH, 49H, 4EH
   \              0x53 0x48    
   \              0x5F 0x4D    
   \              0x49 0x4E    
   \   00000008   0x5F 0x58          DC8 5FH, 58H, 20H, 20H, 28H, 6DH, 6BH, 73H
   \              0x20 0x20    
   \              0x28 0x6D    
   \              0x6B 0x73    
   \   00000010   0x54 0x6D          DC8 54H, 6DH, 70H, 2EH, 6DH, 69H, 6EH, 5FH
   \              0x70 0x2E    
   \              0x6D 0x69    
   \              0x6E 0x5F    
   \   00000018   0x70 0x72          DC8 70H, 72H, 6FH, 62H, 65H, 5FH, 78H, 20H
   \              0x6F 0x62    
   \              0x65 0x5F    
   \              0x78 0x20    
   \   00000020   0x2B 0x20          DC8 2BH, 20H, 6DH, 6BH, 73H, 43H, 66H, 67H
   \              0x6D 0x6B    
   \              0x73 0x43    
   \              0x66 0x67    
   \   00000028   0x2E 0x6D          DC8 2EH, 6DH, 65H, 73H, 68H, 5FH, 69H, 6EH
   \              0x65 0x73    
   \              0x68 0x5F    
   \              0x69 0x6E    
   \   00000030   0x73 0x74          DC8 73H, 74H, 29H, 3DH, 0
   \              0x29 0x3D    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MESH_MIN_Y  (mksTmp.m...">`:
   \   00000000   0x4D 0x45          DC8 4DH, 45H, 53H, 48H, 5FH, 4DH, 49H, 4EH
   \              0x53 0x48    
   \              0x5F 0x4D    
   \              0x49 0x4E    
   \   00000008   0x5F 0x59          DC8 5FH, 59H, 20H, 20H, 28H, 6DH, 6BH, 73H
   \              0x20 0x20    
   \              0x28 0x6D    
   \              0x6B 0x73    
   \   00000010   0x54 0x6D          DC8 54H, 6DH, 70H, 2EH, 6DH, 69H, 6EH, 5FH
   \              0x70 0x2E    
   \              0x6D 0x69    
   \              0x6E 0x5F    
   \   00000018   0x70 0x72          DC8 70H, 72H, 6FH, 62H, 65H, 5FH, 79H, 20H
   \              0x6F 0x62    
   \              0x65 0x5F    
   \              0x79 0x20    
   \   00000020   0x2B 0x20          DC8 2BH, 20H, 6DH, 6BH, 73H, 43H, 66H, 67H
   \              0x6D 0x6B    
   \              0x73 0x43    
   \              0x66 0x67    
   \   00000028   0x2E 0x6D          DC8 2EH, 6DH, 65H, 73H, 68H, 5FH, 69H, 6EH
   \              0x65 0x73    
   \              0x68 0x5F    
   \              0x69 0x6E    
   \   00000030   0x73 0x74          DC8 73H, 74H, 29H, 3DH, 0
   \              0x29 0x3D    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MESH_MAX_X  (mksTmp.m...">`:
   \   00000000   0x4D 0x45          DC8 4DH, 45H, 53H, 48H, 5FH, 4DH, 41H, 58H
   \              0x53 0x48    
   \              0x5F 0x4D    
   \              0x41 0x58    
   \   00000008   0x5F 0x58          DC8 5FH, 58H, 20H, 20H, 28H, 6DH, 6BH, 73H
   \              0x20 0x20    
   \              0x28 0x6D    
   \              0x6B 0x73    
   \   00000010   0x54 0x6D          DC8 54H, 6DH, 70H, 2EH, 6DH, 61H, 78H, 5FH
   \              0x70 0x2E    
   \              0x6D 0x61    
   \              0x78 0x5F    
   \   00000018   0x70 0x72          DC8 70H, 72H, 6FH, 62H, 65H, 5FH, 78H, 20H
   \              0x6F 0x62    
   \              0x65 0x5F    
   \              0x78 0x20    
   \   00000020   0x2D 0x20          DC8 2DH, 20H, 28H, 6DH, 6BH, 73H, 43H, 66H
   \              0x28 0x6D    
   \              0x6B 0x73    
   \              0x43 0x66    
   \   00000028   0x67 0x2E          DC8 67H, 2EH, 6DH, 65H, 73H, 68H, 5FH, 69H
   \              0x6D 0x65    
   \              0x73 0x68    
   \              0x5F 0x69    
   \   00000030   0x6E 0x73          DC8 6EH, 73H, 74H, 29H, 29H, 3DH, 0
   \              0x74 0x29    
   \              0x29 0x3D    
   \              0x00         
   \   00000037   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MESH_MAX_Y  (mksTmp.m...">`:
   \   00000000   0x4D 0x45          DC8 4DH, 45H, 53H, 48H, 5FH, 4DH, 41H, 58H
   \              0x53 0x48    
   \              0x5F 0x4D    
   \              0x41 0x58    
   \   00000008   0x5F 0x59          DC8 5FH, 59H, 20H, 20H, 28H, 6DH, 6BH, 73H
   \              0x20 0x20    
   \              0x28 0x6D    
   \              0x6B 0x73    
   \   00000010   0x54 0x6D          DC8 54H, 6DH, 70H, 2EH, 6DH, 61H, 78H, 5FH
   \              0x70 0x2E    
   \              0x6D 0x61    
   \              0x78 0x5F    
   \   00000018   0x70 0x72          DC8 70H, 72H, 6FH, 62H, 65H, 5FH, 79H, 20H
   \              0x6F 0x62    
   \              0x65 0x5F    
   \              0x79 0x20    
   \   00000020   0x2D 0x20          DC8 2DH, 20H, 28H, 6DH, 6BH, 73H, 43H, 66H
   \              0x28 0x6D    
   \              0x6B 0x73    
   \              0x43 0x66    
   \   00000028   0x67 0x2E          DC8 67H, 2EH, 6DH, 65H, 73H, 68H, 5FH, 69H
   \              0x6D 0x65    
   \              0x73 0x68    
   \              0x5F 0x69    
   \   00000030   0x6E 0x73          DC8 6EH, 73H, 74H, 29H, 29H, 3DH, 0
   \              0x74 0x29    
   \              0x29 0x3D    
   \              0x00         
   \   00000037   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MESH_MIN_X  (((((((mk...">`:
   \   00000000   0x4D 0x45          DC8 4DH, 45H, 53H, 48H, 5FH, 4DH, 49H, 4EH
   \              0x53 0x48    
   \              0x5F 0x4D    
   \              0x49 0x4E    
   \   00000008   0x5F 0x58          DC8 5FH, 58H, 20H, 20H, 28H, 28H, 28H, 28H
   \              0x20 0x20    
   \              0x28 0x28    
   \              0x28 0x28    
   \   00000010   0x28 0x28          DC8 28H, 28H, 28H, 6DH, 6BH, 73H, 43H, 66H
   \              0x28 0x6D    
   \              0x6B 0x73    
   \              0x43 0x66    
   \   00000018   0x67 0x2E          DC8 67H, 2EH, 78H, 5FH, 6DH, 61H, 78H, 5FH
   \              0x78 0x5F    
   \              0x6D 0x61    
   \              0x78 0x5F    
   \   00000020   0x70 0x6F          DC8 70H, 6FH, 73H, 29H, 20H, 2FH, 20H, 32H
   \              0x73 0x29    
   \              0x20 0x2F    
   \              0x20 0x32    
   \   00000028   0x29 0x20          DC8 29H, 20H, 2DH, 20H, 28H, 6DH, 6BH, 73H
   \              0x2D 0x20    
   \              0x28 0x6D    
   \              0x6B 0x73    
   \   00000030   0x43 0x66          DC8 43H, 66H, 67H, 2EH, 78H, 5FH, 6DH, 61H
   \              0x67 0x2E    
   \              0x78 0x5F    
   \              0x6D 0x61    
   \   00000038   0x78 0x5F          DC8 78H, 5FH, 70H, 6FH, 73H, 29H, 20H, 2FH
   \              0x70 0x6F    
   \              0x73 0x29    
   \              0x20 0x2F    
   \   00000040   0x20 0x32          DC8 20H, 32H, 29H, 20H, 2BH, 20H, 6DH, 6BH
   \              0x29 0x20    
   \              0x2B 0x20    
   \              0x6D 0x6B    
   \   00000048   0x73 0x43          DC8 73H, 43H, 66H, 67H, 2EH, 6DH, 65H, 73H
   \              0x66 0x67    
   \              0x2E 0x6D    
   \              0x65 0x73    
   \   00000050   0x68 0x5F          DC8 68H, 5FH, 69H, 6EH, 73H, 74H, 29H, 3EH
   \              0x69 0x6E    
   \              0x73 0x74    
   \              0x29 0x3E    
   \   00000058   0x28 0x6D          DC8 28H, 6DH, 6BH, 73H, 43H, 66H, 67H, 2EH
   \              0x6B 0x73    
   \              0x43 0x66    
   \              0x67 0x2E    
   \   00000060   0x78 0x5F          DC8 78H, 5FH, 6DH, 69H, 6EH, 5FH, 70H, 6FH
   \              0x6D 0x69    
   \              0x6E 0x5F    
   \              0x70 0x6F    
   \   00000068   0x73 0x20          DC8 73H, 20H, 2BH, 20H, 6DH, 6BH, 73H, 43H
   \              0x2B 0x20    
   \              0x6D 0x6B    
   \              0x73 0x43    
   \   00000070   0x66 0x67          DC8 66H, 67H, 2EH, 78H, 5FH, 70H, 72H, 6FH
   \              0x2E 0x78    
   \              0x5F 0x70    
   \              0x72 0x6F    
   \   00000078   0x62 0x65          DC8 62H, 65H, 5FH, 6FH, 66H, 66H, 73H, 65H
   \              0x5F 0x6F    
   \              0x66 0x66    
   \              0x73 0x65    
   \   00000080   0x74 0x5F          DC8 74H, 5FH, 66H, 72H, 6FH, 6DH, 5FH, 65H
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x5F 0x65    
   \   00000088   0x78 0x74          DC8 78H, 74H, 72H, 75H, 64H, 65H, 72H, 29H
   \              0x72 0x75    
   \              0x64 0x65    
   \              0x72 0x29    
   \   00000090   0x29 0x3F          DC8 29H, 3FH, 28H, 28H, 28H, 28H, 6DH, 6BH
   \              0x28 0x28    
   \              0x28 0x28    
   \              0x6D 0x6B    
   \   00000098   0x73 0x43          DC8 73H, 43H, 66H, 67H, 2EH, 78H, 5FH, 6DH
   \              0x66 0x67    
   \              0x2E 0x78    
   \              0x5F 0x6D    
   \   000000A0   0x61 0x78          DC8 61H, 78H, 5FH, 70H, 6FH, 73H, 29H, 20H
   \              0x5F 0x70    
   \              0x6F 0x73    
   \              0x29 0x20    
   \   000000A8   0x2F 0x20          DC8 2FH, 20H, 32H, 29H, 20H, 2DH, 20H, 28H
   \              0x32 0x29    
   \              0x20 0x2D    
   \              0x20 0x28    
   \   000000B0   0x6D 0x6B          DC8 6DH, 6BH, 73H, 43H, 66H, 67H, 2EH, 78H
   \              0x73 0x43    
   \              0x66 0x67    
   \              0x2E 0x78    
   \   000000B8   0x5F 0x6D          DC8 5FH, 6DH, 61H, 78H, 5FH, 70H, 6FH, 73H
   \              0x61 0x78    
   \              0x5F 0x70    
   \              0x6F 0x73    
   \   000000C0   0x29 0x20          DC8 29H, 20H, 2FH, 20H, 32H, 29H, 20H, 2BH
   \              0x2F 0x20    
   \              0x32 0x29    
   \              0x20 0x2B    
   \   000000C8   0x20 0x6D          DC8 20H, 6DH, 6BH, 73H, 43H, 66H, 67H, 2EH
   \              0x6B 0x73    
   \              0x43 0x66    
   \              0x67 0x2E    
   \   000000D0   0x6D 0x65          DC8 6DH, 65H, 73H, 68H, 5FH, 69H, 6EH, 73H
   \              0x73 0x68    
   \              0x5F 0x69    
   \              0x6E 0x73    
   \   000000D8   0x74 0x29          DC8 74H, 29H, 3AH, 28H, 6DH, 6BH, 73H, 43H
   \              0x3A 0x28    
   \              0x6D 0x6B    
   \              0x73 0x43    
   \   000000E0   0x66 0x67          DC8 66H, 67H, 2EH, 78H, 5FH, 6DH, 69H, 6EH
   \              0x2E 0x78    
   \              0x5F 0x6D    
   \              0x69 0x6E    
   \   000000E8   0x5F 0x70          DC8 5FH, 70H, 6FH, 73H, 20H, 2BH, 20H, 6DH
   \              0x6F 0x73    
   \              0x20 0x2B    
   \              0x20 0x6D    
   \   000000F0   0x6B 0x73          DC8 6BH, 73H, 43H, 66H, 67H, 2EH, 78H, 5FH
   \              0x43 0x66    
   \              0x67 0x2E    
   \              0x78 0x5F    
   \   000000F8   0x70 0x72          DC8 70H, 72H, 6FH, 62H, 65H, 5FH, 6FH, 66H
   \              0x6F 0x62    
   \              0x65 0x5F    
   \              0x6F 0x66    
   \   00000100   0x66 0x73          DC8 66H, 73H, 65H, 74H, 5FH, 66H, 72H, 6FH
   \              0x65 0x74    
   \              0x5F 0x66    
   \              0x72 0x6F    
   \   00000108   0x6D 0x5F          DC8 6DH, 5FH, 65H, 78H, 74H, 72H, 75H, 64H
   \              0x65 0x78    
   \              0x74 0x72    
   \              0x75 0x64    
   \   00000110   0x65 0x72          DC8 65H, 72H, 29H, 29H, 29H, 3DH, 0
   \              0x29 0x29    
   \              0x29 0x3D    
   \              0x00         
   \   00000117   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MESH_MIN_Y  (((((((mk...">`:
   \   00000000   0x4D 0x45          DC8 4DH, 45H, 53H, 48H, 5FH, 4DH, 49H, 4EH
   \              0x53 0x48    
   \              0x5F 0x4D    
   \              0x49 0x4E    
   \   00000008   0x5F 0x59          DC8 5FH, 59H, 20H, 20H, 28H, 28H, 28H, 28H
   \              0x20 0x20    
   \              0x28 0x28    
   \              0x28 0x28    
   \   00000010   0x28 0x28          DC8 28H, 28H, 28H, 6DH, 6BH, 73H, 43H, 66H
   \              0x28 0x6D    
   \              0x6B 0x73    
   \              0x43 0x66    
   \   00000018   0x67 0x2E          DC8 67H, 2EH, 79H, 5FH, 6DH, 61H, 78H, 5FH
   \              0x79 0x5F    
   \              0x6D 0x61    
   \              0x78 0x5F    
   \   00000020   0x70 0x6F          DC8 70H, 6FH, 73H, 29H, 20H, 2FH, 20H, 32H
   \              0x73 0x29    
   \              0x20 0x2F    
   \              0x20 0x32    
   \   00000028   0x29 0x20          DC8 29H, 20H, 2DH, 20H, 28H, 6DH, 6BH, 73H
   \              0x2D 0x20    
   \              0x28 0x6D    
   \              0x6B 0x73    
   \   00000030   0x43 0x66          DC8 43H, 66H, 67H, 2EH, 79H, 5FH, 6DH, 61H
   \              0x67 0x2E    
   \              0x79 0x5F    
   \              0x6D 0x61    
   \   00000038   0x78 0x5F          DC8 78H, 5FH, 70H, 6FH, 73H, 29H, 20H, 2FH
   \              0x70 0x6F    
   \              0x73 0x29    
   \              0x20 0x2F    
   \   00000040   0x20 0x32          DC8 20H, 32H, 29H, 20H, 2BH, 20H, 6DH, 6BH
   \              0x29 0x20    
   \              0x2B 0x20    
   \              0x6D 0x6B    
   \   00000048   0x73 0x43          DC8 73H, 43H, 66H, 67H, 2EH, 6DH, 65H, 73H
   \              0x66 0x67    
   \              0x2E 0x6D    
   \              0x65 0x73    
   \   00000050   0x68 0x5F          DC8 68H, 5FH, 69H, 6EH, 73H, 74H, 29H, 3EH
   \              0x69 0x6E    
   \              0x73 0x74    
   \              0x29 0x3E    
   \   00000058   0x28 0x6D          DC8 28H, 6DH, 6BH, 73H, 43H, 66H, 67H, 2EH
   \              0x6B 0x73    
   \              0x43 0x66    
   \              0x67 0x2E    
   \   00000060   0x79 0x5F          DC8 79H, 5FH, 6DH, 69H, 6EH, 5FH, 70H, 6FH
   \              0x6D 0x69    
   \              0x6E 0x5F    
   \              0x70 0x6F    
   \   00000068   0x73 0x20          DC8 73H, 20H, 2BH, 20H, 6DH, 6BH, 73H, 43H
   \              0x2B 0x20    
   \              0x6D 0x6B    
   \              0x73 0x43    
   \   00000070   0x66 0x67          DC8 66H, 67H, 2EH, 79H, 5FH, 70H, 72H, 6FH
   \              0x2E 0x79    
   \              0x5F 0x70    
   \              0x72 0x6F    
   \   00000078   0x62 0x65          DC8 62H, 65H, 5FH, 6FH, 66H, 66H, 73H, 65H
   \              0x5F 0x6F    
   \              0x66 0x66    
   \              0x73 0x65    
   \   00000080   0x74 0x5F          DC8 74H, 5FH, 66H, 72H, 6FH, 6DH, 5FH, 65H
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x5F 0x65    
   \   00000088   0x78 0x74          DC8 78H, 74H, 72H, 75H, 64H, 65H, 72H, 29H
   \              0x72 0x75    
   \              0x64 0x65    
   \              0x72 0x29    
   \   00000090   0x29 0x3F          DC8 29H, 3FH, 28H, 28H, 28H, 28H, 6DH, 6BH
   \              0x28 0x28    
   \              0x28 0x28    
   \              0x6D 0x6B    
   \   00000098   0x73 0x43          DC8 73H, 43H, 66H, 67H, 2EH, 79H, 5FH, 6DH
   \              0x66 0x67    
   \              0x2E 0x79    
   \              0x5F 0x6D    
   \   000000A0   0x61 0x78          DC8 61H, 78H, 5FH, 70H, 6FH, 73H, 29H, 20H
   \              0x5F 0x70    
   \              0x6F 0x73    
   \              0x29 0x20    
   \   000000A8   0x2F 0x20          DC8 2FH, 20H, 32H, 29H, 20H, 2DH, 20H, 28H
   \              0x32 0x29    
   \              0x20 0x2D    
   \              0x20 0x28    
   \   000000B0   0x6D 0x6B          DC8 6DH, 6BH, 73H, 43H, 66H, 67H, 2EH, 79H
   \              0x73 0x43    
   \              0x66 0x67    
   \              0x2E 0x79    
   \   000000B8   0x5F 0x6D          DC8 5FH, 6DH, 61H, 78H, 5FH, 70H, 6FH, 73H
   \              0x61 0x78    
   \              0x5F 0x70    
   \              0x6F 0x73    
   \   000000C0   0x29 0x20          DC8 29H, 20H, 2FH, 20H, 32H, 29H, 20H, 2BH
   \              0x2F 0x20    
   \              0x32 0x29    
   \              0x20 0x2B    
   \   000000C8   0x20 0x6D          DC8 20H, 6DH, 6BH, 73H, 43H, 66H, 67H, 2EH
   \              0x6B 0x73    
   \              0x43 0x66    
   \              0x67 0x2E    
   \   000000D0   0x6D 0x65          DC8 6DH, 65H, 73H, 68H, 5FH, 69H, 6EH, 73H
   \              0x73 0x68    
   \              0x5F 0x69    
   \              0x6E 0x73    
   \   000000D8   0x74 0x29          DC8 74H, 29H, 3AH, 28H, 6DH, 6BH, 73H, 43H
   \              0x3A 0x28    
   \              0x6D 0x6B    
   \              0x73 0x43    
   \   000000E0   0x66 0x67          DC8 66H, 67H, 2EH, 79H, 5FH, 6DH, 69H, 6EH
   \              0x2E 0x79    
   \              0x5F 0x6D    
   \              0x69 0x6E    
   \   000000E8   0x5F 0x70          DC8 5FH, 70H, 6FH, 73H, 20H, 2BH, 20H, 6DH
   \              0x6F 0x73    
   \              0x20 0x2B    
   \              0x20 0x6D    
   \   000000F0   0x6B 0x73          DC8 6BH, 73H, 43H, 66H, 67H, 2EH, 79H, 5FH
   \              0x43 0x66    
   \              0x67 0x2E    
   \              0x79 0x5F    
   \   000000F8   0x70 0x72          DC8 70H, 72H, 6FH, 62H, 65H, 5FH, 6FH, 66H
   \              0x6F 0x62    
   \              0x65 0x5F    
   \              0x6F 0x66    
   \   00000100   0x66 0x73          DC8 66H, 73H, 65H, 74H, 5FH, 66H, 72H, 6FH
   \              0x65 0x74    
   \              0x5F 0x66    
   \              0x72 0x6F    
   \   00000108   0x6D 0x5F          DC8 6DH, 5FH, 65H, 78H, 74H, 72H, 75H, 64H
   \              0x65 0x78    
   \              0x74 0x72    
   \              0x75 0x64    
   \   00000110   0x65 0x72          DC8 65H, 72H, 29H, 29H, 29H, 3DH, 0
   \              0x29 0x29    
   \              0x29 0x3D    
   \              0x00         
   \   00000117   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MESH_MAX_X  (((((((mk...">`:
   \   00000000   0x4D 0x45          DC8 4DH, 45H, 53H, 48H, 5FH, 4DH, 41H, 58H
   \              0x53 0x48    
   \              0x5F 0x4D    
   \              0x41 0x58    
   \   00000008   0x5F 0x58          DC8 5FH, 58H, 20H, 20H, 28H, 28H, 28H, 28H
   \              0x20 0x20    
   \              0x28 0x28    
   \              0x28 0x28    
   \   00000010   0x28 0x28          DC8 28H, 28H, 28H, 6DH, 6BH, 73H, 43H, 66H
   \              0x28 0x6D    
   \              0x6B 0x73    
   \              0x43 0x66    
   \   00000018   0x67 0x2E          DC8 67H, 2EH, 78H, 5FH, 6DH, 61H, 78H, 5FH
   \              0x78 0x5F    
   \              0x6D 0x61    
   \              0x78 0x5F    
   \   00000020   0x70 0x6F          DC8 70H, 6FH, 73H, 29H, 20H, 2FH, 20H, 32H
   \              0x73 0x29    
   \              0x20 0x2F    
   \              0x20 0x32    
   \   00000028   0x29 0x20          DC8 29H, 20H, 2BH, 20H, 28H, 6DH, 6BH, 73H
   \              0x2B 0x20    
   \              0x28 0x6D    
   \              0x6B 0x73    
   \   00000030   0x43 0x66          DC8 43H, 66H, 67H, 2EH, 78H, 5FH, 6DH, 61H
   \              0x67 0x2E    
   \              0x78 0x5F    
   \              0x6D 0x61    
   \   00000038   0x78 0x5F          DC8 78H, 5FH, 70H, 6FH, 73H, 29H, 20H, 2FH
   \              0x70 0x6F    
   \              0x73 0x29    
   \              0x20 0x2F    
   \   00000040   0x20 0x32          DC8 20H, 32H, 29H, 20H, 2DH, 20H, 6DH, 6BH
   \              0x29 0x20    
   \              0x2D 0x20    
   \              0x6D 0x6B    
   \   00000048   0x73 0x43          DC8 73H, 43H, 66H, 67H, 2EH, 6DH, 65H, 73H
   \              0x66 0x67    
   \              0x2E 0x6D    
   \              0x65 0x73    
   \   00000050   0x68 0x5F          DC8 68H, 5FH, 69H, 6EH, 73H, 74H, 29H, 3CH
   \              0x69 0x6E    
   \              0x73 0x74    
   \              0x29 0x3C    
   \   00000058   0x28 0x6D          DC8 28H, 6DH, 6BH, 73H, 43H, 66H, 67H, 2EH
   \              0x6B 0x73    
   \              0x43 0x66    
   \              0x67 0x2E    
   \   00000060   0x78 0x5F          DC8 78H, 5FH, 6DH, 61H, 78H, 5FH, 70H, 6FH
   \              0x6D 0x61    
   \              0x78 0x5F    
   \              0x70 0x6F    
   \   00000068   0x73 0x20          DC8 73H, 20H, 2BH, 20H, 6DH, 6BH, 73H, 43H
   \              0x2B 0x20    
   \              0x6D 0x6B    
   \              0x73 0x43    
   \   00000070   0x66 0x67          DC8 66H, 67H, 2EH, 78H, 5FH, 70H, 72H, 6FH
   \              0x2E 0x78    
   \              0x5F 0x70    
   \              0x72 0x6F    
   \   00000078   0x62 0x65          DC8 62H, 65H, 5FH, 6FH, 66H, 66H, 73H, 65H
   \              0x5F 0x6F    
   \              0x66 0x66    
   \              0x73 0x65    
   \   00000080   0x74 0x5F          DC8 74H, 5FH, 66H, 72H, 6FH, 6DH, 5FH, 65H
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x5F 0x65    
   \   00000088   0x78 0x74          DC8 78H, 74H, 72H, 75H, 64H, 65H, 72H, 29H
   \              0x72 0x75    
   \              0x64 0x65    
   \              0x72 0x29    
   \   00000090   0x29 0x3F          DC8 29H, 3FH, 28H, 28H, 28H, 28H, 6DH, 6BH
   \              0x28 0x28    
   \              0x28 0x28    
   \              0x6D 0x6B    
   \   00000098   0x73 0x43          DC8 73H, 43H, 66H, 67H, 2EH, 78H, 5FH, 6DH
   \              0x66 0x67    
   \              0x2E 0x78    
   \              0x5F 0x6D    
   \   000000A0   0x61 0x78          DC8 61H, 78H, 5FH, 70H, 6FH, 73H, 29H, 20H
   \              0x5F 0x70    
   \              0x6F 0x73    
   \              0x29 0x20    
   \   000000A8   0x2F 0x20          DC8 2FH, 20H, 32H, 29H, 20H, 2BH, 20H, 28H
   \              0x32 0x29    
   \              0x20 0x2B    
   \              0x20 0x28    
   \   000000B0   0x6D 0x6B          DC8 6DH, 6BH, 73H, 43H, 66H, 67H, 2EH, 78H
   \              0x73 0x43    
   \              0x66 0x67    
   \              0x2E 0x78    
   \   000000B8   0x5F 0x6D          DC8 5FH, 6DH, 61H, 78H, 5FH, 70H, 6FH, 73H
   \              0x61 0x78    
   \              0x5F 0x70    
   \              0x6F 0x73    
   \   000000C0   0x29 0x20          DC8 29H, 20H, 2FH, 20H, 32H, 29H, 20H, 2DH
   \              0x2F 0x20    
   \              0x32 0x29    
   \              0x20 0x2D    
   \   000000C8   0x20 0x6D          DC8 20H, 6DH, 6BH, 73H, 43H, 66H, 67H, 2EH
   \              0x6B 0x73    
   \              0x43 0x66    
   \              0x67 0x2E    
   \   000000D0   0x6D 0x65          DC8 6DH, 65H, 73H, 68H, 5FH, 69H, 6EH, 73H
   \              0x73 0x68    
   \              0x5F 0x69    
   \              0x6E 0x73    
   \   000000D8   0x74 0x29          DC8 74H, 29H, 3AH, 28H, 6DH, 6BH, 73H, 43H
   \              0x3A 0x28    
   \              0x6D 0x6B    
   \              0x73 0x43    
   \   000000E0   0x66 0x67          DC8 66H, 67H, 2EH, 78H, 5FH, 6DH, 61H, 78H
   \              0x2E 0x78    
   \              0x5F 0x6D    
   \              0x61 0x78    
   \   000000E8   0x5F 0x70          DC8 5FH, 70H, 6FH, 73H, 20H, 2BH, 20H, 6DH
   \              0x6F 0x73    
   \              0x20 0x2B    
   \              0x20 0x6D    
   \   000000F0   0x6B 0x73          DC8 6BH, 73H, 43H, 66H, 67H, 2EH, 78H, 5FH
   \              0x43 0x66    
   \              0x67 0x2E    
   \              0x78 0x5F    
   \   000000F8   0x70 0x72          DC8 70H, 72H, 6FH, 62H, 65H, 5FH, 6FH, 66H
   \              0x6F 0x62    
   \              0x65 0x5F    
   \              0x6F 0x66    
   \   00000100   0x66 0x73          DC8 66H, 73H, 65H, 74H, 5FH, 66H, 72H, 6FH
   \              0x65 0x74    
   \              0x5F 0x66    
   \              0x72 0x6F    
   \   00000108   0x6D 0x5F          DC8 6DH, 5FH, 65H, 78H, 74H, 72H, 75H, 64H
   \              0x65 0x78    
   \              0x74 0x72    
   \              0x75 0x64    
   \   00000110   0x65 0x72          DC8 65H, 72H, 29H, 29H, 29H, 3DH, 0
   \              0x29 0x29    
   \              0x29 0x3D    
   \              0x00         
   \   00000117   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MESH_MAX_Y  (((((((mk...">`:
   \   00000000   0x4D 0x45          DC8 4DH, 45H, 53H, 48H, 5FH, 4DH, 41H, 58H
   \              0x53 0x48    
   \              0x5F 0x4D    
   \              0x41 0x58    
   \   00000008   0x5F 0x59          DC8 5FH, 59H, 20H, 20H, 28H, 28H, 28H, 28H
   \              0x20 0x20    
   \              0x28 0x28    
   \              0x28 0x28    
   \   00000010   0x28 0x28          DC8 28H, 28H, 28H, 6DH, 6BH, 73H, 43H, 66H
   \              0x28 0x6D    
   \              0x6B 0x73    
   \              0x43 0x66    
   \   00000018   0x67 0x2E          DC8 67H, 2EH, 79H, 5FH, 6DH, 61H, 78H, 5FH
   \              0x79 0x5F    
   \              0x6D 0x61    
   \              0x78 0x5F    
   \   00000020   0x70 0x6F          DC8 70H, 6FH, 73H, 29H, 20H, 2FH, 20H, 32H
   \              0x73 0x29    
   \              0x20 0x2F    
   \              0x20 0x32    
   \   00000028   0x29 0x20          DC8 29H, 20H, 2BH, 20H, 28H, 6DH, 6BH, 73H
   \              0x2B 0x20    
   \              0x28 0x6D    
   \              0x6B 0x73    
   \   00000030   0x43 0x66          DC8 43H, 66H, 67H, 2EH, 79H, 5FH, 6DH, 61H
   \              0x67 0x2E    
   \              0x79 0x5F    
   \              0x6D 0x61    
   \   00000038   0x78 0x5F          DC8 78H, 5FH, 70H, 6FH, 73H, 29H, 20H, 2FH
   \              0x70 0x6F    
   \              0x73 0x29    
   \              0x20 0x2F    
   \   00000040   0x20 0x32          DC8 20H, 32H, 29H, 20H, 2DH, 20H, 6DH, 6BH
   \              0x29 0x20    
   \              0x2D 0x20    
   \              0x6D 0x6B    
   \   00000048   0x73 0x43          DC8 73H, 43H, 66H, 67H, 2EH, 6DH, 65H, 73H
   \              0x66 0x67    
   \              0x2E 0x6D    
   \              0x65 0x73    
   \   00000050   0x68 0x5F          DC8 68H, 5FH, 69H, 6EH, 73H, 74H, 29H, 3CH
   \              0x69 0x6E    
   \              0x73 0x74    
   \              0x29 0x3C    
   \   00000058   0x28 0x6D          DC8 28H, 6DH, 6BH, 73H, 43H, 66H, 67H, 2EH
   \              0x6B 0x73    
   \              0x43 0x66    
   \              0x67 0x2E    
   \   00000060   0x79 0x5F          DC8 79H, 5FH, 6DH, 61H, 78H, 5FH, 70H, 6FH
   \              0x6D 0x61    
   \              0x78 0x5F    
   \              0x70 0x6F    
   \   00000068   0x73 0x20          DC8 73H, 20H, 2BH, 20H, 6DH, 6BH, 73H, 43H
   \              0x2B 0x20    
   \              0x6D 0x6B    
   \              0x73 0x43    
   \   00000070   0x66 0x67          DC8 66H, 67H, 2EH, 79H, 5FH, 70H, 72H, 6FH
   \              0x2E 0x79    
   \              0x5F 0x70    
   \              0x72 0x6F    
   \   00000078   0x62 0x65          DC8 62H, 65H, 5FH, 6FH, 66H, 66H, 73H, 65H
   \              0x5F 0x6F    
   \              0x66 0x66    
   \              0x73 0x65    
   \   00000080   0x74 0x5F          DC8 74H, 5FH, 66H, 72H, 6FH, 6DH, 5FH, 65H
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x5F 0x65    
   \   00000088   0x78 0x74          DC8 78H, 74H, 72H, 75H, 64H, 65H, 72H, 29H
   \              0x72 0x75    
   \              0x64 0x65    
   \              0x72 0x29    
   \   00000090   0x29 0x3F          DC8 29H, 3FH, 28H, 28H, 28H, 28H, 6DH, 6BH
   \              0x28 0x28    
   \              0x28 0x28    
   \              0x6D 0x6B    
   \   00000098   0x73 0x43          DC8 73H, 43H, 66H, 67H, 2EH, 79H, 5FH, 6DH
   \              0x66 0x67    
   \              0x2E 0x79    
   \              0x5F 0x6D    
   \   000000A0   0x61 0x78          DC8 61H, 78H, 5FH, 70H, 6FH, 73H, 29H, 20H
   \              0x5F 0x70    
   \              0x6F 0x73    
   \              0x29 0x20    
   \   000000A8   0x2F 0x20          DC8 2FH, 20H, 32H, 29H, 20H, 2BH, 20H, 28H
   \              0x32 0x29    
   \              0x20 0x2B    
   \              0x20 0x28    
   \   000000B0   0x6D 0x6B          DC8 6DH, 6BH, 73H, 43H, 66H, 67H, 2EH, 79H
   \              0x73 0x43    
   \              0x66 0x67    
   \              0x2E 0x79    
   \   000000B8   0x5F 0x6D          DC8 5FH, 6DH, 61H, 78H, 5FH, 70H, 6FH, 73H
   \              0x61 0x78    
   \              0x5F 0x70    
   \              0x6F 0x73    
   \   000000C0   0x29 0x20          DC8 29H, 20H, 2FH, 20H, 32H, 29H, 20H, 2DH
   \              0x2F 0x20    
   \              0x32 0x29    
   \              0x20 0x2D    
   \   000000C8   0x20 0x6D          DC8 20H, 6DH, 6BH, 73H, 43H, 66H, 67H, 2EH
   \              0x6B 0x73    
   \              0x43 0x66    
   \              0x67 0x2E    
   \   000000D0   0x6D 0x65          DC8 6DH, 65H, 73H, 68H, 5FH, 69H, 6EH, 73H
   \              0x73 0x68    
   \              0x5F 0x69    
   \              0x6E 0x73    
   \   000000D8   0x74 0x29          DC8 74H, 29H, 3AH, 28H, 6DH, 6BH, 73H, 43H
   \              0x3A 0x28    
   \              0x6D 0x6B    
   \              0x73 0x43    
   \   000000E0   0x66 0x67          DC8 66H, 67H, 2EH, 79H, 5FH, 6DH, 61H, 78H
   \              0x2E 0x79    
   \              0x5F 0x6D    
   \              0x61 0x78    
   \   000000E8   0x5F 0x70          DC8 5FH, 70H, 6FH, 73H, 20H, 2BH, 20H, 6DH
   \              0x6F 0x73    
   \              0x20 0x2B    
   \              0x20 0x6D    
   \   000000F0   0x6B 0x73          DC8 6BH, 73H, 43H, 66H, 67H, 2EH, 79H, 5FH
   \              0x43 0x66    
   \              0x67 0x2E    
   \              0x79 0x5F    
   \   000000F8   0x70 0x72          DC8 70H, 72H, 6FH, 62H, 65H, 5FH, 6FH, 66H
   \              0x6F 0x62    
   \              0x65 0x5F    
   \              0x6F 0x66    
   \   00000100   0x66 0x73          DC8 66H, 73H, 65H, 74H, 5FH, 66H, 72H, 6FH
   \              0x65 0x74    
   \              0x5F 0x66    
   \              0x72 0x6F    
   \   00000108   0x6D 0x5F          DC8 6DH, 5FH, 65H, 78H, 74H, 72H, 75H, 64H
   \              0x65 0x78    
   \              0x74 0x72    
   \              0x75 0x64    
   \   00000110   0x65 0x72          DC8 65H, 72H, 29H, 29H, 29H, 3DH, 0
   \              0x29 0x29    
   \              0x29 0x3D    
   \              0x00         
   \   00000117   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "GRID_MAX_POINTS_X  ">`:
   \   00000000   0x47 0x52          DC8 "GRID_MAX_POINTS_X  "
   \              0x49 0x44    
   \              0x5F 0x4D    
   \              0x41 0x58    
   \              0x5F 0x50    
   \              0x4F 0x49    
   \              0x4E 0x54    
   \              0x53 0x5F    
   \              0x58 0x20    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "GRID_MAX_POINTS_Y  ">`:
   \   00000000   0x47 0x52          DC8 "GRID_MAX_POINTS_Y  "
   \              0x49 0x44    
   \              0x5F 0x4D    
   \              0x41 0x58    
   \              0x5F 0x50    
   \              0x4F 0x49    
   \              0x4E 0x54    
   \              0x53 0x5F    
   \              0x59 0x20    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MESH_X_DIST  ">`:
   \   00000000   0x4D 0x45          DC8 "MESH_X_DIST  "
   \              0x53 0x48    
   \              0x5F 0x58    
   \              0x5F 0x44    
   \              0x49 0x53    
   \              0x54 0x20    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MESH_Y_DIST  ">`:
   \   00000000   0x4D 0x45          DC8 "MESH_Y_DIST  "
   \              0x53 0x48    
   \              0x5F 0x59    
   \              0x5F 0x44    
   \              0x49 0x53    
   \              0x54 0x20    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "X-Axis Mesh Points at: ">`:
   \   00000000   0x58 0x2D          DC8 "X-Axis Mesh Points at: "
   \              0x41 0x78    
   \              0x69 0x73    
   \              0x20 0x4D    
   \              0x65 0x73    
   \              0x68 0x20    
   \              0x50 0x6F    
   \              0x69 0x6E    
   \              0x74 0x73    
   \              0x20 0x61    
   \              0x74 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Y-Axis Mesh Points at: ">`:
   \   00000000   0x59 0x2D          DC8 "Y-Axis Mesh Points at: "
   \              0x41 0x78    
   \              0x69 0x73    
   \              0x20 0x4D    
   \              0x65 0x73    
   \              0x68 0x20    
   \              0x50 0x6F    
   \              0x69 0x6E    
   \              0x74 0x73    
   \              0x20 0x61    
   \              0x74 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " sanity checks passed.\\n">`:
   \   00000000   0x20 0x73          DC8 " sanity checks passed.\012"
   \              0x61 0x6E    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x63 0x68    
   \              0x65 0x63    
   \              0x6B 0x73    
   \              0x20 0x70    
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x64 0x2E    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83:
   \   00000000   0x42C80001         DC32     0x42c80001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_1:
   \   00000000   0x........         DC32     _ZN7Planner15leveling_activeE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_2:
   \   00000000   0x3A 0x20          DC8      0x3A, 0x20, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_3:
   \   00000000   0x........         DC32     _ZN20unified_bed_leveling12storage_slotE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_4:
   \   00000000   0x........         DC32     Serial3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_5:
   \   00000000   0x........         DC32     ubl_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_6:
   \   00000000   0x........         DC32     _ZN7Planner13z_fade_heightE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_7:
   \   00000000   0x........         DC32     zprobe_zoffset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_8:
   \   00000000   0x........         DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_9:
   \   00000000   0x........         DC32     mksTmp

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EEPROM Dump:\\n">`:
   \   00000000   0x45 0x45          DC8 "EEPROM Dump:\012"
   \              0x50 0x52    
   \              0x4F 0x4D    
   \              0x20 0x44    
   \              0x75 0x6D    
   \              0x70 0x3A    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?EEPROM storage not a...">`:
   \   00000000   0x3F 0x45          DC8 "?EEPROM storage not available.\012"
   \              0x45 0x50    
   \              0x52 0x4F    
   \              0x4D 0x20    
   \              0x73 0x74    
   \              0x6F 0x72    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x61 0x76    
   \              0x61 0x69    
   \              0x6C 0x61    
   \              0x62 0x6C    
   \              0x65 0x2E    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?Storage slot # requi...">`:
   \   00000000   0x3F 0x53          DC8 "?Storage slot # required.\012"
   \              0x74 0x6F    
   \              0x72 0x61    
   \              0x67 0x65    
   \              0x20 0x73    
   \              0x6C 0x6F    
   \              0x74 0x20    
   \              0x23 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x69 0x72    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?Invalid storage slot.\\n">`:
   \   00000000   0x3F 0x49          DC8 "?Invalid storage slot.\012"
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x73    
   \              0x74 0x6F    
   \              0x72 0x61    
   \              0x67 0x65    
   \              0x20 0x73    
   \              0x6C 0x6F    
   \              0x74 0x2E    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?Use 0 to ">`:
   \   00000000   0x3F 0x55          DC8 "?Use 0 to "
   \              0x73 0x65    
   \              0x20 0x30    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Subtracting mesh in s...">`:
   \   00000000   0x53 0x75          DC8 "Subtracting mesh in slot "
   \              0x62 0x74    
   \              0x72 0x61    
   \              0x63 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6D 0x65    
   \              0x73 0x68    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x73 0x6C    
   \              0x6F 0x74    
   \              0x20 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " from current mesh.\\n">`:
   \   00000000   0x20 0x66          DC8 " from current mesh.\012"
   \              0x72 0x6F    
   \              0x6D 0x20    
   \              0x63 0x75    
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x6D 0x65    
   \              0x73 0x68    
   \              0x2E 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84:
   \   00000000   0x........         DC32     workspace_offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87:
   \   00000000   0x........         DC32     echomagic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_1:
   \   00000000   0x........         DC32     _ZN11GCodeParser9value_ptrE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_2:
   \   00000000   0x........         DC32     _ZN20unified_bed_leveling10g29_c_flagE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_3:
   \   00000000   0x........         DC32     Serial3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_4:
   \   00000000   0x........         DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_5:
   \   00000000   0x........         DC32     _ZN20unified_bed_leveling8z_valuesE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_6:
   \   00000000   0xC7C34FFF         DC32     0xc7c34fff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_7:
   \   00000000   0x........         DC32     mksCfg+0x58

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_8:
   \   00000000   0x........         DC32     mksTmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_9:
   \   00000000   0xD2F1A9FC         DC32     0xd2f1a9fc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_10:
   \   00000000   0xBF50624D         DC32     0xbf50624d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_11:
   \   00000000   0x3F50624D         DC32     0x3f50624d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_12:
   \   00000000   0x47C34FF3         DC32     0x47c34ff3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_13:
   \   00000000   0x3FF00000         DC32     0x3ff00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_14:
   \   00000000   0xC7C34FF3         DC32     0xc7c34ff3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_15:
   \   00000000   0x........         DC32     mksCfg+0x60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_16:
   \   00000000   0x47C34FFF         DC32     0x47c34fff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_17:
   \   00000000   0x9999999A         DC32     0x9999999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_18:
   \   00000000   0x3FB99999         DC32     0x3fb99999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_19:
   \   00000000   0x........         DC32     mksCfg+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable88:
   \   00000000   0x........         DC32     current_position

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable88_1:
   \   00000000   0x........         DC32     _ZN20unified_bed_leveling8z_valuesE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable88_2:
   \   00000000   0x........         DC32     ??info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable88_3:
   \   00000000   0x........         DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable88_4:
   \   00000000   0x........         DC32     mksCfg+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable88_5:
   \   00000000   0x........         DC32     mksTmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable88_6:
   \   00000000   0x........         DC32     mksCfg+0x60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable88_7:
   \   00000000   0x........         DC32     _ZN20unified_bed_leveling10g29_c_flagE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable88_8:
   \   00000000   0xBFF00000         DC32     0xbff00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable88_9:
   \   00000000   0x........         DC32     _ZN11GCodeParser9value_ptrE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable88_10:
   \   00000000   0x........         DC32     _ZN11GCodeParser11command_ptrE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable88_11:
   \   00000000   0x........         DC32     _ZN11GCodeParser5paramE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable88_12:
   \   00000000   0x........         DC32     _ZN11GCodeParser8codebitsE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable88_13:
   \   00000000   0x........         DC32     Serial3

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "bed plane normal = [">`:
   \   00000000   0x62 0x65          DC8 "bed plane normal = ["
   \              0x64 0x20    
   \              0x70 0x6C    
   \              0x61 0x6E    
   \              0x65 0x20    
   \              0x6E 0x6F    
   \              0x72 0x6D    
   \              0x61 0x6C    
   \              0x20 0x3D    
   \              0x20 0x5B    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Could not complete LSF!">`:
   \   00000000   0x43 0x6F          DC8 "Could not complete LSF!"
   \              0x75 0x6C    
   \              0x64 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x20 0x4C    
   \              0x53 0x46    
   \              0x21 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "LSF Results A=">`:
   \   00000000   0x4C 0x53          DC8 "LSF Results A="
   \              0x46 0x20    
   \              0x52 0x65    
   \              0x73 0x75    
   \              0x6C 0x74    
   \              0x73 0x20    
   \              0x41 0x3D    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  B=">`:
   \   00000000   0x20 0x20          DC8 "  B="
   \              0x42 0x3D    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  D=">`:
   \   00000000   0x20 0x20          DC8 "  D="
   \              0x44 0x3D    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Extrapolating mesh...">`:
   \   00000000   0x45 0x78          DC8 "Extrapolating mesh..."
   \              0x74 0x72    
   \              0x61 0x70    
   \              0x6F 0x6C    
   \              0x61 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6D 0x65    
   \              0x73 0x68    
   \              0x2E 0x2E    
   \              0x2E 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Insufficient data\\n">`:
   \   00000000   0x49 0x6E          DC8 "Insufficient data\012"
   \              0x73 0x75    
   \              0x66 0x66    
   \              0x69 0x63    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x64    
   \              0x61 0x74    
   \              0x61 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "done\\n">`:
   \   00000000   0x64 0x6F          DC8 "done\012"
   \              0x6E 0x65    
   \              0x0A 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "]\\n">`:
   \   00000000   0x5D 0x0A          DC8 "]\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " \\n">`:
   \   00000000   0x20 0x0A          DC8 " \012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "  ">`:
   \   00000000   0x20 0x20          DC8 "  "
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant ": ">`:
   \   00000000   0x3A 0x20          DC8 ": "
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "?Enable EEPROM and in...">`:
   \   00000000   0x3F 0x45          DC8 "?Enable EEPROM and init with\012"
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x45 0x45    
   \              0x50 0x52    
   \              0x4F 0x4D    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x20    
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "M502, M500, M501 in t...">`:
   \   00000000   0x4D 0x35          DC8 "M502, M500, M501 in that order.\012\012"
   \              0x30 0x32    
   \              0x2C 0x20    
   \              0x4D 0x35    
   \              0x30 0x30    
   \              0x2C 0x20    
   \              0x4D 0x35    
   \              0x30 0x31    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x74 0x68    
   \              0x61 0x74    
   \              0x20 0x6F    
   \              0x72 0x64    
   \              0x65 0x72    
   \              0x2E 0x0A    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Entire Mesh invalidat...">`:
   \   00000000   0x45 0x6E          DC8 "Entire Mesh invalidated.\012\012"
   \              0x74 0x69    
   \              0x72 0x65    
   \              0x20 0x4D    
   \              0x65 0x73    
   \              0x68 0x20    
   \              0x69 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0A 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Locations invalidated.\\n\\n">`:
   \   00000000   0x4C 0x6F          DC8 "Locations invalidated.\012\012"
   \              0x63 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x73 0x20    
   \              0x69 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x0A 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Invalid test_pattern ...">`:
   \   00000000   0x49 0x6E          DC8 "Invalid test_pattern value. (-1 to 2)\012\012"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x5F 0x70    
   \              0x61 0x74    
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x2E 0x20    
   \              0x28 0x2D    
   \              0x31 0x20    
   \              0x74 0x6F    
   \              0x20 0x32    
   \              0x29 0x0A    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Loading test_pattern ...">`:
   \   00000000   0x4C 0x6F          DC8 "Loading test_pattern values.\012\012"
   \              0x61 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x5F 0x70    
   \              0x61 0x74    
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x73 0x2E    
   \              0x0A 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " J ">`:
   \   00000000   0x20 0x4A          DC8 " J "
   \              0x20 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " Z ">`:
   \   00000000   0x20 0x5A          DC8 " Z "
   \              0x20 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000   0x0000             DC16 0
   \   00000002   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   1953            #endif // UBL_G29_P31
   1954          
   1955          #endif // AUTO_BED_LEVELING_UBL

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   GCodeParser::value_float()
         0   -> __aeabi_d2f
        16   -> __iar_Stod
       8   GCodeParser::value_int()
         8   -> __iar_Stolx
       0   chirp_at_user()
      40   incremental_LSF(linear_fit_data *, float const &, float const &, float const &)
        40   -> __aeabi_cfcmple
        40   -> __aeabi_fadd
        40   -> __aeabi_fmul
       0   lcd_goto_screen(void (*)(), uint32_t)
      32   position_is_reachable_IS_KINEMATIC(float const &, float const &)
        32   -> __aeabi_cfrcmple
        32   -> __aeabi_fadd
        32   -> __aeabi_fmul
      16   serialprintPGM(char const *)
        16   -> USARTClass::write(uint8_t)
       0   ubl_lcd_clicked()
      88   unified_bed_leveling::find_closest_mesh_point_of_type(MeshPointType, float const &, float const &, bool, unsigned int *)
        88   -> __aeabi_cdrcmple
        88   -> __aeabi_cfcmple
        88   -> __aeabi_d2f
        88   -> __aeabi_dadd
        88   -> __aeabi_dmul
        88   -> __aeabi_f2d
        88   -> __aeabi_fadd
        88   -> __aeabi_fmul
        88   -> __aeabi_fsub
        88   -> __iar_FDtest
        88   -> position_is_reachable_IS_KINEMATIC(float const &, float const &)
        88   -> sqrtf
        88   -> unified_bed_leveling::mesh_index_to_xpos(uint8_t)
        88   -> unified_bed_leveling::mesh_index_to_ypos(uint8_t)
      96   unified_bed_leveling::find_furthest_invalid_mesh_point()
        96   -> HAL_GetTick
        96   -> __aeabi_cdrcmple
        96   -> __aeabi_cfcmple
        96   -> __aeabi_d2f
        96   -> __aeabi_dadd
        96   -> __aeabi_ddiv
        96   -> __aeabi_dmul
        96   -> __aeabi_f2d
        96   -> __aeabi_fsub
        96   -> __aeabi_i2d
        96   -> __aeabi_ui2d
        96   -> __iar_FDtest
        96   -> position_is_reachable_IS_KINEMATIC(float const &, float const &)
        96   -> sqrt
        96   -> unified_bed_leveling::mesh_index_to_xpos(uint8_t)
        96   -> unified_bed_leveling::mesh_index_to_ypos(uint8_t)
      48   unified_bed_leveling::find_mean_mesh_height()
        48   -> Print::print(double, int)
        48   -> USARTClass::write(uint8_t)
        48   -> __aeabi_f2d
        48   -> __aeabi_fadd
        48   -> __aeabi_fdiv
        48   -> __aeabi_fmul
        48   -> __aeabi_fsub
        48   -> __aeabi_i2f
        48   -> __iar_FDtest
        48   -> serial_echopair_P(char const *, int)
        48   -> serialprintPGM(char const *)
        48   -> sqrtf
     608   unified_bed_leveling::g29_compare_current_mesh_to_stored_mesh()
       608   -> MarlinSettings::calc_num_meshes()
       608   -> MarlinSettings::load_mesh(int8_t, void *)
       608   -> USARTClass::write(uint8_t)
       608   -> __aeabi_fsub
       608   -> __iar_Stolx
       608   -> serial_echopair_P(char const *, int)
       608   -> serialprintPGM(char const *)
      32   unified_bed_leveling::g29_eeprom_dump()
        32   -> AT24CXX_Read
        32   -> Print::print(char)
        32   -> USARTClass::write(uint8_t)
        32   -> idle()
        32   -> print_hex_byte(uint8_t)
        32   -> print_hex_word(uint16_t)
        32   -> serialprintPGM(char const *)
      40   unified_bed_leveling::g29_parameter_parsing()
        40   -> GCodeParser::value_float()
        40   -> GCodeParser::value_int()
        40   -> __aeabi_cfcmple
        40   -> __aeabi_cfrcmple
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> __iar_Stolx
        40   -> serialprintPGM(char const *)
        40   -> set_bed_leveling_enabled(bool)
        40   -> set_z_fade_height(float, bool)
        40   -> unified_bed_leveling::report_state()
      40   unified_bed_leveling::g29_what_command()
        40   -> Print::print(char const *)
        40   -> Print::print(double, int)
        40   -> USARTClass::write(uint8_t)
        40   -> __aeabi_cfcmple
        40   -> __aeabi_f2d
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
        40   -> __aeabi_ui2f
        40   -> safe_delay(millis_t)
        40   -> serial_echopair_P(char const *, float)
        40   -> serial_echopair_P(char const *, int)
         0   -> serialprintPGM(char const *)
        40   -> serialprintPGM(char const *)
        40   -> unified_bed_leveling::echo_name()
        40   -> unified_bed_leveling::find_mean_mesh_height()
        40   -> unified_bed_leveling::mesh_index_to_xpos(uint8_t)
        40   -> unified_bed_leveling::mesh_index_to_ypos(uint8_t)
        40   -> unified_bed_leveling::report_state()
        40   -> unified_bed_leveling::sanity_check()
      64   unified_bed_leveling::gcode_G29_UBL()
        64   -> GCodeParser::value_float()
        64   -> GCodeParser::value_int()
        64   -> MarlinSettings::calc_num_meshes()
        64   -> MarlinSettings::load_mesh(int8_t, void *)
        64   -> MarlinSettings::store_mesh(int8_t)
        64   -> Print::print(double, int)
        64   -> USARTClass::write(uint8_t)
        64   -> __aeabi_cfcmpeq
        64   -> __aeabi_cfcmple
        64   -> __aeabi_d2f
        64   -> __aeabi_dadd
        64   -> __aeabi_dmul
        64   -> __aeabi_dsub
        64   -> __aeabi_f2d
        64   -> __aeabi_f2iz
        64   -> __aeabi_fadd
        64   -> __aeabi_fmul
        64   -> __aeabi_fsub
        64   -> __aeabi_ui2d
        64   -> __aeabi_ui2f
        64   -> __iar_FDtest
        64   -> axis_unhomed_error(bool, bool, bool)
        64   -> do_blocking_move_to_xy(float const &, float const &, float const &)
        64   -> home_all_axes()
        64   -> idle()
        64   -> powf
        64   -> probe_pt(float const &, float const &, bool, uint8_t, bool)
        64   -> serial_echopair_P(char const *, float)
        64   -> serial_echopair_P(char const *, int)
        64   -> serialprintPGM(char const *)
        64   -> set_bed_leveling_enabled(bool)
        64   -> sqrtf
        64   -> truncf
        64   -> unified_bed_leveling::display_map(int)
        64   -> unified_bed_leveling::find_closest_mesh_point_of_type(MeshPointType, float const &, float const &, bool, unsigned int *)
        64   -> unified_bed_leveling::find_mean_mesh_height()
        64   -> unified_bed_leveling::g29_compare_current_mesh_to_stored_mesh()
        64   -> unified_bed_leveling::g29_eeprom_dump()
        64   -> unified_bed_leveling::g29_parameter_parsing()
        64   -> unified_bed_leveling::g29_what_command()
        64   -> unified_bed_leveling::get_z_correction(float const &, float const &)
        64   -> unified_bed_leveling::invalidate()
        64   -> unified_bed_leveling::mesh_index_to_xpos(uint8_t)
        64   -> unified_bed_leveling::mesh_index_to_ypos(uint8_t)
        64   -> unified_bed_leveling::probe_entire_mesh(float const &, float const &, bool, bool, bool)
        64   -> unified_bed_leveling::reset()
        64   -> unified_bed_leveling::set_all_mesh_points_to_value(float)
        64   -> unified_bed_leveling::shift_mesh_height()
        64   -> unified_bed_leveling::smart_fill_mesh()
        64   -> unified_bed_leveling::smart_fill_wlsf(float const &)
        64   -> unified_bed_leveling::tilt_mesh_based_on_3pts(float const &, float const &, float const &)
        64   -> unified_bed_leveling::tilt_mesh_based_on_probed_grid(bool)
      32   unified_bed_leveling::get_cell_index_x(float const &)
        32   -> __aeabi_cfcmple
        32   -> __aeabi_d2iz
        32   -> __aeabi_ddiv
        32   -> __aeabi_dmul
        32   -> __aeabi_f2d
        32   -> __aeabi_fadd
        32   -> __aeabi_fdiv
        32   -> __aeabi_fmul
        32   -> __aeabi_fsub
        32   -> __aeabi_i2f
        32   -> __aeabi_ui2f
      32   unified_bed_leveling::get_cell_index_y(float const &)
        32   -> __aeabi_cfcmple
        32   -> __aeabi_d2iz
        32   -> __aeabi_ddiv
        32   -> __aeabi_dmul
        32   -> __aeabi_f2d
        32   -> __aeabi_fadd
        32   -> __aeabi_fdiv
        32   -> __aeabi_fmul
        32   -> __aeabi_fsub
        32   -> __aeabi_i2f
        32   -> __aeabi_ui2f
      56   unified_bed_leveling::get_z_correction(float const &, float const &)
        56   -> __aeabi_fadd
        56   -> __aeabi_fdiv
        56   -> __aeabi_fmul
        56   -> __aeabi_fsub
        56   -> __iar_FDtest
        56   -> unified_bed_leveling::get_cell_index_x(float const &)
        56   -> unified_bed_leveling::get_cell_index_y(float const &)
        56   -> unified_bed_leveling::mesh_index_to_xpos(uint8_t)
        56   -> unified_bed_leveling::mesh_index_to_ypos(uint8_t)
      40   unified_bed_leveling::mesh_index_to_xpos(uint8_t)
        40   -> __aeabi_cfcmple
         0   -> __aeabi_fadd
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
        40   -> __aeabi_ui2f
      40   unified_bed_leveling::mesh_index_to_ypos(uint8_t)
        40   -> __aeabi_cfcmple
         0   -> __aeabi_fadd
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
        40   -> __aeabi_ui2f
      72   unified_bed_leveling::probe_entire_mesh(float const &, float const &, bool, bool, bool)
        72   -> __aeabi_cfcmple
        72   -> __aeabi_fadd
        72   -> __aeabi_fmul
        72   -> __aeabi_fsub
        72   -> __aeabi_ui2f
        72   -> do_blocking_move_to_xy(float const &, float const &, float const &)
        72   -> probe_pt(float const &, float const &, bool, uint8_t, bool)
        72   -> set_bed_leveling_enabled(bool)
        72   -> set_probe_deployed(bool)
        72   -> unified_bed_leveling::display_map(int)
        72   -> unified_bed_leveling::find_closest_mesh_point_of_type(MeshPointType, float const &, float const &, bool, unsigned int *)
        72   -> unified_bed_leveling::find_furthest_invalid_mesh_point()
        72   -> unified_bed_leveling::mesh_index_to_xpos(uint8_t)
        72   -> unified_bed_leveling::mesh_index_to_ypos(uint8_t)
       0   unified_bed_leveling::restore_ubl_active_state_and_leave()
         0   -> set_bed_leveling_enabled(bool)
       0   unified_bed_leveling::save_ubl_active_state_and_disable()
         0   -> set_bed_leveling_enabled(bool)
      24   unified_bed_leveling::shift_mesh_height()
        24   -> __aeabi_fadd
        24   -> __iar_FDtest
      64   unified_bed_leveling::smart_fill_mesh()
        64   -> __aeabi_cfcmple
        64   -> __aeabi_d2f
        64   -> __aeabi_dmul
        64   -> __aeabi_dsub
        64   -> __aeabi_f2d
        64   -> __iar_FDtest
      32   unified_bed_leveling::smart_fill_one(uint8_t, uint8_t, int8_t, int8_t)
        32   -> __aeabi_cfcmple
        32   -> __aeabi_d2f
        32   -> __aeabi_dmul
        32   -> __aeabi_dsub
        32   -> __aeabi_f2d
        32   -> __iar_FDtest
     168   unified_bed_leveling::smart_fill_wlsf(float const &)
       168   -> __aeabi_cfcmple
       168   -> __aeabi_fadd
       168   -> __aeabi_fdiv
       168   -> __aeabi_fmul
       168   -> __aeabi_fsub
       168   -> __aeabi_i2f
       168   -> __aeabi_memclr4
       168   -> __aeabi_ui2f
       168   -> __iar_FDtest
       168   -> finish_incremental_LSF(linear_fit_data *)
       168   -> idle()
       168   -> serialprintPGM(char const *)
       168   -> sqrtf
       168   -> unified_bed_leveling::mesh_index_to_xpos(uint8_t)
       168   -> unified_bed_leveling::mesh_index_to_ypos(uint8_t)
     200   unified_bed_leveling::tilt_mesh_based_on_3pts(float const &, float const &, float const &)
       184   -> Print::print(double, int)
       184   -> USARTClass::write(uint8_t)
       184   -> __aeabi_cfcmple
       184   -> __aeabi_f2d
       184   -> __aeabi_fadd
       184   -> __aeabi_fmul
       184   -> __aeabi_fsub
       184   -> __aeabi_memcpy4
       200   -> __aeabi_memcpy4
       184   -> apply_rotation_xyz(matrix_3x3, float &, float &, float &)
       184   -> matrix_3x3::create_look_at(vector_3)
       184   -> matrix_3x3::debug(char const *)
       184   -> serialprintPGM(char const *)
       184   -> unified_bed_leveling::mesh_index_to_xpos(uint8_t)
       184   -> unified_bed_leveling::mesh_index_to_ypos(uint8_t)
       184   -> vector_3::cross(vector_3, vector_3)
       184   -> vector_3::get_normal()
       184   -> vector_3::vector_3(float, float, float)
     200   unified_bed_leveling::tilt_mesh_based_on_probed_grid(bool)
       184   -> Print::print(double, int)
       184   -> USARTClass::write(uint8_t)
       184   -> __aeabi_cfcmple
       184   -> __aeabi_d2f
       184   -> __aeabi_dadd
       184   -> __aeabi_ddiv
       184   -> __aeabi_f2d
       184   -> __aeabi_f2iz
       184   -> __aeabi_fadd
       184   -> __aeabi_fmul
       184   -> __aeabi_fsub
       184   -> __aeabi_i2d
       184   -> __aeabi_i2f
       184   -> __aeabi_memclr4
       200   -> __aeabi_memcpy4
       184   -> __aeabi_ui2f
       184   -> apply_rotation_xyz(matrix_3x3, float &, float &, float &)
       184   -> finish_incremental_LSF(linear_fit_data *)
       184   -> incremental_LSF(linear_fit_data *, float const &, float const &, float const &)
       184   -> matrix_3x3::create_look_at(vector_3)
       184   -> probe_pt(float const &, float const &, bool, uint8_t, bool)
       184   -> serialprintPGM(char const *)
       184   -> unified_bed_leveling::display_map(int)
       184   -> unified_bed_leveling::get_z_correction(float const &, float const &)
       184   -> unified_bed_leveling::mesh_index_to_xpos(uint8_t)
       184   -> unified_bed_leveling::mesh_index_to_ypos(uint8_t)
       184   -> vector_3::get_normal()
       184   -> vector_3::vector_3(float, float, float)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "  ">
       8  ?<Constant "  B=">
       8  ?<Constant "  D=">
       8  ?<Constant " ; X ">
       4  ?<Constant " J ">
      12  ?<Constant " Loaded.">
       4  ?<Constant " Z ">
       4  ?<Constant " \n">
      24  ?<Constant " from current mesh.\n">
      24  ?<Constant " sanity checks passed.\n">
      16  ?<Constant "# of samples: ">
       8  ?<Constant ").\n\n">
       8  ?<Constant ", Y ">
       4  ?<Constant ": ">
      60  ?<Constant "?(F)ade height for Be...">
      32  ?<Constant "?(P)hase value invali...">
      36  ?<Constant "?(R)epetition count i...">
      44  ?<Constant "?(V)erbose level is i...">
      52  ?<Constant "?Can\'t activate and d...">
      32  ?<Constant "?EEPROM storage not a...">
      32  ?<Constant "?Enable EEPROM and in...">
      44  ?<Constant "?Invalid grid size (J...">
      24  ?<Constant "?Invalid storage slot.\n">
      48  ?<Constant "?P2 is only available...">
      48  ?<Constant "?P4 is only available...">
      28  ?<Constant "?Storage slot # requi...">
      12  ?<Constant "?Use 0 to ">
      32  ?<Constant "Attempt to probe off ...">
      44  ?<Constant "Both X & Y locations ...">
      24  ?<Constant "Could not complete LSF!">
      16  ?<Constant "D constant: ">
      36  ?<Constant "Default storage slot ...">
       8  ?<Constant "Done.\n">
      16  ?<Constant "EEPROM Dump:\n">
      28  ?<Constant "Entire Mesh invalidat...">
      24  ?<Constant "Extrapolating mesh...">
      12  ?<Constant "G29 I 999\n">
      20  ?<Constant "GRID_MAX_POINTS_X  ">
      20  ?<Constant "GRID_MAX_POINTS_Y  ">
      20  ?<Constant "Insufficient data\n">
      20  ?<Constant "Invalid map type.\n\n">
      40  ?<Constant "Invalid test_pattern ...">
      16  ?<Constant "LSF Results A=">
      32  ?<Constant "Loading test_pattern ...">
      28  ?<Constant "Locations invalidated.\n\n">
       8  ?<Constant "M421 I ">
      36  ?<Constant "M502, M500, M501 in t...">
     280  ?<Constant "MESH_MAX_X  (((((((mk...">
      56  ?<Constant "MESH_MAX_X  (mksTmp.m...">
     280  ?<Constant "MESH_MAX_Y  (((((((mk...">
      56  ?<Constant "MESH_MAX_Y  (mksTmp.m...">
     280  ?<Constant "MESH_MIN_X  (((((((mk...">
      56  ?<Constant "MESH_MIN_X  (mksTmp.m...">
     280  ?<Constant "MESH_MIN_Y  (((((((mk...">
      56  ?<Constant "MESH_MIN_Y  (mksTmp.m...">
      16  ?<Constant "MESH_X_DIST  ">
      16  ?<Constant "MESH_Y_DIST  ">
      20  ?<Constant "Mean Mesh Height: ">
       8  ?<Constant "Mesh ">
      36  ?<Constant "Mesh invalidated. Pro...">
      16  ?<Constant "Mesh zeroed.\n">
      16  ?<Constant "No Mesh Loaded.">
      36  ?<Constant "Probing Mesh Points C...">
      24  ?<Constant "Standard Deviation: ">
      28  ?<Constant "Subtracting mesh in s...">
      20  ?<Constant "UBL object count: ">
      24  ?<Constant "X-Axis Mesh Points at: ">
      24  ?<Constant "Y-Axis Mesh Points at: ">
       4  ?<Constant "]\n">
      24  ?<Constant "bed plane normal = [">
       8  ?<Constant "done\n">
      28  ?<Constant "planner.z_fade_height : ">
      20  ?<Constant "rotation matrix:">
      20  ?<Constant "zprobe_zoffset: ">
      24  ?<Constant {0}>
       4  ??DataTable75
       4  ??DataTable75_1
       4  ??DataTable75_2
       4  ??DataTable75_3
       4  ??DataTable75_4
       4  ??DataTable75_5
       4  ??DataTable75_6
       4  ??DataTable75_7
       4  ??DataTable76
       4  ??DataTable76_1
       4  ??DataTable76_2
       4  ??DataTable76_3
       4  ??DataTable76_4
       4  ??DataTable77
       4  ??DataTable77_1
       4  ??DataTable77_2
       4  ??DataTable78
       4  ??DataTable78_1
       4  ??DataTable78_2
       4  ??DataTable78_3
       4  ??DataTable78_4
       4  ??DataTable78_5
       4  ??DataTable78_6
       4  ??DataTable78_7
       4  ??DataTable78_8
       4  ??DataTable79
       4  ??DataTable79_1
       4  ??DataTable79_2
       4  ??DataTable81
       4  ??DataTable81_1
       4  ??DataTable81_2
       4  ??DataTable81_3
       4  ??DataTable82
       4  ??DataTable82_1
       4  ??DataTable82_2
       4  ??DataTable82_3
       4  ??DataTable82_4
       4  ??DataTable82_5
       4  ??DataTable82_6
       4  ??DataTable83
       4  ??DataTable83_1
       4  ??DataTable83_2
       4  ??DataTable83_3
       4  ??DataTable83_4
       4  ??DataTable83_5
       4  ??DataTable83_6
       4  ??DataTable83_7
       4  ??DataTable83_8
       4  ??DataTable83_9
       4  ??DataTable84
       4  ??DataTable87
       4  ??DataTable87_1
       4  ??DataTable87_10
       4  ??DataTable87_11
       4  ??DataTable87_12
       4  ??DataTable87_13
       4  ??DataTable87_14
       4  ??DataTable87_15
       4  ??DataTable87_16
       4  ??DataTable87_17
       4  ??DataTable87_18
       4  ??DataTable87_19
       4  ??DataTable87_2
       4  ??DataTable87_3
       4  ??DataTable87_4
       4  ??DataTable87_5
       4  ??DataTable87_6
       4  ??DataTable87_7
       4  ??DataTable87_8
       4  ??DataTable87_9
       4  ??DataTable88
       4  ??DataTable88_1
       4  ??DataTable88_10
       4  ??DataTable88_11
       4  ??DataTable88_12
       4  ??DataTable88_13
       4  ??DataTable88_2
       4  ??DataTable88_3
       4  ??DataTable88_4
       4  ??DataTable88_5
       4  ??DataTable88_6
       4  ??DataTable88_7
       4  ??DataTable88_8
       4  ??DataTable88_9
       6  ?Subroutine0
       6  ?Subroutine1
       8  ?Subroutine2
      76  GCodeParser::value_float()
      28  GCodeParser::value_int()
       2  chirp_at_user()
     302  incremental_LSF(linear_fit_data *, float const &, float const &, float const &)
      21  info
          _ZGVinfo
       2  lcd_goto_screen(void (*)(), uint32_t)
     292  position_is_reachable_IS_KINEMATIC(float const &, float const &)
      32  serialprintPGM(char const *)
       2  ubl_lcd_clicked()
     910  unified_bed_leveling::find_closest_mesh_point_of_type(MeshPointType, float const &, float const &, bool, unsigned int *)
     782  unified_bed_leveling::find_furthest_invalid_mesh_point()
     460  unified_bed_leveling::find_mean_mesh_height()
      40  unified_bed_leveling::g29_c_flag
          unified_bed_leveling::g29_x_flag
          unified_bed_leveling::g29_y_flag
          ubl_state_at_invocation
          unified_bed_leveling::g29_verbose_level
          unified_bed_leveling::g29_phase_value
          unified_bed_leveling::g29_repetition_cnt
          unified_bed_leveling::g29_storage_slot
          unified_bed_leveling::g29_map_type
          unified_bed_leveling::g29_x_pos
          unified_bed_leveling::g29_y_pos
          unified_bed_leveling::g29_constant
          unified_bed_leveling::g29_grid_size
       4  unified_bed_leveling::g29_card_thickness
     184  unified_bed_leveling::g29_compare_current_mesh_to_stored_mesh()
     132  unified_bed_leveling::g29_eeprom_dump()
     896  unified_bed_leveling::g29_parameter_parsing()
    1314  unified_bed_leveling::g29_what_command()
    2932  unified_bed_leveling::gcode_G29_UBL()
     280  unified_bed_leveling::get_cell_index_x(float const &)
     276  unified_bed_leveling::get_cell_index_y(float const &)
     352  unified_bed_leveling::get_z_correction(float const &, float const &)
     276  unified_bed_leveling::mesh_index_to_xpos(uint8_t)
     272  unified_bed_leveling::mesh_index_to_ypos(uint8_t)
     650  unified_bed_leveling::probe_entire_mesh(float const &, float const &, bool, bool, bool)
      16  unified_bed_leveling::restore_ubl_active_state_and_leave()
      16  unified_bed_leveling::save_ubl_active_state_and_disable()
      82  unified_bed_leveling::shift_mesh_height()
     584  unified_bed_leveling::smart_fill_mesh()
     170  unified_bed_leveling::smart_fill_one(uint8_t, uint8_t, int8_t, int8_t)
    1156  unified_bed_leveling::smart_fill_wlsf(float const &)
     528  unified_bed_leveling::tilt_mesh_based_on_3pts(float const &, float const &, float const &)
    1164  unified_bed_leveling::tilt_mesh_based_on_probed_grid(bool)
       1  -- Other

 
     44 bytes in section .bss
     21 bytes in section .data
    245 bytes in section .rodata
 17 144 bytes in section .text
 
 14 958 bytes of CODE  memory (+ 2 186 bytes shared)
    244 bytes of CONST memory (+     1 byte  shared)
     65 bytes of DATA  memory

Errors: none
Warnings: 27
