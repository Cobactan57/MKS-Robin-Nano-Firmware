###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        13/Apr/2020  09:25:16
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\RingBuffer.cpp
#    Command line =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\RingBuffer.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\
#        -lA
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/Obj\
#        --debug --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Src\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/variant\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/libstmf4/include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui/Multi_language\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui/QRENCODE\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\..\Middlewares\GUI\
#        -Oh --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\RingBuffer.lst
#    Object file  =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/Obj\RingBuffer.o
#
###############################################################################

D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\RingBuffer.cpp
      1          /*
      2            Copyright (c) 2011 Arduino.  All right reserved.
      3          
      4            This library is free software; you can redistribute it and/or
      5            modify it under the terms of the GNU Lesser General Public
      6            License as published by the Free Software Foundation; either
      7            version 2.1 of the License, or (at your option) any later version.
      8          
      9            This library is distributed in the hope that it will be useful,
     10            but WITHOUT ANY WARRANTY; without even the implied warranty of
     11            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
     12            See the GNU Lesser General Public License for more details.
     13          
     14            You should have received a copy of the GNU Lesser General Public
     15            License along with this library; if not, write to the Free Software
     16            Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
     17          */
     18          
     19          #include "RingBuffer.h"
     20          #include <string.h>
     21          

   \                                 In section .text, align 2, keep-with-next
     22          RingBuffer::RingBuffer( void )
   \                     _ZN10RingBufferC1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
     23          {
   \                     ?Subroutine0: (+1)
   \   00000000   0x4604             MOV      R4,R0
     24              memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
   \   00000002   0x2160             MOVS     R1,#+96
   \   00000004   0x.... 0x....      BL       __aeabi_memclr4
     25              _iHead=0 ;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x6620             STR      R0,[R4, #+96]
     26              _iTail=0 ;
   \   0000000C   0x6660             STR      R0,[R4, #+100]
     27          }
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
     28          

   \                                 In section .text, align 2, keep-with-next
     29          void RingBuffer::store_char( uint8_t c )
     30          {
   \                     _ZN10RingBuffer10store_charEh: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
     31            int i = (uint32_t)(_iHead + 1) % SERIAL_BUFFER_SIZE ;
   \   00000002   0x6E02             LDR      R2,[R0, #+96]
   \   00000004   0x1C53             ADDS     R3,R2,#+1
   \   00000006   0x2460             MOVS     R4,#+96
   \   00000008   0xFBB3 0xF4F4      UDIV     R4,R3,R4
   \   0000000C   0xEB04 0x0544      ADD      R5,R4,R4, LSL #+1
     32          
     33            // if we should be storing the received character into the location
     34            // just before the tail (meaning that the head would advance to the
     35            // current location of the tail), we're about to overflow the buffer
     36            // and so we don't write the character or advance the head.
     37            if ( i != _iTail )
   \   00000010   0x6E44             LDR      R4,[R0, #+100]
   \   00000012   0xEBA3 0x1345      SUB      R3,R3,R5, LSL #+5
   \   00000016   0x42A3             CMP      R3,R4
   \   00000018   0xBF1C             ITT      NE 
     38            {
     39              _aucBuffer[_iHead] = c ;
   \   0000001A   0x5411             STRBNE   R1,[R2, R0]
     40              _iHead = i ;
   \   0000001C   0x6603             STRNE    R3,[R0, #+96]
     41            }
     42          }
   \   0000001E   0xBC30             POP      {R4,R5}
   \   00000020   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp RingBuffer::subobject RingBuffer()
   \                     _ZN10RingBufferC2Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine0
     43          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   RingBuffer::RingBuffer()
         8   -> __aeabi_memclr4
       8   RingBuffer::store_char(uint8_t)
       8   RingBuffer::subobject RingBuffer()
         8   -> __aeabi_memclr4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      18  ?Subroutine0
       2  RingBuffer::RingBuffer()
      34  RingBuffer::store_char(uint8_t)
       4  RingBuffer::subobject RingBuffer()

 
 58 bytes in section .text
 
 58 bytes of CODE memory

Errors: none
Warnings: none
