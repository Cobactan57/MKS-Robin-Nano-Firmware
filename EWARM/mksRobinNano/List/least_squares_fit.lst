###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        13/Apr/2020  09:24:53
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\least_squares_fit.cpp
#    Command line =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\least_squares_fit.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\
#        -lA
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/Obj\
#        --debug --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Src\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/variant\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/libstmf4/include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui/Multi_language\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui/QRENCODE\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\..\Middlewares\GUI\
#        -Oh --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\least_squares_fit.lst
#    Object file  =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/Obj\least_squares_fit.o
#
###############################################################################

D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\least_squares_fit.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          
     23          /**
     24           * Least Squares Best Fit by Roxy and Ed Williams
     25           *
     26           * This algorithm is high speed and has a very small code footprint.
     27           * Its results are identical to both the Iterative Least-Squares published
     28           * earlier by Roxy and the QR_SOLVE solution. If used in place of QR_SOLVE
     29           * it saves roughly 10K of program memory. It also does not require all of
     30           * coordinates to be present during the calculations. Each point can be
     31           * probed and then discarded.
     32           *
     33           */
     34          
     35          #include "MarlinConfig.h"

  #define UNUSED(x) ((void)(x))
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pe047]: 
          incompatible redefinition of macro "UNUSED" (declared at line 101 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\macros.h")

  		volatile volatile float desireBedTempBak;
  		         ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Inc\mks_cfg.h",626  Warning[Pe083]: 
          type qualifier specified more than once
     36          
     37          #if 1//ENABLED(AUTO_BED_LEVELING_UBL) || ENABLED(AUTO_BED_LEVELING_LINEAR)
     38          
     39          #include "macros.h"
     40          #include <math.h>
     41          
     42          #include "least_squares_fit.h"

  #define strcpy_P(dest, src) strcpy((dest), (src))
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",23  Warning[Pe047]: 
          incompatible redefinition of macro "strcpy_P" (declared at line 93
          of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

  #define strstr_P(a, b) strstr((a), (b))
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",26  Warning[Pe047]: 
          incompatible redefinition of macro "strstr_P" (declared at line 94
          of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

  #define sprintf_P(s, f, ...) sprintf((s), (f), __VA_ARGS__)
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",28  Warning[Pe047]: 
          incompatible redefinition of macro "sprintf_P" (declared at line 95
          of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

  #define pgm_read_word_near(addr) pgm_read_word(addr)
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",38  Warning[Pe047]: 
          incompatible redefinition of macro "pgm_read_word_near" (declared at
          line 65 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

    }
    ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\Marlin.h",537  Warning[Pe940]: 
          missing return statement at end of non-void function
          "position_is_reachable_IS_KINEMATIC"
     43          

   \                                 In section .text, align 4, keep-with-next
     44          int finish_incremental_LSF(struct linear_fit_data *lsf) {
   \                     _Z22finish_incremental_LSFP15linear_fit_data: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0x4606             MOV      R6,R0
   \   00000006   0xB083             SUB      SP,SP,#+12
     45          
     46            const float N = lsf->N;
   \   00000008   0x6BB0             LDR      R0,[R6, #+56]
   \   0000000A   0x9000             STR      R0,[SP, #+0]
     47          
     48            if (N == 0.0)
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000012   0xF000 0x80BF      BEQ.W    ??finish_incremental_LSF_0
     49              return 1;
     50          
     51            lsf->xbar /= N;
   \   00000016   0x6830             LDR      R0,[R6, #+0]
   \   00000018   0x9900             LDR      R1,[SP, #+0]
   \   0000001A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000001E   0x4605             MOV      R5,R0
   \   00000020   0x6035             STR      R5,[R6, #+0]
     52            lsf->ybar /= N;
   \   00000022   0x6870             LDR      R0,[R6, #+4]
   \   00000024   0x9900             LDR      R1,[SP, #+0]
   \   00000026   0x.... 0x....      BL       __aeabi_fdiv
   \   0000002A   0x4681             MOV      R9,R0
   \   0000002C   0xF8C6 0x9004      STR      R9,[R6, #+4]
     53            lsf->zbar /= N;
   \   00000030   0x68B0             LDR      R0,[R6, #+8]
   \   00000032   0x9900             LDR      R1,[SP, #+0]
   \   00000034   0x.... 0x....      BL       __aeabi_fdiv
   \   00000038   0x9001             STR      R0,[SP, #+4]
     54            lsf->x2bar = lsf->x2bar / N - sq(lsf->xbar);
   \   0000003A   0xF04F 0x547E      MOV      R4,#+1065353216
   \   0000003E   0x60B0             STR      R0,[R6, #+8]
   \   00000040   0x46A8             MOV      R8,R5
   \   00000042   0x2702             MOVS     R7,#+2
   \   00000044   0x46A2             MOV      R10,R4
   \   00000046   0xE004             B.N      ??finish_incremental_LSF_1
   \                     ??finish_incremental_LSF_2: (+1)
   \   00000048   0x4640             MOV      R0,R8
   \   0000004A   0x4641             MOV      R1,R8
   \   0000004C   0x.... 0x....      BL       __aeabi_fmul
   \   00000050   0x4680             MOV      R8,R0
   \                     ??finish_incremental_LSF_1: (+1)
   \   00000052   0x07F8             LSLS     R0,R7,#+31
   \   00000054   0xD504             BPL.N    ??finish_incremental_LSF_3
   \   00000056   0x4650             MOV      R0,R10
   \   00000058   0x4641             MOV      R1,R8
   \   0000005A   0x.... 0x....      BL       __aeabi_fmul
   \   0000005E   0x4682             MOV      R10,R0
   \                     ??finish_incremental_LSF_3: (+1)
   \   00000060   0x087F             LSRS     R7,R7,#+1
   \   00000062   0xD1F1             BNE.N    ??finish_incremental_LSF_2
   \   00000064   0x68F0             LDR      R0,[R6, #+12]
   \   00000066   0x9900             LDR      R1,[SP, #+0]
   \   00000068   0x.... 0x....      BL       __aeabi_fdiv
   \   0000006C   0x4651             MOV      R1,R10
   \   0000006E   0x.... 0x....      BL       __aeabi_fsub
   \   00000072   0x4680             MOV      R8,R0
   \   00000074   0xF8C6 0x800C      STR      R8,[R6, #+12]
     55            lsf->y2bar = lsf->y2bar / N - sq(lsf->ybar);
   \   00000078   0x46CB             MOV      R11,R9
   \   0000007A   0x2702             MOVS     R7,#+2
   \   0000007C   0x46A2             MOV      R10,R4
   \   0000007E   0xE004             B.N      ??finish_incremental_LSF_4
   \                     ??finish_incremental_LSF_5: (+1)
   \   00000080   0x4658             MOV      R0,R11
   \   00000082   0x4659             MOV      R1,R11
   \   00000084   0x.... 0x....      BL       __aeabi_fmul
   \   00000088   0x4683             MOV      R11,R0
   \                     ??finish_incremental_LSF_4: (+1)
   \   0000008A   0x07F8             LSLS     R0,R7,#+31
   \   0000008C   0xD504             BPL.N    ??finish_incremental_LSF_6
   \   0000008E   0x4650             MOV      R0,R10
   \   00000090   0x4659             MOV      R1,R11
   \   00000092   0x.... 0x....      BL       __aeabi_fmul
   \   00000096   0x4682             MOV      R10,R0
   \                     ??finish_incremental_LSF_6: (+1)
   \   00000098   0x087F             LSRS     R7,R7,#+1
   \   0000009A   0xD1F1             BNE.N    ??finish_incremental_LSF_5
   \   0000009C   0x6930             LDR      R0,[R6, #+16]
   \   0000009E   0x9900             LDR      R1,[SP, #+0]
   \   000000A0   0x.... 0x....      BL       __aeabi_fdiv
   \   000000A4   0x4651             MOV      R1,R10
   \   000000A6   0x.... 0x....      BL       __aeabi_fsub
   \   000000AA   0x9002             STR      R0,[SP, #+8]
   \   000000AC   0x6130             STR      R0,[R6, #+16]
     56            lsf->z2bar = lsf->z2bar / N - sq(lsf->zbar);
   \   000000AE   0x2702             MOVS     R7,#+2
   \   000000B0   0xF8DD 0xB004      LDR      R11,[SP, #+4]
   \   000000B4   0x46A2             MOV      R10,R4
   \   000000B6   0xE004             B.N      ??finish_incremental_LSF_7
   \                     ??finish_incremental_LSF_8: (+1)
   \   000000B8   0x4658             MOV      R0,R11
   \   000000BA   0x4659             MOV      R1,R11
   \   000000BC   0x.... 0x....      BL       __aeabi_fmul
   \   000000C0   0x4683             MOV      R11,R0
   \                     ??finish_incremental_LSF_7: (+1)
   \   000000C2   0x07F8             LSLS     R0,R7,#+31
   \   000000C4   0xD504             BPL.N    ??finish_incremental_LSF_9
   \   000000C6   0x4650             MOV      R0,R10
   \   000000C8   0x4659             MOV      R1,R11
   \   000000CA   0x.... 0x....      BL       __aeabi_fmul
   \   000000CE   0x4682             MOV      R10,R0
   \                     ??finish_incremental_LSF_9: (+1)
   \   000000D0   0x087F             LSRS     R7,R7,#+1
   \   000000D2   0xD1F1             BNE.N    ??finish_incremental_LSF_8
   \   000000D4   0x6970             LDR      R0,[R6, #+20]
   \   000000D6   0x9900             LDR      R1,[SP, #+0]
   \   000000D8   0x.... 0x....      BL       __aeabi_fdiv
   \   000000DC   0x4651             MOV      R1,R10
   \   000000DE   0x.... 0x....      BL       __aeabi_fsub
   \   000000E2   0x6170             STR      R0,[R6, #+20]
     57            lsf->xybar = lsf->xybar / N - lsf->xbar * lsf->ybar;
   \   000000E4   0x9900             LDR      R1,[SP, #+0]
   \   000000E6   0x69B0             LDR      R0,[R6, #+24]
   \   000000E8   0x.... 0x....      BL       __aeabi_fdiv
   \   000000EC   0x4607             MOV      R7,R0
   \   000000EE   0x4628             MOV      R0,R5
   \   000000F0   0x4649             MOV      R1,R9
   \   000000F2   0x.... 0x....      BL       __aeabi_fmul
   \   000000F6   0x4601             MOV      R1,R0
   \   000000F8   0x4638             MOV      R0,R7
   \   000000FA   0x.... 0x....      BL       __aeabi_fsub
   \   000000FE   0x4607             MOV      R7,R0
   \   00000100   0x61B7             STR      R7,[R6, #+24]
     58            lsf->yzbar = lsf->yzbar / N - lsf->ybar * lsf->zbar;
   \   00000102   0x6A30             LDR      R0,[R6, #+32]
   \   00000104   0x9900             LDR      R1,[SP, #+0]
   \   00000106   0x.... 0x....      BL       __aeabi_fdiv
   \   0000010A   0x4682             MOV      R10,R0
   \   0000010C   0x9801             LDR      R0,[SP, #+4]
   \   0000010E   0x4649             MOV      R1,R9
   \   00000110   0x.... 0x....      BL       __aeabi_fmul
   \   00000114   0x4601             MOV      R1,R0
   \   00000116   0x4650             MOV      R0,R10
   \   00000118   0x.... 0x....      BL       __aeabi_fsub
   \   0000011C   0x6230             STR      R0,[R6, #+32]
     59            lsf->xzbar = lsf->xzbar / N - lsf->xbar * lsf->zbar;
   \   0000011E   0x9900             LDR      R1,[SP, #+0]
   \   00000120   0x69F0             LDR      R0,[R6, #+28]
   \   00000122   0x.... 0x....      BL       __aeabi_fdiv
   \   00000126   0x4681             MOV      R9,R0
   \   00000128   0x9801             LDR      R0,[SP, #+4]
   \   0000012A   0x4629             MOV      R1,R5
   \   0000012C   0x.... 0x....      BL       __aeabi_fmul
   \   00000130   0x4601             MOV      R1,R0
   \   00000132   0x4648             MOV      R0,R9
   \   00000134   0x.... 0x....      BL       __aeabi_fsub
   \   00000138   0x61F0             STR      R0,[R6, #+28]
     60            const float DD = lsf->x2bar * lsf->y2bar - sq(lsf->xybar);
   \   0000013A   0x2502             MOVS     R5,#+2
   \   0000013C   0xE004             B.N      ??finish_incremental_LSF_10
   \                     ??finish_incremental_LSF_11: (+1)
   \   0000013E   0x4638             MOV      R0,R7
   \   00000140   0x4639             MOV      R1,R7
   \   00000142   0x.... 0x....      BL       __aeabi_fmul
   \   00000146   0x4607             MOV      R7,R0
   \                     ??finish_incremental_LSF_10: (+1)
   \   00000148   0x07E8             LSLS     R0,R5,#+31
   \   0000014A   0xD504             BPL.N    ??finish_incremental_LSF_12
   \   0000014C   0x4620             MOV      R0,R4
   \   0000014E   0x4639             MOV      R1,R7
   \   00000150   0x.... 0x....      BL       __aeabi_fmul
   \   00000154   0x4604             MOV      R4,R0
   \                     ??finish_incremental_LSF_12: (+1)
   \   00000156   0x086D             LSRS     R5,R5,#+1
   \   00000158   0xD1F1             BNE.N    ??finish_incremental_LSF_11
   \   0000015A   0x9802             LDR      R0,[SP, #+8]
   \   0000015C   0x4641             MOV      R1,R8
   \   0000015E   0x.... 0x....      BL       __aeabi_fmul
   \   00000162   0x4621             MOV      R1,R4
   \   00000164   0x.... 0x....      BL       __aeabi_fsub
   \   00000168   0x4681             MOV      R9,R0
     61          
     62            if (FABS(DD) <= 1e-10 * (lsf->max_absx + lsf->max_absy))
   \   0000016A   0xF029 0x4000      BIC      R0,R9,#0x80000000
   \   0000016E   0x.... 0x....      BL       __aeabi_f2d
   \   00000172   0x4604             MOV      R4,R0
   \   00000174   0x460D             MOV      R5,R1
   \   00000176   0x6A71             LDR      R1,[R6, #+36]
   \   00000178   0x6AB0             LDR      R0,[R6, #+40]
   \   0000017A   0x.... 0x....      BL       __aeabi_fadd
   \   0000017E   0x.... 0x....      BL       __aeabi_f2d
   \   00000182   0x4A25             LDR.N    R2,??finish_incremental_LSF_13  ;; 0xd9d7bdbb
   \   00000184   0x4B25             LDR.N    R3,??finish_incremental_LSF_13+0x4  ;; 0x3ddb7cdf
   \   00000186   0x.... 0x....      BL       __aeabi_dmul
   \   0000018A   0x4622             MOV      R2,R4
   \   0000018C   0x462B             MOV      R3,R5
   \   0000018E   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000192   0xD803             BHI.N    ??finish_incremental_LSF_14
     63              return 1;
   \                     ??finish_incremental_LSF_0: (+1)
   \   00000194   0x2001             MOVS     R0,#+1
   \   00000196   0xB003             ADD      SP,SP,#+12
   \   00000198   0xE8BD 0x8FF0      POP      {R4-R11,PC}
     64          
     65            lsf->A = (lsf->yzbar * lsf->xybar - lsf->xzbar * lsf->y2bar) / DD;
   \                     ??finish_incremental_LSF_14: (+1)
   \   0000019C   0x69B5             LDR      R5,[R6, #+24]
   \   0000019E   0xF8D6 0x8020      LDR      R8,[R6, #+32]
   \   000001A2   0x69F4             LDR      R4,[R6, #+28]
   \   000001A4   0x4640             MOV      R0,R8
   \   000001A6   0x4629             MOV      R1,R5
   \   000001A8   0x.... 0x....      BL       __aeabi_fmul
   \   000001AC   0x4607             MOV      R7,R0
   \   000001AE   0x6930             LDR      R0,[R6, #+16]
   \   000001B0   0x4621             MOV      R1,R4
   \   000001B2   0x.... 0x....      BL       __aeabi_fmul
   \   000001B6   0x4601             MOV      R1,R0
   \   000001B8   0x4638             MOV      R0,R7
   \   000001BA   0x.... 0x....      BL       __aeabi_fsub
   \   000001BE   0x4649             MOV      R1,R9
   \   000001C0   0x.... 0x....      BL       __aeabi_fdiv
   \   000001C4   0x4607             MOV      R7,R0
   \   000001C6   0x62F7             STR      R7,[R6, #+44]
     66            lsf->B = (lsf->xzbar * lsf->xybar - lsf->yzbar * lsf->x2bar) / DD;
   \   000001C8   0x4620             MOV      R0,R4
   \   000001CA   0x4629             MOV      R1,R5
   \   000001CC   0x.... 0x....      BL       __aeabi_fmul
   \   000001D0   0x4604             MOV      R4,R0
   \   000001D2   0x68F0             LDR      R0,[R6, #+12]
   \   000001D4   0x4641             MOV      R1,R8
   \   000001D6   0x.... 0x....      BL       __aeabi_fmul
   \   000001DA   0x4601             MOV      R1,R0
   \   000001DC   0x4620             MOV      R0,R4
   \   000001DE   0x.... 0x....      BL       __aeabi_fsub
   \   000001E2   0x4649             MOV      R1,R9
   \   000001E4   0x.... 0x....      BL       __aeabi_fdiv
   \   000001E8   0x4604             MOV      R4,R0
   \   000001EA   0x6334             STR      R4,[R6, #+48]
     67            lsf->D = -(lsf->zbar + lsf->A * lsf->xbar + lsf->B * lsf->ybar);
   \   000001EC   0x4639             MOV      R1,R7
   \   000001EE   0x6830             LDR      R0,[R6, #+0]
   \   000001F0   0x.... 0x....      BL       __aeabi_fmul
   \   000001F4   0x68B1             LDR      R1,[R6, #+8]
   \   000001F6   0x.... 0x....      BL       __aeabi_fadd
   \   000001FA   0x4605             MOV      R5,R0
   \   000001FC   0x6870             LDR      R0,[R6, #+4]
   \   000001FE   0x4621             MOV      R1,R4
   \   00000200   0x.... 0x....      BL       __aeabi_fmul
   \   00000204   0x4629             MOV      R1,R5
   \   00000206   0x.... 0x....      BL       __aeabi_fadd
   \   0000020A   0xF080 0x4000      EOR      R0,R0,#0x80000000
   \   0000020E   0x6370             STR      R0,[R6, #+52]
     68            return 0;
   \   00000210   0xB003             ADD      SP,SP,#+12
   \   00000212   0x2000             MOVS     R0,#+0
   \   00000214   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??finish_incremental_LSF_13:
   \   00000218   0xD9D7BDBB         DC32     0xd9d7bdbb
   \   0000021C   0x3DDB7CDF         DC32     0x3ddb7cdf
     69          }
     70          
     71          #endif // AUTO_BED_LEVELING_UBL || ENABLED(AUTO_BED_LEVELING_LINEAR)

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   finish_incremental_LSF(linear_fit_data *)
        48   -> __aeabi_cdrcmple
        48   -> __aeabi_cfcmpeq
        48   -> __aeabi_dmul
        48   -> __aeabi_f2d
        48   -> __aeabi_fadd
        48   -> __aeabi_fdiv
        48   -> __aeabi_fmul
        48   -> __aeabi_fsub


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     544  finish_incremental_LSF(linear_fit_data *)
       1  -- Other

 
   1 byte  in section .rodata
 544 bytes in section .text
 
 544 bytes of CODE  memory
   0 bytes of CONST memory (+ 1 byte shared)

Errors: none
Warnings: 7
