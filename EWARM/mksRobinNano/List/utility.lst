###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        13/Apr/2020  09:25:29
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\utility.cpp
#    Command line =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\utility.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\
#        -lA
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/Obj\
#        --debug --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Src\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/variant\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/libstmf4/include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui/Multi_language\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui/QRENCODE\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\..\Middlewares\GUI\
#        -Oh --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\utility.lst
#    Object file  =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/Obj\utility.o
#
###############################################################################

D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\utility.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          
     23          #include "Marlin.h"

  #define UNUSED(x) ((void)(x))
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pe047]: 
          incompatible redefinition of macro "UNUSED" (declared at line 101 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\macros.h")

  		volatile volatile float desireBedTempBak;
  		         ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Inc\mks_cfg.h",626  Warning[Pe083]: 
          type qualifier specified more than once

  #define strcpy_P(dest, src) strcpy((dest), (src))
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",23  Warning[Pe047]: 
          incompatible redefinition of macro "strcpy_P" (declared at line 93
          of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

  #define strstr_P(a, b) strstr((a), (b))
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",26  Warning[Pe047]: 
          incompatible redefinition of macro "strstr_P" (declared at line 94
          of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

  #define sprintf_P(s, f, ...) sprintf((s), (f), __VA_ARGS__)
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",28  Warning[Pe047]: 
          incompatible redefinition of macro "sprintf_P" (declared at line 95
          of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

  #define pgm_read_word_near(addr) pgm_read_word(addr)
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",38  Warning[Pe047]: 
          incompatible redefinition of macro "pgm_read_word_near" (declared at
          line 65 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

    }
    ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\Marlin.h",537  Warning[Pe940]: 
          missing return statement at end of non-void function
          "position_is_reachable_IS_KINEMATIC"
     24          #include "utility.h"
     25          #include "temperature.h"

        target_temperature[HOTEND_INDEX] = celsius;
                                         ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\temperature.h",406  Warning[Pa093]: 
          implicit conversion from floating point to integer

          target_temperature_bed =
                                 ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\temperature.h",414  Warning[Pa093]: 
          implicit conversion from floating point to integer
     26          

   \                                 In section .text, align 2, keep-with-next
     27          void safe_delay(millis_t ms) {
   \                     _Z10safe_delaym: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x2C33             CMP      R4,#+51
   \   00000006   0xD307             BCC.N    ??safe_delay_0
     28            while (ms > 50) {
     29              ms -= 50;
   \                     ??safe_delay_1: (+1)
   \   00000008   0x3C32             SUBS     R4,R4,#+50
     30              delay(50);
   \   0000000A   0x2032             MOVS     R0,#+50
   \   0000000C   0x.... 0x....      BL       HAL_Delay
     31              thermalManager.manage_heater();
   \   00000010   0x.... 0x....      BL       _ZN11Temperature13manage_heaterEv
     32            }
   \   00000014   0x2C33             CMP      R4,#+51
   \   00000016   0xD2F7             BCS.N    ??safe_delay_1
     33            delay(ms);
   \                     ??safe_delay_0: (+1)
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       HAL_Delay
     34            thermalManager.manage_heater(); // This keeps us safe if too many small safe_delay() calls are made
   \   0000001E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000022   0x.... 0x....      B.W      _ZN11Temperature13manage_heaterEv
     35          }
     36          
     37          #if ENABLED(EEPROM_SETTINGS)
     38          

   \                                 In section .text, align 2, keep-with-next
     39            void crc16(uint16_t *crc, const void * const data, uint16_t cnt) {
     40              uint8_t *ptr = (uint8_t *)data;
   \                     _Z5crc16PtPKvt: (+1)
   \   00000000   0xB902             CBNZ.N   R2,??crc16_0
   \   00000002   0x4770             BX       LR
   \                     ??crc16_0: (+1)
   \   00000004   0xB470             PUSH     {R4-R6}
   \   00000006   0xF241 0x0321      MOVW     R3,#+4129
     41              while (cnt--) {
     42                *crc = (uint16_t)(*crc ^ (uint16_t)(((uint16_t)*ptr++) << 8));
   \                     ??crc16_1: (+1)
   \   0000000A   0x8804             LDRH     R4,[R0, #+0]
   \   0000000C   0xF811 0x5B01      LDRB     R5,[R1], #+1
   \   00000010   0xEA84 0x2405      EOR      R4,R4,R5, LSL #+8
   \   00000014   0x8004             STRH     R4,[R0, #+0]
     43                for (uint8_t x = 0; x < 8; x++)
   \   00000016   0x1E52             SUBS     R2,R2,#+1
   \   00000018   0x2408             MOVS     R4,#+8
     44                  *crc = (uint16_t)((*crc & 0x8000) ? ((uint16_t)(*crc << 1) ^ 0x1021) : (*crc << 1));
   \                     ??crc16_2: (+1)
   \   0000001A   0x8805             LDRH     R5,[R0, #+0]
   \   0000001C   0x006E             LSLS     R6,R5,#+1
   \   0000001E   0x042D             LSLS     R5,R5,#+16
   \   00000020   0xBF48             IT       MI 
   \   00000022   0x405E             EORMI    R6,R3,R6
   \   00000024   0x8006             STRH     R6,[R0, #+0]
   \   00000026   0x1E64             SUBS     R4,R4,#+1
   \   00000028   0xD1F7             BNE.N    ??crc16_2
     45              }
   \   0000002A   0x2A00             CMP      R2,#+0
   \   0000002C   0xD1ED             BNE.N    ??crc16_1
     46            }
   \   0000002E   0xBC70             POP      {R4-R6}
   \   00000030   0x4770             BX       LR               ;; return
     47          
     48          #endif // EEPROM_SETTINGS
     49          
     50          #if ENABLED(ULTRA_LCD)
     51          
     52            char conv[8] = { 0 };
     53          
     54            #define DIGIT(n) ('0' + (n))
     55            #define DIGIMOD(n, f) DIGIT((n)/(f) % 10)
     56            #define RJDIGIT(n, f) ((n) >= (f) ? DIGIMOD(n, f) : ' ')
     57            #define MINUSOR(n, alt) (n >= 0 ? (alt) : (n = -n, '-'))
     58          
     59            // Convert unsigned int to string 123 format
     60            char* i8tostr3(const uint8_t xx) {
     61              conv[4] = RJDIGIT(xx, 100);
     62              conv[5] = RJDIGIT(xx, 10);
     63              conv[6] = DIGIMOD(xx, 1);
     64              return &conv[4];
     65            }
     66          
     67            // Convert signed int to rj string with 123 or -12 format
     68            char* itostr3(const int x) {
     69              int xx = x;
     70              conv[4] = MINUSOR(xx, RJDIGIT(xx, 100));
     71              conv[5] = RJDIGIT(xx, 10);
     72              conv[6] = DIGIMOD(xx, 1);
     73              return &conv[4];
     74            }
     75          
     76            // Convert unsigned int to lj string with 123 format
     77            char* itostr3left(const int xx) {
     78              char *str = &conv[6];
     79              *str = DIGIMOD(xx, 1);
     80              if (xx >= 10) {
     81                *(--str) = DIGIMOD(xx, 10);
     82                if (xx >= 100)
     83                  *(--str) = DIGIMOD(xx, 100);
     84              }
     85              return str;
     86            }
     87          
     88            // Convert signed int to rj string with 1234, _123, -123, _-12, or __-1 format
     89            char *itostr4sign(const int x) {
     90              const bool neg = x < 0;
     91              const int xx = neg ? -x : x;
     92              if (x >= 1000) {
     93                conv[3] = DIGIMOD(xx, 1000);
     94                conv[4] = DIGIMOD(xx, 100);
     95                conv[5] = DIGIMOD(xx, 10);
     96              }
     97              else {
     98                if (xx >= 100) {
     99                  conv[3] = neg ? '-' : ' ';
    100                  conv[4] = DIGIMOD(xx, 100);
    101                  conv[5] = DIGIMOD(xx, 10);
    102                }
    103                else {
    104                  conv[3] = ' ';
    105                  conv[4] = ' ';
    106                  if (xx >= 10) {
    107                    conv[4] = neg ? '-' : ' ';
    108                    conv[5] = DIGIMOD(xx, 10);
    109                  }
    110                  else {
    111                    conv[5] = neg ? '-' : ' ';
    112                  }
    113                }
    114              }
    115              conv[6] = DIGIMOD(xx, 1);
    116              return &conv[3];
    117            }
    118          
    119            // Convert unsigned float to string with 1.23 format
    120            char* ftostr12ns(const float &x) {
    121              const long xx = (x < 0 ? -x : x) * 100;
    122              conv[3] = DIGIMOD(xx, 100);
    123              conv[4] = '.';
    124              conv[5] = DIGIMOD(xx, 10);
    125              conv[6] = DIGIMOD(xx, 1);
    126              return &conv[3];
    127            }
    128          
    129            // Convert signed float to fixed-length string with 023.45 / -23.45 format
    130            char *ftostr32(const float &x) {
    131              long xx = x * 100;
    132              conv[1] = MINUSOR(xx, DIGIMOD(xx, 10000));
    133              conv[2] = DIGIMOD(xx, 1000);
    134              conv[3] = DIGIMOD(xx, 100);
    135              conv[4] = '.';
    136              conv[5] = DIGIMOD(xx, 10);
    137              conv[6] = DIGIMOD(xx, 1);
    138              return &conv[1];
    139            }
    140          
    141            #if ENABLED(LCD_DECIMAL_SMALL_XY)
    142          
    143              // Convert float to rj string with 1234, _123, -123, _-12, 12.3, _1.2, or -1.2 format
    144              char *ftostr4sign(const float &fx) {
    145                const int x = fx * 10;
    146                if (!WITHIN(x, -99, 999)) return itostr4sign((int)fx);
    147                const bool neg = x < 0;
    148                const int xx = neg ? -x : x;
    149                conv[3] = neg ? '-' : (xx >= 100 ? DIGIMOD(xx, 100) : ' ');
    150                conv[4] = DIGIMOD(xx, 10);
    151                conv[5] = '.';
    152                conv[6] = DIGIMOD(xx, 1);
    153                return &conv[3];
    154              }
    155          
    156            #endif // LCD_DECIMAL_SMALL_XY
    157          
    158            // Convert float to fixed-length string with +123.4 / -123.4 format
    159            char* ftostr41sign(const float &x) {
    160              int xx = x * 10;
    161              conv[1] = MINUSOR(xx, '+');
    162              conv[2] = DIGIMOD(xx, 1000);
    163              conv[3] = DIGIMOD(xx, 100);
    164              conv[4] = DIGIMOD(xx, 10);
    165              conv[5] = '.';
    166              conv[6] = DIGIMOD(xx, 1);
    167              return &conv[1];
    168            }
    169          
    170            // Convert signed float to string (6 digit) with -1.234 / _0.000 / +1.234 format
    171            char* ftostr43sign(const float &x, char plus/*=' '*/) {
    172              long xx = x * 1000;
    173              conv[1] = xx ? MINUSOR(xx, plus) : ' ';
    174              conv[2] = DIGIMOD(xx, 1000);
    175              conv[3] = '.';
    176              conv[4] = DIGIMOD(xx, 100);
    177              conv[5] = DIGIMOD(xx, 10);
    178              conv[6] = DIGIMOD(xx, 1);
    179              return &conv[1];
    180            }
    181          
    182            // Convert unsigned float to rj string with 12345 format
    183            char* ftostr5rj(const float &x) {
    184              const long xx = x < 0 ? -x : x;
    185              conv[2] = RJDIGIT(xx, 10000);
    186              conv[3] = RJDIGIT(xx, 1000);
    187              conv[4] = RJDIGIT(xx, 100);
    188              conv[5] = RJDIGIT(xx, 10);
    189              conv[6] = DIGIMOD(xx, 1);
    190              return &conv[2];
    191            }
    192          
    193            // Convert signed float to string with +1234.5 format
    194            char* ftostr51sign(const float &x) {
    195              long xx = x * 10;
    196              conv[0] = MINUSOR(xx, '+');
    197              conv[1] = DIGIMOD(xx, 10000);
    198              conv[2] = DIGIMOD(xx, 1000);
    199              conv[3] = DIGIMOD(xx, 100);
    200              conv[4] = DIGIMOD(xx, 10);
    201              conv[5] = '.';
    202              conv[6] = DIGIMOD(xx, 1);
    203              return conv;
    204            }
    205          
    206            // Convert signed float to string with +123.45 format
    207            char* ftostr52sign(const float &x) {
    208              long xx = x * 100;
    209              conv[0] = MINUSOR(xx, '+');
    210              conv[1] = DIGIMOD(xx, 10000);
    211              conv[2] = DIGIMOD(xx, 1000);
    212              conv[3] = DIGIMOD(xx, 100);
    213              conv[4] = '.';
    214              conv[5] = DIGIMOD(xx, 10);
    215              conv[6] = DIGIMOD(xx, 1);
    216              return conv;
    217            }
    218          
    219            // Convert unsigned float to string with 1234.56 format omitting trailing zeros
    220            char* ftostr62rj(const float &x) {
    221              const long xx = (x < 0 ? -x : x) * 100;
    222              conv[0] = RJDIGIT(xx, 100000);
    223              conv[1] = RJDIGIT(xx, 10000);
    224              conv[2] = RJDIGIT(xx, 1000);
    225              conv[3] = DIGIMOD(xx, 100);
    226              conv[4] = '.';
    227              conv[5] = DIGIMOD(xx, 10);
    228              conv[6] = DIGIMOD(xx, 1);
    229              return conv;
    230            }
    231          
    232            // Convert signed float to space-padded string with -_23.4_ format
    233            char* ftostr52sp(const float &x) {
    234              long xx = x * 100;
    235              uint8_t dig;
    236              conv[1] = MINUSOR(xx, RJDIGIT(xx, 10000));
    237              conv[2] = RJDIGIT(xx, 1000);
    238              conv[3] = DIGIMOD(xx, 100);
    239          
    240              if ((dig = xx % 10)) {          // second digit after decimal point?
    241                conv[4] = '.';
    242                conv[5] = DIGIMOD(xx, 10);
    243                conv[6] = DIGIT(dig);
    244              }
    245              else {
    246                if ((dig = (xx / 10) % 10)) { // first digit after decimal point?
    247                  conv[4] = '.';
    248                  conv[5] = DIGIT(dig);
    249                }
    250                else                          // nothing after decimal point
    251                  conv[4] = conv[5] = ' ';
    252                conv[6] = ' ';
    253              }
    254              return &conv[1];
    255            }
    256          
    257          #endif // ULTRA_LCD

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   crc16(uint16_t *, void const *, uint16_t)
       8   safe_delay(millis_t)
         8   -> HAL_Delay
         0   -> Temperature::manage_heater()
         8   -> Temperature::manage_heater()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      50  crc16(uint16_t *, void const *, uint16_t)
      38  safe_delay(millis_t)
       1  -- Other

 
  1 byte  in section .rodata
 88 bytes in section .text
 
 88 bytes of CODE  memory
  0 bytes of CONST memory (+ 1 byte shared)

Errors: none
Warnings: 9
