###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        13/Apr/2020  10:56:21
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\configuration_store.cpp
#    Command line =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\configuration_store.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\
#        -lA
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/Obj\
#        --debug --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Src\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/variant\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/libstmf4/include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui/Multi_language\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui/QRENCODE\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\..\Middlewares\GUI\
#        -Oh --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\configuration_store.lst
#    Object file  =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/Obj\configuration_store.o
#
###############################################################################

D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\configuration_store.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          
     23          /**
     24           * configuration_store.cpp
     25           *
     26           * Settings and EEPROM storage
     27           *
     28           * IMPORTANT:  Whenever there are changes made to the variables stored in EEPROM
     29           * in the functions below, also increment the version number. This makes sure that
     30           * the default values are used whenever there is a change to the data, to prevent
     31           * wrong data being written to the variables.
     32           *
     33           * ALSO: Variables in the Store and Retrieve sections must be in the same order.
     34           *       If a feature is disabled, some data must still be written that, when read,
     35           *       either sets a Sane Default, or results in No Change to the existing value.
     36           *
     37           */
     38          
     39          #define EEPROM_VERSION "V47"
     40          
     41          // Change EEPROM version if these are changed:
     42          #define EEPROM_OFFSET 0//100
     43          
     44          /**
     45           * V47 EEPROM Layout:
     46           *
     47           *  100  Version                                    (char x4)
     48           *  104  EEPROM CRC16                               (uint16_t)
     49           *
     50           *  106            E_STEPPERS                       (uint8_t)
     51           *  107  M92 XYZE  planner.axis_steps_per_mm        (float x4 ... x8) + 64
     52           *  123  M203 XYZE planner.max_feedrate_mm_s        (float x4 ... x8) + 64
     53           *  139  M201 XYZE planner.max_acceleration_mm_per_s2 (uint32_t x4 ... x8) + 64
     54           *  155  M204 P    planner.acceleration             (float)
     55           *  159  M204 R    planner.retract_acceleration     (float)
     56           *  163  M204 T    planner.travel_acceleration      (float)
     57           *  167  M205 S    planner.min_feedrate_mm_s        (float)
     58           *  171  M205 T    planner.min_travel_feedrate_mm_s (float)
     59           *  175  M205 B    planner.min_segment_time_us      (ulong)
     60           *  179  M205 X    planner.max_jerk[X_AXIS]         (float)
     61           *  183  M205 Y    planner.max_jerk[Y_AXIS]         (float)
     62           *  187  M205 Z    planner.max_jerk[Z_AXIS]         (float)
     63           *  191  M205 E    planner.max_jerk[E_AXIS]         (float)
     64           *  195  M206 XYZ  home_offset                      (float x3)
     65           *  207  M218 XYZ  hotend_offset                    (float x3 per additional hotend) +16
     66           *
     67           * Global Leveling:                                 4 bytes
     68           *  219            z_fade_height                    (float)
     69           *
     70           * MESH_BED_LEVELING:                               43 bytes
     71           *  223  M420 S    planner.leveling_active          (bool)
     72           *  224            mbl.z_offset                     (float)
     73           *  228            GRID_MAX_POINTS_X                (uint8_t)
     74           *  229            GRID_MAX_POINTS_Y                (uint8_t)
     75           *  230 G29 S3 XYZ z_values[][]                     (float x9, up to float x81) +288
     76           *
     77           * HAS_BED_PROBE:                                   4 bytes
     78           *  266  M851      zprobe_zoffset                   (float)
     79           *
     80           * ABL_PLANAR:                                      36 bytes
     81           *  270            planner.bed_level_matrix         (matrix_3x3 = float x9)
     82           *
     83           * AUTO_BED_LEVELING_BILINEAR:                      46 bytes
     84           *  306            GRID_MAX_POINTS_X                (uint8_t)
     85           *  307            GRID_MAX_POINTS_Y                (uint8_t)
     86           *  308            bilinear_grid_spacing            (int x2)
     87           *  312  G29 L F   bilinear_start                   (int x2)
     88           *  316            z_values[][]                     (float x9, up to float x256) +988
     89           *
     90           * AUTO_BED_LEVELING_UBL:                           2 bytes
     91           *  352  G29 A     planner.leveling_active          (bool)
     92           *  353  G29 S     ubl.storage_slot                 (int8_t)
     93           *
     94           * DELTA:                                           44 bytes
     95           *  354  M666 H    delta_height                     (float)
     96           *  358  M666 XYZ  delta_endstop_adj                (float x3)
     97           *  370  M665 R    delta_radius                     (float)
     98           *  374  M665 L    delta_diagonal_rod               (float)
     99           *  378  M665 S    delta_segments_per_second        (float)
    100           *  382  M665 B    delta_calibration_radius         (float)
    101           *  386  M665 X    delta_tower_angle_trim[A]        (float)
    102           *  390  M665 Y    delta_tower_angle_trim[B]        (float)
    103           *  394  M665 Z    delta_tower_angle_trim[C]        (float)
    104           *
    105           * [XYZ]_DUAL_ENDSTOPS:                             12 bytes
    106           *  354  M666 X    x_endstop_adj                    (float)
    107           *  358  M666 Y    y_endstop_adj                    (float)
    108           *  362  M666 Z    z_endstop_adj                    (float)
    109           *
    110           * ULTIPANEL:                                       6 bytes
    111           *  398  M145 S0 H lcd_preheat_hotend_temp          (int x2)
    112           *  402  M145 S0 B lcd_preheat_bed_temp             (int x2)
    113           *  406  M145 S0 F lcd_preheat_fan_speed            (int x2)
    114           *
    115           * PIDTEMP:                                         82 bytes
    116           *  410  M301 E0 PIDC  Kp[0], Ki[0], Kd[0], Kc[0]   (float x4)
    117           *  426  M301 E1 PIDC  Kp[1], Ki[1], Kd[1], Kc[1]   (float x4)
    118           *  442  M301 E2 PIDC  Kp[2], Ki[2], Kd[2], Kc[2]   (float x4)
    119           *  458  M301 E3 PIDC  Kp[3], Ki[3], Kd[3], Kc[3]   (float x4)
    120           *  474  M301 E4 PIDC  Kp[3], Ki[3], Kd[3], Kc[3]   (float x4)
    121           *  490  M301 L        lpq_len                      (int)
    122           *
    123           * PIDTEMPBED:                                      12 bytes
    124           *  492  M304 PID  bedKp, .bedKi, .bedKd            (float x3)
    125           *
    126           * DOGLCD:                                          2 bytes
    127           *  504  M250 C    lcd_contrast                     (uint16_t)
    128           *
    129           * FWRETRACT:                                       33 bytes
    130           *  506  M209 S    autoretract_enabled              (bool)
    131           *  507  M207 S    retract_length                   (float)
    132           *  511  M207 F    retract_feedrate_mm_s            (float)
    133           *  515  M207 Z    retract_zlift                    (float)
    134           *  519  M208 S    retract_recover_length           (float)
    135           *  523  M208 F    retract_recover_feedrate_mm_s    (float)
    136           *  527  M207 W    swap_retract_length              (float)
    137           *  531  M208 W    swap_retract_recover_length      (float)
    138           *  535  M208 R    swap_retract_recover_feedrate_mm_s (float)
    139           *
    140           * Volumetric Extrusion:                            21 bytes
    141           *  539  M200 D    parser.volumetric_enabled        (bool)
    142           *  540  M200 T D  planner.filament_size            (float x5) (T0..3)
    143           *
    144           * HAS_TRINAMIC:                                    22 bytes
    145           *  560  M906 X    Stepper X current                (uint16_t)
    146           *  562  M906 Y    Stepper Y current                (uint16_t)
    147           *  564  M906 Z    Stepper Z current                (uint16_t)
    148           *  566  M906 X2   Stepper X2 current               (uint16_t)
    149           *  568  M906 Y2   Stepper Y2 current               (uint16_t)
    150           *  570  M906 Z2   Stepper Z2 current               (uint16_t)
    151           *  572  M906 E0   Stepper E0 current               (uint16_t)
    152           *  574  M906 E1   Stepper E1 current               (uint16_t)
    153           *  576  M906 E2   Stepper E2 current               (uint16_t)
    154           *  578  M906 E3   Stepper E3 current               (uint16_t)
    155           *  580  M906 E4   Stepper E4 current               (uint16_t)
    156           *
    157           * SENSORLESS HOMING                                4 bytes
    158           *  582  M914 X    Stepper X and X2 threshold       (int16_t)
    159           *  584  M914 Y    Stepper Y and Y2 threshold       (int16_t)
    160           *
    161           * LIN_ADVANCE:                                     8 bytes
    162           *  586  M900 K    extruder_advance_k               (float)
    163           *  590  M900 WHD  advance_ed_ratio                 (float)
    164           *
    165           * HAS_MOTOR_CURRENT_PWM:
    166           *  594  M907 X    Stepper XY current               (uint32_t)
    167           *  598  M907 Z    Stepper Z current                (uint32_t)
    168           *  602  M907 E    Stepper E current                (uint32_t)
    169           *
    170           * CNC_COORDINATE_SYSTEMS                           108 bytes
    171           *  606  G54-G59.3 coordinate_system                (float x 27)
    172           *
    173           * SKEW_CORRECTION:                                 12 bytes
    174           *  714  M852 I    planner.xy_skew_factor           (float)
    175           *  718  M852 J    planner.xz_skew_factor           (float)
    176           *  722  M852 K    planner.yz_skew_factor           (float)
    177           *
    178           *  726                                   Minimum end-point
    179           * 2255 (726 + 208 + 36 + 9 + 288 + 988)  Maximum end-point
    180           *
    181           * ========================================================================
    182           * meshes_begin (between max and min end-point, directly above)
    183           * -- MESHES --
    184           * meshes_end
    185           * -- MAT (Mesh Allocation Table) --                128 bytes (placeholder size)
    186           * mat_end = E2END (0xFFF)
    187           *
    188           */
    189          #include "configuration_store.h"

  #define UNUSED(x) ((void)(x))
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pe047]: 
          incompatible redefinition of macro "UNUSED" (declared at line 101 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\macros.h")

  		volatile volatile float desireBedTempBak;
  		         ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Inc\mks_cfg.h",626  Warning[Pe083]: 
          type qualifier specified more than once
    190          #include "at24cxx.h"
    191          

   \                                 In section .bss, align 4
    192          MarlinSettings settings;
   \                     settings:
   \   00000000                      DS8 4
    193          
    194          #include "Marlin.h"

  #define strcpy_P(dest, src) strcpy((dest), (src))
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",23  Warning[Pe047]: 
          incompatible redefinition of macro "strcpy_P" (declared at line 93
          of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

  #define strstr_P(a, b) strstr((a), (b))
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",26  Warning[Pe047]: 
          incompatible redefinition of macro "strstr_P" (declared at line 94
          of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

  #define sprintf_P(s, f, ...) sprintf((s), (f), __VA_ARGS__)
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",28  Warning[Pe047]: 
          incompatible redefinition of macro "sprintf_P" (declared at line 95
          of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

  #define pgm_read_word_near(addr) pgm_read_word(addr)
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",38  Warning[Pe047]: 
          incompatible redefinition of macro "pgm_read_word_near" (declared at
          line 65 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

   \                                 In section .text, align 4
   \   __interwork __softfp void serialprintPGM(char const *)
   \                     _Z14serialprintPGMPKc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4D05             LDR.N    R5,??serialprintPGM_0
   \   00000006   0xE003             B.N      ??serialprintPGM_1
   \                     ??serialprintPGM_2: (+1)
   \   00000008   0xB2C9             UXTB     R1,R1
   \   0000000A   0x4628             MOV      R0,R5
   \   0000000C   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??serialprintPGM_1: (+1)
   \   00000010   0xF914 0x1B01      LDRSB    R1,[R4], #+1
   \   00000014   0x0008             MOVS     R0,R1
   \   00000016   0xD1F7             BNE.N    ??serialprintPGM_2
   \   00000018   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   \   0000001A   0xBF00             Nop      
   \                     ??serialprintPGM_0:
   \   0000001C   0x........         DC32     Serial3

    }
    ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\Marlin.h",537  Warning[Pe940]: 
          missing return statement at end of non-void function
          "position_is_reachable_IS_KINEMATIC"
    195          #include "language.h"
    196          #include "endstops.h"
    197          #include "planner.h"

      static constexpr int8_t next_block_index(const int8_t block_index) { return BLOCK_MOD(block_index + 1); }
             ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\planner.h",627  Warning[Pe815]: 
          type qualifier on return type is meaningless

      static constexpr int8_t prev_block_index(const int8_t block_index) { return BLOCK_MOD(block_index - 1); }
             ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\planner.h",628  Warning[Pe815]: 
          type qualifier on return type is meaningless
    198          #include "temperature.h"

        target_temperature[HOTEND_INDEX] = celsius;
                                         ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\temperature.h",406  Warning[Pa093]: 
          implicit conversion from floating point to integer

          target_temperature_bed =
                                 ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\temperature.h",414  Warning[Pa093]: 
          implicit conversion from floating point to integer
    199          //#include "ultralcd.h"
    200          #include "cardreader.h"

  #define SD_DETECT_INVERTED false
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\cardreader.h",27  Warning[Pe047]: 
          incompatible redefinition of macro "SD_DETECT_INVERTED" (declared at
          line 524 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Configuration_adv.h")

  #define PSTR(s) s
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\cardreader.h",31  Warning[Pe047]: 
          incompatible redefinition of macro "PSTR" (declared at line 63 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin.h")

  #define pgm_read_byte(x) (*(char*)x)
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\cardreader.h",32  Warning[Pe047]: 
          incompatible redefinition of macro "pgm_read_byte" (declared at line
          64 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

  #define LONG_FILENAME_LENGTH (13*MAX_VFAT_ENTRIES+1)
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\cardreader.h",61  Warning[Pe047]: 
          incompatible redefinition of macro "LONG_FILENAME_LENGTH" (declared
          at line 119 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\SdFatConfig.h")

  #define ALLOW_DEPRECATED_FUNCTIONS 0
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\SdFat.h",635  Warning[Pe047]: 
          incompatible redefinition of macro "ALLOW_DEPRECATED_FUNCTIONS"
          (declared at line 67 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\SdFatConfig.h")

  #define SPI_SD_INIT_RATE 11
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\SdFat.h",647  Warning[Pe047]: 
          incompatible redefinition of macro "SPI_SD_INIT_RATE" (declared at
          line 79 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\SdFatConfig.h")
    201          #include "stepper.h"
    202          #include "gcode.h"

    FORCE_INLINE static millis_t value_millis_from_seconds() { return value_float() * 1000UL; }
                                                                      ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\gcode.h",207  Warning[Pa093]: 
          implicit conversion from floating point to integer
    203          #include "serial.h"
    204          
    205          #if 1//ENABLED(MESH_BED_LEVELING)
    206            #include "mesh_bed_leveling.h"

  				cx= (x - (MESH_MIN_X_IS_KINEMATIC)) * (1.0 / (MESH_X_DIST_IS_KINEMATIC));
  				  ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h",83  Warning[Pa093]: 
          implicit conversion from floating point to integer

  				cx= (x - (MESH_MIN_X_IS_Cartesian)) * (1.0 / (MESH_X_DIST_IS_Cartesian));
  				  ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h",87  Warning[Pa093]: 
          implicit conversion from floating point to integer

  				cy= (y - (MESH_MIN_Y_IS_KINEMATIC)) * (1.0 / (MESH_Y_DIST_IS_KINEMATIC));
  				  ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h",95  Warning[Pa093]: 
          implicit conversion from floating point to integer

  				cy= (y - (MESH_MIN_Y_IS_Cartesian)) * (1.0 / (MESH_Y_DIST_IS_Cartesian));
  				  ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h",97  Warning[Pa093]: 
          implicit conversion from floating point to integer

  				px = (x - (MESH_MIN_X_IS_KINEMATIC) + 0.5 * (MESH_X_DIST_IS_KINEMATIC)) * (1.0 / (MESH_X_DIST_IS_KINEMATIC));
  				   ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h",105  Warning[Pa093]: 
          implicit conversion from floating point to integer

  				px = (x - (MESH_MIN_X_IS_Cartesian) + 0.5 * (MESH_X_DIST_IS_Cartesian)) * (1.0 / (MESH_X_DIST_IS_Cartesian));
  				   ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h",107  Warning[Pa093]: 
          implicit conversion from floating point to integer

        	py = (y - (MESH_MIN_Y_IS_KINEMATIC) + 0.5 * (MESH_Y_DIST_IS_KINEMATIC)) * (1.0 / (MESH_Y_DIST_IS_KINEMATIC));
        	   ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h",115  Warning[Pa093]: 
          implicit conversion from floating point to integer

  				py = (y - (MESH_MIN_Y_IS_Cartesian) + 0.5 * (MESH_Y_DIST_IS_Cartesian)) * (1.0 / (MESH_Y_DIST_IS_Cartesian));
  				   ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h",117  Warning[Pa093]: 
          implicit conversion from floating point to integer
    207          #endif
    208          
    209          #if HAS_TRINAMIC
    210            #include "stepper_indirection.h"
    211          #endif
    212          
    213          #if 1//ENABLED(AUTO_BED_LEVELING_UBL)
    214            #include "ubl.h"

  	#define MESH_X_DIST_IS_KINEMATIC (float(MESH_MAX_X_IS_KINEMATIC - (MESH_MIN_X_IS_KINEMATIC)) / float(GRID_MAX_POINTS_X - 1))
  	        ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",74  Warning[Pe047]: 
          incompatible redefinition of macro "MESH_X_DIST_IS_KINEMATIC"
          (declared at line 41 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\mesh_bed_leveling.h")

  	#define MESH_Y_DIST_IS_KINEMATIC (float(MESH_MAX_Y_IS_KINEMATIC - (MESH_MIN_Y_IS_KINEMATIC)) / float(GRID_MAX_POINTS_Y - 1))
  	        ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",75  Warning[Pe047]: 
          incompatible redefinition of macro "MESH_Y_DIST_IS_KINEMATIC"
          (declared at line 42 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\mesh_bed_leveling.h")

  	#define MESH_X_DIST_IS_Cartesian (float(MESH_MAX_X_IS_Cartesian - (MESH_MIN_X_IS_Cartesian)) / float(GRID_MAX_POINTS_X - 1))
  	        ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",76  Warning[Pe047]: 
          incompatible redefinition of macro "MESH_X_DIST_IS_Cartesian"
          (declared at line 43 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\mesh_bed_leveling.h")

  	#define MESH_Y_DIST_IS_Cartesian (float(MESH_MAX_Y_IS_Cartesian - (MESH_MIN_Y_IS_Cartesian)) / float(GRID_MAX_POINTS_Y - 1))
  	        ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",77  Warning[Pe047]: 
          incompatible redefinition of macro "MESH_Y_DIST_IS_Cartesian"
          (declared at line 44 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\mesh_bed_leveling.h")

          	cx = (x - (MESH_MIN_X_IS_KINEMATIC)) * (1.0 / (MESH_X_DIST_IS_KINEMATIC));
          	   ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",182  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					cx = (x - (MESH_MIN_X_IS_Cartesian)) * (1.0 / (MESH_X_DIST_IS_Cartesian));
  					   ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",184  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					cy = (y - (MESH_MIN_Y_IS_KINEMATIC)) * (1.0 / (MESH_Y_DIST_IS_KINEMATIC));
  					   ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",195  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					cy = (y - (MESH_MIN_Y_IS_Cartesian)) * (1.0 / (MESH_Y_DIST_IS_Cartesian));
  					   ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",197  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					px= (x - (MESH_MIN_X_IS_KINEMATIC) + (MESH_X_DIST_IS_KINEMATIC) * 0.5) * (1.0 / (MESH_X_DIST_IS_KINEMATIC));
  					  ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",208  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					px= (x - (MESH_MIN_X_IS_Cartesian) + (MESH_X_DIST_IS_Cartesian) * 0.5) * (1.0 / (MESH_X_DIST_IS_Cartesian));
  					  ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",210  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					py = (y - (MESH_MIN_Y_IS_KINEMATIC) + (MESH_Y_DIST_IS_KINEMATIC) * 0.5) * (1.0 / (MESH_Y_DIST_IS_KINEMATIC));
  					   ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",219  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					py = (y - (MESH_MIN_Y_IS_Cartesian) + (MESH_Y_DIST_IS_Cartesian) * 0.5) * (1.0 / (MESH_Y_DIST_IS_Cartesian));
  					   ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\ubl.h",221  Warning[Pa093]: 
          implicit conversion from floating point to integer
    215          #endif
    216          
    217          #if 1//ENABLED(AUTO_BED_LEVELING_BILINEAR)
    218            extern void refresh_bed_level();
    219          #endif
    220          
    221          #if ENABLED(ENABLE_LEVELING_FADE_HEIGHT)
    222            float new_z_fade_height;
    223          #endif
    224          
    225          /**
    226           * Post-process after Retrieve or Reset
    227           */

   \                                 In section .text, align 2, keep-with-next
    228          void MarlinSettings::postprocess() {
   \                     _ZN14MarlinSettings11postprocessEv: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    229            const float oldpos[] = { current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS] };
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable98_1
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6861             LDR      R1,[R4, #+4]
   \   0000000A   0xB084             SUB      SP,SP,#+16
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0xA800             ADD      R0,SP,#+0
   \   00000010   0x6041             STR      R1,[R0, #+4]
   \   00000012   0x68A1             LDR      R1,[R4, #+8]
   \   00000014   0x6081             STR      R1,[R0, #+8]
    230          
    231            // steps per s2 needs to be updated to agree with units per s2
    232            planner.reset_acceleration_rates();
   \   00000016   0x.... 0x....      BL       _ZN7Planner24reset_acceleration_ratesEv
    233          
    234            // Make sure delta kinematics are updated before refreshing the
    235            // planner position so the stepper counts will be set correctly.
    236            //#if ENABLED(DELTA)
    237            if(MACHINETPYE == DELTA)
   \   0000001A   0x.... 0x....      LDR.W    R5,??DataTable98_2
   \   0000001E   0xF205 0x0642      ADDW     R6,R5,#+66
   \   00000022   0xF9B6 0x0016      LDRSH    R0,[R6, #+22]
   \   00000026   0x2802             CMP      R0,#+2
   \   00000028   0xBF08             IT       EQ 
    238              recalc_delta_settings();
   \   0000002A   0x.... 0x....      BLEQ     _Z21recalc_delta_settingsv
    239            //#endif
    240          
    241            //#if ENABLED(PIDTEMP)
    242            if(PIDTEMP){
    243              thermalManager.updatePID();
    244            }//#endif
    245          
    246            #if 1//DISABLED(NO_VOLUMETRICS)
    247              planner.calculate_volumetric_multipliers();
   \   0000002E   0x.... 0x....      BL       _ZN7Planner32calculate_volumetric_multipliersEv
    248            #else
    249              for (uint8_t i = COUNT(planner.e_factor); i--;)
    250                planner.refresh_e_factor(i);
    251            #endif
    252          
    253            #if HAS_HOME_OFFSET || ENABLED(DUAL_X_CARRIAGE)
    254              // Software endstops depend on home_offset
    255              LOOP_XYZ(i) update_software_endstops((AxisEnum)i);
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       _Z24update_software_endstops8AxisEnum
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      BL       _Z24update_software_endstops8AxisEnum
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0x.... 0x....      BL       _Z24update_software_endstops8AxisEnum
    256            #endif
    257          
    258            //#if ENABLED(ENABLE_LEVELING_FADE_HEIGHT)
    259            if((MACHINETPYE != DELTA) && (BED_LEVELING_METHOD&HAS_FADE))
   \   00000044   0xF9B6 0x0016      LDRSH    R0,[R6, #+22]
   \   00000048   0x2802             CMP      R0,#+2
   \   0000004A   0xD009             BEQ.N    ??postprocess_0
   \   0000004C   0xF895 0x0042      LDRB     R0,[R5, #+66]
   \   00000050   0x06C0             LSLS     R0,R0,#+27
   \   00000052   0xD505             BPL.N    ??postprocess_0
    260            {
    261              set_z_fade_height(new_z_fade_height, false); // false = no report
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable98_3
   \   00000058   0x6840             LDR      R0,[R0, #+4]
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0x.... 0x....      BL       _Z17set_z_fade_heightfb
    262            }
    263            //#endif
    264          
    265            #if 1 //ENABLED(AUTO_BED_LEVELING_BILINEAR)
    266              refresh_bed_level();
   \                     ??postprocess_0: (+1)
   \   00000060   0x.... 0x....      BL       _Z17refresh_bed_levelv
    267              //set_bed_leveling_enabled(leveling_is_on);
    268            #endif
    269          
    270            #if HAS_MOTOR_CURRENT_PWM
    271              stepper.refresh_motor_power();
    272            #endif
    273          
    274            // Refresh steps_to_mm with the reciprocal of axis_steps_per_mm
    275            // and init stepper.count[], planner.position[] with current_position
    276            planner.refresh_positioning();
   \   00000064   0x.... 0x....      BL       _ZN7Planner19refresh_positioningEv
    277          
    278            // Various factors can change the current position
    279            if (memcmp(oldpos, current_position, sizeof(oldpos)))
   \   00000068   0x220C             MOVS     R2,#+12
   \   0000006A   0x4621             MOV      R1,R4
   \   0000006C   0xA800             ADD      R0,SP,#+0
   \   0000006E   0x.... 0x....      BL       memcmp
   \   00000072   0xB108             CBZ.N    R0,??postprocess_1
    280              report_current_position();
   \   00000074   0x.... 0x....      BL       _Z23report_current_positionv
    281          }
   \                     ??postprocess_1: (+1)
   \   00000078   0xB004             ADD      SP,SP,#+16
   \   0000007A   0xBD70             POP      {R4-R6,PC}       ;; return
    282          
    283          #if ENABLED(EEPROM_SETTINGS)
    284          
    285            #define DUMMY_PID_VALUE 3000.0f
    286            #define EEPROM_START() int eeprom_index = EEPROM_OFFSET
    287            #define EEPROM_SKIP(VAR) eeprom_index += sizeof(VAR)
    288            #define EEPROM_WRITE(VAR) write_data(eeprom_index, (uint8_t*)&VAR, sizeof(VAR), &working_crc)
    289            #define EEPROM_READ(VAR) read_data(eeprom_index, (uint8_t*)&VAR, sizeof(VAR), &working_crc)
    290            #define EEPROM_ASSERT(TST,ERR) if (!(TST)) do{ SERIAL_ERROR_START(); SERIAL_ERRORLNPGM(ERR); eeprom_read_error = true; }while(0)
    291          

   \                                 In section .text, align 4, keep-with-next
    292            const char version[4] = EEPROM_VERSION;
   \                     version:
   \   00000000   0x56 0x34          DC8 "V47"
   \              0x37 0x00    

   \                                 In section .bss, align 4
    293          
    294            bool MarlinSettings::eeprom_error;
   \                     _ZN14MarlinSettings12eeprom_errorE:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
    295          
    296            #if 1//ENABLED(AUTO_BED_LEVELING_UBL)
    297              int16_t MarlinSettings::meshes_begin;
   \                     _ZN14MarlinSettings12meshes_beginE:
   \   00000002                      DS8 2
   \                     new_z_fade_height:
   \   00000004                      DS8 4
    298            #endif
    299          

   \                                 In section .text, align 2, keep-with-next
    300            void MarlinSettings::write_data(int &pos, const uint8_t *value, uint16_t size, uint16_t *crc) {
   \                     _ZN14MarlinSettings10write_dataERiPKhtPt: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    301              if (eeprom_error) return;
   \   00000004   0x.... 0x....      LDR.W    R7,??DataTable98_3
   \   00000008   0xB082             SUB      SP,SP,#+8
   \   0000000A   0x4604             MOV      R4,R0
   \   0000000C   0x7838             LDRB     R0,[R7, #+0]
   \   0000000E   0x460D             MOV      R5,R1
   \   00000010   0x4616             MOV      R6,R2
   \   00000012   0x4698             MOV      R8,R3
   \   00000014   0xB150             CBZ.N    R0,??write_data_0
    302              while (size--) {
    303                //uint8_t * const p = (uint8_t * const)pos;
    304                uint8_t eppr_r;
    305                uint8_t v = *value;
    306                // EEPROM has only ~100,000 write cycles,
    307                // so only write bytes that have changed!
    308                //if (v != eeprom_read_byte(p)) {
    309                  //eeprom_write_byte(p, v);
    310                  AT24CXX_Read((uint16_t)pos,&eppr_r,1);
    311          	  	if (v != eppr_r) {		/*--mks--*/
    312          			AT24CXX_Write((uint16_t)pos, (uint8_t *)&v,1);
    313          			AT24CXX_Read((uint16_t)pos,&eppr_r,1);
    314                  //if (eeprom_read_byte(p) != v) {
    315                  	if (eppr_r != v) {
    316                    		SERIAL_ECHO_START();
    317                    		SERIAL_ECHOLNPGM(MSG_ERR_EEPROM_WRITE);
    318                    		eeprom_error = true;
    319                    		return;
    320                  	}
    321                	}
    322                crc16(crc, &v, 1);
    323                pos++;
    324                value++;
    325              };
    326            }
   \   00000016   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}
   \                     ??write_data_1: (+1)
   \   0000001A   0x2201             MOVS     R2,#+1
   \   0000001C   0xA900             ADD      R1,SP,#+0
   \   0000001E   0x4640             MOV      R0,R8
   \   00000020   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000024   0x6820             LDR      R0,[R4, #+0]
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \   00000028   0x6020             STR      R0,[R4, #+0]
   \   0000002A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??write_data_0: (+1)
   \   0000002C   0xB2B6             UXTH     R6,R6
   \   0000002E   0xB36E             CBZ.N    R6,??write_data_2
   \   00000030   0x7828             LDRB     R0,[R5, #+0]
   \   00000032   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000036   0x1E76             SUBS     R6,R6,#+1
   \   00000038   0x6820             LDR      R0,[R4, #+0]
   \   0000003A   0x2201             MOVS     R2,#+1
   \   0000003C   0xF10D 0x0101      ADD      R1,SP,#+1
   \   00000040   0xB280             UXTH     R0,R0
   \   00000042   0x.... 0x....      BL       AT24CXX_Read
   \   00000046   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004A   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   0000004E   0x4288             CMP      R0,R1
   \   00000050   0xD0E3             BEQ.N    ??write_data_1
   \   00000052   0x6820             LDR      R0,[R4, #+0]
   \   00000054   0x2201             MOVS     R2,#+1
   \   00000056   0xA900             ADD      R1,SP,#+0
   \   00000058   0xB280             UXTH     R0,R0
   \   0000005A   0x.... 0x....      BL       AT24CXX_Write
   \   0000005E   0x6820             LDR      R0,[R4, #+0]
   \   00000060   0x2201             MOVS     R2,#+1
   \   00000062   0xF10D 0x0101      ADD      R1,SP,#+1
   \   00000066   0xB280             UXTH     R0,R0
   \   00000068   0x.... 0x....      BL       AT24CXX_Read
   \   0000006C   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000070   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000074   0x4288             CMP      R0,R1
   \   00000076   0xD0D0             BEQ.N    ??write_data_1
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable98_4
   \   0000007C   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable98_5
   \   00000084   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0x7038             STRB     R0,[R7, #+0]
   \                     ??write_data_2: (+1)
   \   0000008C   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
    327          

   \                                 In section .text, align 2, keep-with-next
    328            void MarlinSettings::read_data(int &pos, uint8_t* value, uint16_t size, uint16_t *crc) {
   \                     _ZN14MarlinSettings9read_dataERiPhtPt: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    329              if (eeprom_error) return;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable98_3
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x460D             MOV      R5,R1
   \   0000000C   0x4616             MOV      R6,R2
   \   0000000E   0x461F             MOV      R7,R3
   \   00000010   0xB9A8             CBNZ.N   R0,??read_data_0
    330              do {
    331                //uint8_t c = eeprom_read_byte((unsigned char*)pos);
    332                uint8_t c;
    333                AT24CXX_Read((uint16_t)pos,&c,1);      
   \                     ??read_data_1: (+1)
   \   00000012   0x6820             LDR      R0,[R4, #+0]
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0xA900             ADD      R1,SP,#+0
   \   00000018   0xB280             UXTH     R0,R0
   \   0000001A   0x.... 0x....      BL       AT24CXX_Read
    334                *value = c;
   \   0000001E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000022   0xF805 0x0B01      STRB     R0,[R5], #+1
    335                crc16(crc, &c, 1);
   \   00000026   0x2201             MOVS     R2,#+1
   \   00000028   0xA900             ADD      R1,SP,#+0
   \   0000002A   0x4638             MOV      R0,R7
   \   0000002C   0x.... 0x....      BL       _Z5crc16PtPKvt
    336                pos++;
   \   00000030   0x6820             LDR      R0,[R4, #+0]
    337                value++;
    338              } while (--size);
   \   00000032   0x1E76             SUBS     R6,R6,#+1
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \   00000036   0xB2B6             UXTH     R6,R6
   \   00000038   0x6020             STR      R0,[R4, #+0]
   \   0000003A   0x2E00             CMP      R6,#+0
   \   0000003C   0xD1E9             BNE.N    ??read_data_1
    339            }
   \                     ??read_data_0: (+1)
   \   0000003E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    340          
    341            /**
    342             * M500 - Store Configuration
    343             */

   \                                 In section .text, align 2, keep-with-next
    344            bool MarlinSettings::save() {
   \                     _ZN14MarlinSettings4saveEv: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB099             SUB      SP,SP,#+100
    345              float dummy = 0.0f;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9002             STR      R0,[SP, #+8]
    346              char ver[4] = "000";
   \   0000000A   0xA815             ADD      R0,SP,#+84
   \   0000000C   0x.... 0x....      ADR.W    R1,`?<Constant "000">`
    347          
    348              uint16_t working_crc = 0;
    349          
    350              EEPROM_START();
    351          
    352              eeprom_error = false;
   \   00000010   0x.... 0x....      LDR.W    R8,??DataTable98_3
   \   00000014   0x680A             LDR      R2,[R1, #0]
   \   00000016   0x6002             STR      R2,[R0, #+0]
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   0000001E   0x9001             STR      R0,[SP, #+4]
   \   00000020   0xF888 0x0000      STRB     R0,[R8, #+0]
    353          
    354              EEPROM_WRITE(ver);     // invalidate data first
   \   00000024   0xAB00             ADD      R3,SP,#+0
   \   00000026   0x2204             MOVS     R2,#+4
   \   00000028   0xA915             ADD      R1,SP,#+84
   \   0000002A   0xA801             ADD      R0,SP,#+4
   \   0000002C   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    355              EEPROM_SKIP(working_crc); // Skip the checksum slot
   \   00000030   0x9801             LDR      R0,[SP, #+4]
   \   00000032   0x1C80             ADDS     R0,R0,#+2
   \   00000034   0x9001             STR      R0,[SP, #+4]
    356          
    357              working_crc = 0; // clear before first "real data"
    358          
    359              const uint8_t esteppers = COUNT(planner.axis_steps_per_mm) - XYZ;
    360              EEPROM_WRITE(esteppers);
   \   00000036   0xAB00             ADD      R3,SP,#+0
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   0000003E   0x2201             MOVS     R2,#+1
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0xF88D 0x000D      STRB     R0,[SP, #+13]
   \   00000046   0xF10D 0x010D      ADD      R1,SP,#+13
   \   0000004A   0xA801             ADD      R0,SP,#+4
   \   0000004C   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    361          
    362              EEPROM_WRITE(planner.axis_steps_per_mm);
   \   00000050   0xAB00             ADD      R3,SP,#+0
   \   00000052   0x2214             MOVS     R2,#+20
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable98_6
   \   00000058   0xA801             ADD      R0,SP,#+4
   \   0000005A   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    363              EEPROM_WRITE(planner.max_feedrate_mm_s);
   \   0000005E   0xAB00             ADD      R3,SP,#+0
   \   00000060   0x2214             MOVS     R2,#+20
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable98_7
   \   00000066   0xA801             ADD      R0,SP,#+4
   \   00000068   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    364              EEPROM_WRITE(planner.max_acceleration_mm_per_s2);
   \   0000006C   0xAB00             ADD      R3,SP,#+0
   \   0000006E   0x2214             MOVS     R2,#+20
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable98_8
   \   00000074   0xA801             ADD      R0,SP,#+4
   \   00000076   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    365          
    366              EEPROM_WRITE(planner.acceleration);
   \   0000007A   0xAB00             ADD      R3,SP,#+0
   \   0000007C   0x2204             MOVS     R2,#+4
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable98_9
   \   00000082   0xA801             ADD      R0,SP,#+4
   \   00000084   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    367              EEPROM_WRITE(planner.retract_acceleration);
   \   00000088   0xAB00             ADD      R3,SP,#+0
   \   0000008A   0x2204             MOVS     R2,#+4
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable98_10
   \   00000090   0xA801             ADD      R0,SP,#+4
   \   00000092   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    368              EEPROM_WRITE(planner.travel_acceleration);
   \   00000096   0xAB00             ADD      R3,SP,#+0
   \   00000098   0x2204             MOVS     R2,#+4
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable98_11
   \   0000009E   0xA801             ADD      R0,SP,#+4
   \   000000A0   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    369              EEPROM_WRITE(planner.min_feedrate_mm_s);
   \   000000A4   0xAB00             ADD      R3,SP,#+0
   \   000000A6   0x2204             MOVS     R2,#+4
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable98_12
   \   000000AC   0xA801             ADD      R0,SP,#+4
   \   000000AE   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    370              EEPROM_WRITE(planner.min_travel_feedrate_mm_s);
   \   000000B2   0xAB00             ADD      R3,SP,#+0
   \   000000B4   0x2204             MOVS     R2,#+4
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable98_13
   \   000000BA   0xA801             ADD      R0,SP,#+4
   \   000000BC   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    371              EEPROM_WRITE(planner.min_segment_time_us);
   \   000000C0   0xAB00             ADD      R3,SP,#+0
   \   000000C2   0x2204             MOVS     R2,#+4
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable98_14
   \   000000C8   0xA801             ADD      R0,SP,#+4
   \   000000CA   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    372              EEPROM_WRITE(planner.max_jerk);
   \   000000CE   0xAB00             ADD      R3,SP,#+0
   \   000000D0   0x2210             MOVS     R2,#+16
   \   000000D2   0x.... 0x....      LDR.W    R1,??DataTable98_15
   \   000000D6   0xA801             ADD      R0,SP,#+4
   \   000000D8   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    373              #if !HAS_HOME_OFFSET
    374                const float home_offset[XYZ] = { 0 };
    375              #endif
    376              EEPROM_WRITE(home_offset);
   \   000000DC   0xAB00             ADD      R3,SP,#+0
   \   000000DE   0x220C             MOVS     R2,#+12
   \   000000E0   0x.... 0x....      LDR.W    R1,??DataTable98_16
   \   000000E4   0xA801             ADD      R0,SP,#+4
   \   000000E6   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    377          
    378              #if HOTENDS > 1
    379                hotend_offset[X_AXIS][1]=mksCfg.hotnd_offset_x;
   \   000000EA   0x.... 0x....      LDR.W    R5,??DataTable98_2
   \   000000EE   0x.... 0x....      LDR.W    R7,??DataTable98_17
   \   000000F2   0xF8D5 0x00F8      LDR      R0,[R5, #+248]
   \   000000F6   0x6078             STR      R0,[R7, #+4]
    380                hotend_offset[Y_AXIS][1]=mksCfg.hotnd_offset_y;
   \   000000F8   0xF105 0x06F8      ADD      R6,R5,#+248
    381                // Skip hotend 0 which must be 0
    382                for (uint8_t e = 1; e < HOTENDS; e++)
    383                  LOOP_XYZ(i) EEPROM_WRITE(hotend_offset[i][e]);
   \   000000FC   0xAB00             ADD      R3,SP,#+0
   \   000000FE   0x6870             LDR      R0,[R6, #+4]
   \   00000100   0x60F8             STR      R0,[R7, #+12]
   \   00000102   0x2204             MOVS     R2,#+4
   \   00000104   0x1D39             ADDS     R1,R7,#+4
   \   00000106   0xA801             ADD      R0,SP,#+4
   \   00000108   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   0000010C   0xAB00             ADD      R3,SP,#+0
   \   0000010E   0x2204             MOVS     R2,#+4
   \   00000110   0xF107 0x010C      ADD      R1,R7,#+12
   \   00000114   0xA801             ADD      R0,SP,#+4
   \   00000116   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   0000011A   0xAB00             ADD      R3,SP,#+0
   \   0000011C   0x2204             MOVS     R2,#+4
   \   0000011E   0xF107 0x0114      ADD      R1,R7,#+20
   \   00000122   0xA801             ADD      R0,SP,#+4
   \   00000124   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    384              #endif
    385          
    386              //
    387              // Global Leveling
    388              //
    389          
    390              #if ENABLED(ENABLE_LEVELING_FADE_HEIGHT)
    391                const float zfh = planner.z_fade_height;
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable98_18
   \   0000012C   0x6800             LDR      R0,[R0, #+0]
   \   0000012E   0x9014             STR      R0,[SP, #+80]
    392              #else
    393                const float zfh = 10.0;
    394              #endif
    395              EEPROM_WRITE(zfh);
   \   00000130   0xAB00             ADD      R3,SP,#+0
   \   00000132   0x2204             MOVS     R2,#+4
   \   00000134   0xA914             ADD      R1,SP,#+80
   \   00000136   0xA801             ADD      R0,SP,#+4
   \   00000138   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    396          
    397              //
    398              // Mesh Bed Leveling
    399              //
    400          
    401              //#if ENABLED(MESH_BED_LEVELING)
    402              if(BED_LEVELING_METHOD & MESH_BED_LEVELING)
   \   0000013C   0xF205 0x0736      ADDW     R7,R5,#+54
   \   00000140   0x7B38             LDRB     R0,[R7, #+12]
   \   00000142   0x0680             LSLS     R0,R0,#+26
   \   00000144   0xD52D             BPL.N    ??save_0
    403              {
    404                // Compile time test that sizeof(mbl.z_values) is as expected
    405                //static_assert(
    406                //  sizeof(mbl.z_values) == GRID_MAX_POINTS * sizeof(mbl.z_values[0][0]),
    407                //  "MBL Z array is the wrong size."
    408               // );
    409                const uint8_t mesh_num_x = GRID_MAX_POINTS_X, mesh_num_y = GRID_MAX_POINTS_Y;
   \   00000146   0xF895 0x0060      LDRB     R0,[R5, #+96]
    410                EEPROM_WRITE(mbl.has_mesh);
   \   0000014A   0x.... 0x....      LDR.W    R1,??DataTable98_19
   \   0000014E   0xF88D 0x0003      STRB     R0,[SP, #+3]
   \   00000152   0xAB00             ADD      R3,SP,#+0
   \   00000154   0xF105 0x0060      ADD      R0,R5,#+96
   \   00000158   0x2201             MOVS     R2,#+1
   \   0000015A   0x7840             LDRB     R0,[R0, #+1]
   \   0000015C   0xF88D 0x0002      STRB     R0,[SP, #+2]
   \   00000160   0xA801             ADD      R0,SP,#+4
   \   00000162   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    411                EEPROM_WRITE(mbl.z_offset);
   \   00000166   0xAB00             ADD      R3,SP,#+0
   \   00000168   0x2204             MOVS     R2,#+4
   \   0000016A   0x.... 0x....      LDR.W    R1,??DataTable98_20
   \   0000016E   0xA801             ADD      R0,SP,#+4
   \   00000170   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    412                EEPROM_WRITE(mesh_num_x);
   \   00000174   0xAB00             ADD      R3,SP,#+0
   \   00000176   0x2201             MOVS     R2,#+1
   \   00000178   0xF10D 0x0103      ADD      R1,SP,#+3
   \   0000017C   0xA801             ADD      R0,SP,#+4
   \   0000017E   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    413                EEPROM_WRITE(mesh_num_y);
   \   00000182   0xAB00             ADD      R3,SP,#+0
   \   00000184   0x2201             MOVS     R2,#+1
   \   00000186   0xF10D 0x0102      ADD      R1,SP,#+2
   \   0000018A   0xA801             ADD      R0,SP,#+4
   \   0000018C   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    414                EEPROM_WRITE(mbl.z_values);
   \   00000190   0xAB00             ADD      R3,SP,#+0
   \   00000192   0xF44F 0x7210      MOV      R2,#+576
   \   00000196   0x.... 0x....      LDR.W    R1,??DataTable98_21
   \   0000019A   0xA801             ADD      R0,SP,#+4
   \   0000019C   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   000001A0   0xE02B             B.N      ??save_1
    415              }
    416              //#else // For disabled MBL write a default mesh
    417              else
    418              {
    419                const bool leveling_is_on = false;
   \                     ??save_0: (+1)
   \   000001A2   0x2000             MOVS     R0,#+0
   \   000001A4   0xF88D 0x0002      STRB     R0,[SP, #+2]
    420                dummy = 0.0f;
   \   000001A8   0x9002             STR      R0,[SP, #+8]
    421                const uint8_t mesh_num_x = 3, mesh_num_y = 3;
    422                EEPROM_WRITE(leveling_is_on);
   \   000001AA   0xAB00             ADD      R3,SP,#+0
   \   000001AC   0x2003             MOVS     R0,#+3
   \   000001AE   0xF88D 0x0003      STRB     R0,[SP, #+3]
   \   000001B2   0xF88D 0x000C      STRB     R0,[SP, #+12]
   \   000001B6   0x2201             MOVS     R2,#+1
   \   000001B8   0xF10D 0x0102      ADD      R1,SP,#+2
   \   000001BC   0xA801             ADD      R0,SP,#+4
   \   000001BE   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    423                EEPROM_WRITE(dummy); // z_offset
   \   000001C2   0xAB00             ADD      R3,SP,#+0
   \   000001C4   0x2204             MOVS     R2,#+4
   \   000001C6   0xA902             ADD      R1,SP,#+8
   \   000001C8   0xA801             ADD      R0,SP,#+4
   \   000001CA   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    424                EEPROM_WRITE(mesh_num_x);
   \   000001CE   0xAB00             ADD      R3,SP,#+0
   \   000001D0   0x2201             MOVS     R2,#+1
   \   000001D2   0xF10D 0x0103      ADD      R1,SP,#+3
   \   000001D6   0xA801             ADD      R0,SP,#+4
   \   000001D8   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    425                EEPROM_WRITE(mesh_num_y);
   \   000001DC   0xAB00             ADD      R3,SP,#+0
   \   000001DE   0x2201             MOVS     R2,#+1
   \   000001E0   0xA903             ADD      R1,SP,#+12
   \   000001E2   0xA801             ADD      R0,SP,#+4
   \   000001E4   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    426                for (uint8_t q = mesh_num_x * mesh_num_y; q--;) EEPROM_WRITE(dummy);
   \   000001E8   0x2409             MOVS     R4,#+9
   \                     ??save_2: (+1)
   \   000001EA   0xAB00             ADD      R3,SP,#+0
   \   000001EC   0x2204             MOVS     R2,#+4
   \   000001EE   0xA902             ADD      R1,SP,#+8
   \   000001F0   0xA801             ADD      R0,SP,#+4
   \   000001F2   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   000001F6   0x1E64             SUBS     R4,R4,#+1
   \   000001F8   0xD1F7             BNE.N    ??save_2
    427              }
    428              //#endif // MESH_BED_LEVELING
    429          
    430              #if !HAS_BED_PROBE
    431                const float zprobe_zoffset = 0;
    432              #endif
    433              EEPROM_WRITE(zprobe_zoffset);
   \                     ??save_1: (+1)
   \   000001FA   0xAB00             ADD      R3,SP,#+0
   \   000001FC   0x2204             MOVS     R2,#+4
   \   000001FE   0x.... 0x....      LDR.W    R1,??DataTable98_22
   \   00000202   0xA801             ADD      R0,SP,#+4
   \   00000204   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    434          
    435              //
    436              // Planar Bed Leveling matrix
    437              //
    438          
    439              //#if ABL_PLANAR
    440              if(BED_LEVELING_METHOD & ABL_PLANAR)
   \   00000208   0x7B38             LDRB     R0,[R7, #+12]
   \   0000020A   0x2106             MOVS     R1,#+6
   \   0000020C   0x4208             TST      R0,R1
   \   0000020E   0xD007             BEQ.N    ??save_3
    441              {
    442                EEPROM_WRITE(planner.bed_level_matrix);
   \   00000210   0xAB00             ADD      R3,SP,#+0
   \   00000212   0x2224             MOVS     R2,#+36
   \   00000214   0x.... 0x....      LDR.W    R1,??DataTable98_23
   \   00000218   0xA801             ADD      R0,SP,#+4
   \   0000021A   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   0000021E   0xE00A             B.N      ??save_4
    443              }
    444              else
    445              {
    446              //#else
    447                dummy = 0.0;
   \                     ??save_3: (+1)
   \   00000220   0x2000             MOVS     R0,#+0
   \   00000222   0x9002             STR      R0,[SP, #+8]
    448                for (uint8_t q = 9; q--;) EEPROM_WRITE(dummy);
   \   00000224   0x2409             MOVS     R4,#+9
   \                     ??save_5: (+1)
   \   00000226   0xAB00             ADD      R3,SP,#+0
   \   00000228   0x2204             MOVS     R2,#+4
   \   0000022A   0xA902             ADD      R1,SP,#+8
   \   0000022C   0xA801             ADD      R0,SP,#+4
   \   0000022E   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   00000232   0x1E64             SUBS     R4,R4,#+1
   \   00000234   0xD1F7             BNE.N    ??save_5
    449              }
    450              //#endif
    451          
    452              //
    453              // Bilinear Auto Bed Leveling
    454              //
    455          
    456              //#if ENABLED(AUTO_BED_LEVELING_BILINEAR)
    457              if(BED_LEVELING_METHOD & AUTO_BED_LEVELING_BILINEAR)
   \                     ??save_4: (+1)
   \   00000236   0x7B38             LDRB     R0,[R7, #+12]
   \   00000238   0x0700             LSLS     R0,R0,#+28
   \   0000023A   0xD52D             BPL.N    ??save_6
    458              {
    459                // Compile time test that sizeof(z_values) is as expected
    460                //static_assert(
    461                //  sizeof(z_values) == GRID_MAX_POINTS * sizeof(z_values[0][0]),
    462                //  "Bilinear Z array is the wrong size."
    463               // );
    464                const uint8_t grid_max_x = GRID_MAX_POINTS_X, grid_max_y = GRID_MAX_POINTS_Y;
   \   0000023C   0xF895 0x0060      LDRB     R0,[R5, #+96]
   \   00000240   0xF88D 0x0003      STRB     R0,[SP, #+3]
    465                EEPROM_WRITE(grid_max_x);            // 1 byte
   \   00000244   0xAB00             ADD      R3,SP,#+0
   \   00000246   0xF105 0x0060      ADD      R0,R5,#+96
   \   0000024A   0x2201             MOVS     R2,#+1
   \   0000024C   0x7840             LDRB     R0,[R0, #+1]
   \   0000024E   0xF88D 0x0002      STRB     R0,[SP, #+2]
   \   00000252   0xF10D 0x0103      ADD      R1,SP,#+3
   \   00000256   0xA801             ADD      R0,SP,#+4
   \   00000258   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    466                EEPROM_WRITE(grid_max_y);            // 1 byte
   \   0000025C   0xAB00             ADD      R3,SP,#+0
   \   0000025E   0x2201             MOVS     R2,#+1
   \   00000260   0xF10D 0x0102      ADD      R1,SP,#+2
   \   00000264   0xA801             ADD      R0,SP,#+4
   \   00000266   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    467                EEPROM_WRITE(bilinear_grid_spacing); // 2 ints
   \   0000026A   0xAB00             ADD      R3,SP,#+0
   \   0000026C   0x2208             MOVS     R2,#+8
   \   0000026E   0x.... 0x....      LDR.W    R1,??DataTable98_24
   \   00000272   0xA801             ADD      R0,SP,#+4
   \   00000274   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    468                EEPROM_WRITE(bilinear_start);        // 2 ints
   \   00000278   0xAB00             ADD      R3,SP,#+0
   \   0000027A   0x2208             MOVS     R2,#+8
   \   0000027C   0x.... 0x....      LDR.W    R1,??DataTable98_25
   \   00000280   0xA801             ADD      R0,SP,#+4
   \   00000282   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    469                EEPROM_WRITE(z_values);              // 9-256 floats
   \   00000286   0xAB00             ADD      R3,SP,#+0
   \   00000288   0xF44F 0x7210      MOV      R2,#+576
   \   0000028C   0x.... 0x....      LDR.W    R1,??DataTable98_26
   \   00000290   0xA801             ADD      R0,SP,#+4
   \   00000292   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   00000296   0xE02D             B.N      ??save_7
    470              }
    471              //#else
    472              else
    473              {
    474                // For disabled Bilinear Grid write an empty 3x3 grid
    475                const uint8_t grid_max_x = 3, grid_max_y = 3;
   \                     ??save_6: (+1)
   \   00000298   0x2003             MOVS     R0,#+3
   \   0000029A   0xF88D 0x0002      STRB     R0,[SP, #+2]
   \   0000029E   0xF88D 0x0003      STRB     R0,[SP, #+3]
    476                const int bilinear_start[2] = { 0 }, bilinear_grid_spacing[2] = { 0 };
   \   000002A2   0x2100             MOVS     R1,#+0
   \   000002A4   0xA810             ADD      R0,SP,#+64
   \   000002A6   0x2200             MOVS     R2,#+0
   \   000002A8   0xC006             STM      R0!,{R1,R2}
   \   000002AA   0xC006             STM      R0!,{R1,R2}
    477                dummy = 0.0f;
   \   000002AC   0x9102             STR      R1,[SP, #+8]
    478                EEPROM_WRITE(grid_max_x);
   \   000002AE   0xAB00             ADD      R3,SP,#+0
   \   000002B0   0x2201             MOVS     R2,#+1
   \   000002B2   0xF10D 0x0102      ADD      R1,SP,#+2
   \   000002B6   0xA801             ADD      R0,SP,#+4
   \   000002B8   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    479                EEPROM_WRITE(grid_max_y);
   \   000002BC   0xAB00             ADD      R3,SP,#+0
   \   000002BE   0x2201             MOVS     R2,#+1
   \   000002C0   0xF10D 0x0103      ADD      R1,SP,#+3
   \   000002C4   0xA801             ADD      R0,SP,#+4
   \   000002C6   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    480                EEPROM_WRITE(bilinear_grid_spacing);
   \   000002CA   0xAB00             ADD      R3,SP,#+0
   \   000002CC   0x2208             MOVS     R2,#+8
   \   000002CE   0xA912             ADD      R1,SP,#+72
   \   000002D0   0xA801             ADD      R0,SP,#+4
   \   000002D2   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    481                EEPROM_WRITE(bilinear_start);
   \   000002D6   0xAB00             ADD      R3,SP,#+0
   \   000002D8   0x2208             MOVS     R2,#+8
   \   000002DA   0xA910             ADD      R1,SP,#+64
   \   000002DC   0xA801             ADD      R0,SP,#+4
   \   000002DE   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    482                for (uint16_t q = grid_max_x * grid_max_y; q--;) EEPROM_WRITE(dummy);
   \   000002E2   0x2409             MOVS     R4,#+9
   \                     ??save_8: (+1)
   \   000002E4   0xAB00             ADD      R3,SP,#+0
   \   000002E6   0x2204             MOVS     R2,#+4
   \   000002E8   0xA902             ADD      R1,SP,#+8
   \   000002EA   0xA801             ADD      R0,SP,#+4
   \   000002EC   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   000002F0   0x1E64             SUBS     R4,R4,#+1
   \   000002F2   0xD1F7             BNE.N    ??save_8
    483              }
    484              //#endif // AUTO_BED_LEVELING_BILINEAR
    485          
    486              //#if ENABLED(AUTO_BED_LEVELING_UBL)
    487              if(BED_LEVELING_METHOD & AUTO_BED_LEVELING_UBL)
   \                     ??save_7: (+1)
   \   000002F4   0x7B38             LDRB     R0,[R7, #+12]
   \   000002F6   0x06C0             LSLS     R0,R0,#+27
   \   000002F8   0xD50B             BPL.N    ??save_9
    488              {
    489                EEPROM_WRITE(planner.leveling_active);
   \   000002FA   0xAB00             ADD      R3,SP,#+0
   \   000002FC   0x2201             MOVS     R2,#+1
   \   000002FE   0x.... 0x....      LDR.W    R1,??DataTable98_27
   \   00000302   0xA801             ADD      R0,SP,#+4
   \   00000304   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    490                EEPROM_WRITE(ubl.storage_slot);
   \   00000308   0xAB00             ADD      R3,SP,#+0
   \   0000030A   0x2201             MOVS     R2,#+1
   \   0000030C   0x.... 0x....      LDR.W    R1,??DataTable98_28
   \   00000310   0xE011             B.N      ??save_10
    491              }
    492              //#else
    493              else
    494              {
    495                const bool ubl_active = false;
   \                     ??save_9: (+1)
   \   00000312   0x2000             MOVS     R0,#+0
   \   00000314   0xF88D 0x0003      STRB     R0,[SP, #+3]
    496                const int8_t storage_slot = -1;
    497                EEPROM_WRITE(ubl_active);
   \   00000318   0xAB00             ADD      R3,SP,#+0
   \   0000031A   0xF04F 0x30FF      MOV      R0,#-1
   \   0000031E   0xF88D 0x0002      STRB     R0,[SP, #+2]
   \   00000322   0x2201             MOVS     R2,#+1
   \   00000324   0xF10D 0x0103      ADD      R1,SP,#+3
   \   00000328   0xA801             ADD      R0,SP,#+4
   \   0000032A   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    498                EEPROM_WRITE(storage_slot);
   \   0000032E   0xAB00             ADD      R3,SP,#+0
   \   00000330   0x2201             MOVS     R2,#+1
   \   00000332   0xF10D 0x0102      ADD      R1,SP,#+2
   \                     ??save_10: (+1)
   \   00000336   0xA801             ADD      R0,SP,#+4
   \   00000338   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    499              }
    500              //#endif // AUTO_BED_LEVELING_UBL
    501          
    502              // 11 floats for DELTA / [XYZ]_DUAL_ENDSTOPS
    503              //#if ENABLED(DELTA)
    504              if(MACHINETPYE & DELTA)
   \   0000033C   0xF897 0x0022      LDRB     R0,[R7, #+34]
   \   00000340   0x0780             LSLS     R0,R0,#+30
   \   00000342   0xD52E             BPL.N    ??save_11
    505              {
    506                EEPROM_WRITE(delta_height);              // 1 float
   \   00000344   0xAB00             ADD      R3,SP,#+0
   \   00000346   0x2204             MOVS     R2,#+4
   \   00000348   0x.... 0x....      LDR.W    R1,??DataTable98_29
   \   0000034C   0xA801             ADD      R0,SP,#+4
   \   0000034E   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    507                EEPROM_WRITE(delta_endstop_adj);         // 3 floats
   \   00000352   0xAB00             ADD      R3,SP,#+0
   \   00000354   0x220C             MOVS     R2,#+12
   \   00000356   0x.... 0x....      LDR.W    R1,??DataTable98_30
   \   0000035A   0xA801             ADD      R0,SP,#+4
   \   0000035C   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    508                EEPROM_WRITE(delta_radius);              // 1 float
   \   00000360   0xAB00             ADD      R3,SP,#+0
   \   00000362   0x2204             MOVS     R2,#+4
   \   00000364   0x.... 0x....      LDR.W    R1,??DataTable98_31
   \   00000368   0xA801             ADD      R0,SP,#+4
   \   0000036A   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    509                EEPROM_WRITE(delta_diagonal_rod);        // 1 float
   \   0000036E   0xAB00             ADD      R3,SP,#+0
   \   00000370   0x2204             MOVS     R2,#+4
   \   00000372   0x.... 0x....      LDR.W    R1,??DataTable98_32
   \   00000376   0xA801             ADD      R0,SP,#+4
   \   00000378   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    510                EEPROM_WRITE(delta_segments_per_second); // 1 float
   \   0000037C   0xAB00             ADD      R3,SP,#+0
   \   0000037E   0x2204             MOVS     R2,#+4
   \   00000380   0x.... 0x....      LDR.W    R1,??DataTable98_33
   \   00000384   0xA801             ADD      R0,SP,#+4
   \   00000386   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    511                EEPROM_WRITE(delta_calibration_radius);  // 1 float
   \   0000038A   0xAB00             ADD      R3,SP,#+0
   \   0000038C   0x2204             MOVS     R2,#+4
   \   0000038E   0x.... 0x....      LDR.W    R1,??DataTable98_34
   \   00000392   0xA801             ADD      R0,SP,#+4
   \   00000394   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    512                EEPROM_WRITE(delta_tower_angle_trim);    // 3 floats
   \   00000398   0xAB00             ADD      R3,SP,#+0
   \   0000039A   0x220C             MOVS     R2,#+12
   \   0000039C   0x.... 0x....      LDR.W    R1,??DataTable98_35
   \   000003A0   0xE049             B.N      ??save_12
    513              }
    514              else
    515              {
    516              //#if ENABLED(X_DUAL_ENDSTOPS) || ENABLED(Y_DUAL_ENDSTOPS) || ENABLED(Z_DUAL_ENDSTOPS)
    517                if(Z_DUAL_ENDSTOPS==1)
   \                     ??save_11: (+1)
   \   000003A2   0x7AB0             LDRB     R0,[R6, #+10]
   \   000003A4   0x2801             CMP      R0,#+1
   \   000003A6   0xD14A             BNE.N    ??save_13
    518                {
    519                    // Write dual endstops in X, Y, Z order. Unused = 0.0
    520                    dummy = 0.0f;
   \   000003A8   0x2000             MOVS     R0,#+0
   \   000003AA   0x9002             STR      R0,[SP, #+8]
    521                    #if ENABLED(X_DUAL_ENDSTOPS)
    522                      EEPROM_WRITE(x_endstop_adj);             // 1 float
    523                    #else
    524                      EEPROM_WRITE(dummy);
   \   000003AC   0xAB00             ADD      R3,SP,#+0
   \   000003AE   0x2204             MOVS     R2,#+4
   \   000003B0   0xA902             ADD      R1,SP,#+8
   \   000003B2   0xA801             ADD      R0,SP,#+4
   \   000003B4   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    525                    #endif
    526          
    527                    #if ENABLED(Y_DUAL_ENDSTOPS)
    528                      EEPROM_WRITE(y_endstop_adj);             // 1 float
    529                    #else
    530                      EEPROM_WRITE(dummy);
   \   000003B8   0xAB00             ADD      R3,SP,#+0
   \   000003BA   0x2204             MOVS     R2,#+4
   \   000003BC   0xA902             ADD      R1,SP,#+8
   \   000003BE   0xA801             ADD      R0,SP,#+4
   \   000003C0   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    531                    #endif
    532          
    533                    //#if ENABLED(Z_DUAL_ENDSTOPS)
    534                    if(Z_DUAL_ENDSTOPS==1)
   \   000003C4   0x7AB0             LDRB     R0,[R6, #+10]
   \   000003C6   0x2801             CMP      R0,#+1
   \   000003C8   0xAB00             ADD      R3,SP,#+0
   \   000003CA   0xBF07             ITTEE    EQ 
    535                      EEPROM_WRITE(z_endstop_adj);             // 1 float
   \   000003CC   0x2204             MOVEQ    R2,#+4
   \   000003CE   0x.... 0x....      LDREQ.W  R1,??DataTable98_36
    536                    //#else
    537                    else
    538                      EEPROM_WRITE(dummy);
   \   000003D2   0x2204             MOVNE    R2,#+4
   \   000003D4   0xA902             ADDNE    R1,SP,#+8
   \   000003D6   0xA801             ADD      R0,SP,#+4
   \   000003D8   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    539                    //#endif
    540          
    541                    for (uint8_t q = 8; q--;) EEPROM_WRITE(dummy);
   \   000003DC   0xAB00             ADD      R3,SP,#+0
   \   000003DE   0x2204             MOVS     R2,#+4
   \   000003E0   0xA902             ADD      R1,SP,#+8
   \   000003E2   0xA801             ADD      R0,SP,#+4
   \   000003E4   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   000003E8   0xAB00             ADD      R3,SP,#+0
   \   000003EA   0x2204             MOVS     R2,#+4
   \   000003EC   0xA902             ADD      R1,SP,#+8
   \   000003EE   0xA801             ADD      R0,SP,#+4
   \   000003F0   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   000003F4   0xAB00             ADD      R3,SP,#+0
   \   000003F6   0x2204             MOVS     R2,#+4
   \   000003F8   0xA902             ADD      R1,SP,#+8
   \   000003FA   0xA801             ADD      R0,SP,#+4
   \   000003FC   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   00000400   0xAB00             ADD      R3,SP,#+0
   \   00000402   0x2204             MOVS     R2,#+4
   \   00000404   0xA902             ADD      R1,SP,#+8
   \   00000406   0xA801             ADD      R0,SP,#+4
   \   00000408   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   0000040C   0xAB00             ADD      R3,SP,#+0
   \   0000040E   0x2204             MOVS     R2,#+4
   \   00000410   0xA902             ADD      R1,SP,#+8
   \   00000412   0xA801             ADD      R0,SP,#+4
   \   00000414   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   00000418   0xAB00             ADD      R3,SP,#+0
   \   0000041A   0x2204             MOVS     R2,#+4
   \   0000041C   0xA902             ADD      R1,SP,#+8
   \   0000041E   0xA801             ADD      R0,SP,#+4
   \   00000420   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   00000424   0xAB00             ADD      R3,SP,#+0
   \   00000426   0x2204             MOVS     R2,#+4
   \   00000428   0xA902             ADD      R1,SP,#+8
   \   0000042A   0xA801             ADD      R0,SP,#+4
   \   0000042C   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   00000430   0xAB00             ADD      R3,SP,#+0
   \   00000432   0x2204             MOVS     R2,#+4
   \   00000434   0xA902             ADD      R1,SP,#+8
   \                     ??save_12: (+1)
   \   00000436   0xA801             ADD      R0,SP,#+4
   \   00000438   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   0000043C   0xE00A             B.N      ??save_14
    542                }
    543              //#else
    544                else
    545                {
    546                  dummy = 0.0f;
   \                     ??save_13: (+1)
   \   0000043E   0x2000             MOVS     R0,#+0
   \   00000440   0x9002             STR      R0,[SP, #+8]
    547                  for (uint8_t q = 11; q--;) EEPROM_WRITE(dummy);
   \   00000442   0x260B             MOVS     R6,#+11
   \                     ??save_15: (+1)
   \   00000444   0xAB00             ADD      R3,SP,#+0
   \   00000446   0x2204             MOVS     R2,#+4
   \   00000448   0xA902             ADD      R1,SP,#+8
   \   0000044A   0xA801             ADD      R0,SP,#+4
   \   0000044C   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   00000450   0x1E76             SUBS     R6,R6,#+1
   \   00000452   0xD1F7             BNE.N    ??save_15
    548                }
    549              //#endif
    550              }
    551          
    552              #if DISABLED(ULTIPANEL)
    553                constexpr int lcd_preheat_hotend_temp[2] = { PREHEAT_1_TEMP_HOTEND, PREHEAT_2_TEMP_HOTEND },
   \                     ??save_14: (+1)
   \   00000454   0x.... 0x....      ADR.W    R1,`?<Constant {180, 240}>`
   \   00000458   0xC90C             LDM      R1!,{R2,R3}
   \   0000045A   0xA812             ADD      R0,SP,#+72
    554                              lcd_preheat_bed_temp[2] = { PREHEAT_1_TEMP_BED, PREHEAT_2_TEMP_BED },
   \   0000045C   0x.... 0x....      ADR.W    R1,`?<Constant {70, 110}>`
   \   00000460   0xC00C             STM      R0!,{R2,R3}
   \   00000462   0xC90C             LDM      R1!,{R2,R3}
   \   00000464   0xA810             ADD      R0,SP,#+64
    555                              lcd_preheat_fan_speed[2] = { PREHEAT_1_FAN_SPEED, PREHEAT_2_FAN_SPEED };
   \   00000466   0x2100             MOVS     R1,#+0
   \   00000468   0xC00C             STM      R0!,{R2,R3}
   \   0000046A   0xA816             ADD      R0,SP,#+88
   \   0000046C   0x2200             MOVS     R2,#+0
   \   0000046E   0xC006             STM      R0!,{R1,R2}
    556              #endif
    557          
    558              EEPROM_WRITE(lcd_preheat_hotend_temp);
   \   00000470   0xAB00             ADD      R3,SP,#+0
   \   00000472   0x2208             MOVS     R2,#+8
   \   00000474   0xA912             ADD      R1,SP,#+72
   \   00000476   0xA801             ADD      R0,SP,#+4
   \   00000478   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    559              EEPROM_WRITE(lcd_preheat_bed_temp);
   \   0000047C   0xAB00             ADD      R3,SP,#+0
   \   0000047E   0x2208             MOVS     R2,#+8
   \   00000480   0xA910             ADD      R1,SP,#+64
   \   00000482   0xA801             ADD      R0,SP,#+4
   \   00000484   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    560              EEPROM_WRITE(lcd_preheat_fan_speed);
   \   00000488   0xAB00             ADD      R3,SP,#+0
   \   0000048A   0x2208             MOVS     R2,#+8
   \   0000048C   0xA916             ADD      R1,SP,#+88
   \   0000048E   0xA801             ADD      R0,SP,#+4
   \   00000490   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    561          
    562              for (uint8_t e = 0; e < MAX_EXTRUDERS; e++) {
   \   00000494   0x2602             MOVS     R6,#+2
   \   00000496   0x....             LDR.N    R7,??DataTable98_37  ;; 0x453b8000
   \   00000498   0x.... 0x....      LDR.W    R9,??DataTable98_38
   \   0000049C   0x.... 0x....      LDR.W    R10,??DataTable98_39
   \   000004A0   0x.... 0x....      LDR.W    R11,??DataTable98_40
   \   000004A4   0xF04F 0x547E      MOV      R4,#+1065353216
    563          
    564                //#if ENABLED(PIDTEMP)
    565                if(PIDTEMP)
   \                     ??save_16: (+1)
   \   000004A8   0xF895 0x0036      LDRB     R0,[R5, #+54]
   \   000004AC   0xB198             CBZ.N    R0,??save_17
    566                {
    567                  if (e < HOTENDS) {
    568                    EEPROM_WRITE(PID_PARAM(Kp, e));
   \   000004AE   0xAB00             ADD      R3,SP,#+0
   \   000004B0   0x2204             MOVS     R2,#+4
   \   000004B2   0x4659             MOV      R1,R11
   \   000004B4   0xA801             ADD      R0,SP,#+4
   \   000004B6   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    569                    EEPROM_WRITE(PID_PARAM(Ki, e));
   \   000004BA   0xAB00             ADD      R3,SP,#+0
   \   000004BC   0x2204             MOVS     R2,#+4
   \   000004BE   0x4651             MOV      R1,R10
   \   000004C0   0xA801             ADD      R0,SP,#+4
   \   000004C2   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    570                    EEPROM_WRITE(PID_PARAM(Kd, e));
   \   000004C6   0xAB00             ADD      R3,SP,#+0
   \   000004C8   0x2204             MOVS     R2,#+4
   \   000004CA   0x4649             MOV      R1,R9
   \   000004CC   0xA801             ADD      R0,SP,#+4
   \   000004CE   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    571                    #if ENABLED(PID_EXTRUSION_SCALING)
    572                      EEPROM_WRITE(PID_PARAM(Kc, e));
    573                    #else
    574                      dummy = 1.0f; // 1.0 = default kc
   \   000004D2   0x9402             STR      R4,[SP, #+8]
    575                      EEPROM_WRITE(dummy);
   \   000004D4   0xE014             B.N      ??save_18
    576                    #endif
    577                  }
    578                }
    579                  else
    580                //#endif // !PIDTEMP
    581                  {
    582                    dummy = DUMMY_PID_VALUE; // When read, will not change the existing value
   \                     ??save_17: (+1)
   \   000004D6   0x9702             STR      R7,[SP, #+8]
    583                    EEPROM_WRITE(dummy); // Kp
   \   000004D8   0xAB00             ADD      R3,SP,#+0
   \   000004DA   0x2204             MOVS     R2,#+4
   \   000004DC   0xA902             ADD      R1,SP,#+8
   \   000004DE   0xA801             ADD      R0,SP,#+4
   \   000004E0   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    584                    dummy = 0.0f;
   \   000004E4   0x2000             MOVS     R0,#+0
   \   000004E6   0x9002             STR      R0,[SP, #+8]
    585                    for (uint8_t q = 3; q--;) EEPROM_WRITE(dummy); // Ki, Kd, Kc
   \   000004E8   0xAB00             ADD      R3,SP,#+0
   \   000004EA   0x2204             MOVS     R2,#+4
   \   000004EC   0xA902             ADD      R1,SP,#+8
   \   000004EE   0xA801             ADD      R0,SP,#+4
   \   000004F0   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   000004F4   0xAB00             ADD      R3,SP,#+0
   \   000004F6   0x2204             MOVS     R2,#+4
   \   000004F8   0xA902             ADD      R1,SP,#+8
   \   000004FA   0xA801             ADD      R0,SP,#+4
   \   000004FC   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \                     ??save_18: (+1)
   \   00000500   0xAB00             ADD      R3,SP,#+0
   \   00000502   0x2204             MOVS     R2,#+4
   \   00000504   0xA902             ADD      R1,SP,#+8
   \   00000506   0xA801             ADD      R0,SP,#+4
   \   00000508   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    586                  }
    587          
    588              } // Hotends Loop
   \   0000050C   0x1E76             SUBS     R6,R6,#+1
   \   0000050E   0xD1CB             BNE.N    ??save_16
    589          
    590              #if DISABLED(PID_EXTRUSION_SCALING)
    591                int lpq_len = 20;
   \   00000510   0x2014             MOVS     R0,#+20
   \   00000512   0x900F             STR      R0,[SP, #+60]
    592              #endif
    593              EEPROM_WRITE(lpq_len);
   \   00000514   0xAB00             ADD      R3,SP,#+0
   \   00000516   0x2204             MOVS     R2,#+4
   \   00000518   0xA90F             ADD      R1,SP,#+60
   \   0000051A   0xA801             ADD      R0,SP,#+4
   \   0000051C   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    594          
    595              //#if DISABLED(PIDTEMPBED)
    596              if(!PIDTEMP)
   \   00000520   0xF895 0x0036      LDRB     R0,[R5, #+54]
   \   00000524   0xB980             CBNZ.N   R0,??save_19
    597               {
    598                dummy = DUMMY_PID_VALUE;
   \   00000526   0x9702             STR      R7,[SP, #+8]
    599                for (uint8_t q = 3; q--;) EEPROM_WRITE(dummy);
   \   00000528   0xAB00             ADD      R3,SP,#+0
   \   0000052A   0x2204             MOVS     R2,#+4
   \   0000052C   0xA902             ADD      R1,SP,#+8
   \   0000052E   0xA801             ADD      R0,SP,#+4
   \   00000530   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   00000534   0xAB00             ADD      R3,SP,#+0
   \   00000536   0x2204             MOVS     R2,#+4
   \   00000538   0xA902             ADD      R1,SP,#+8
   \   0000053A   0xA801             ADD      R0,SP,#+4
   \   0000053C   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   00000540   0xAB00             ADD      R3,SP,#+0
   \   00000542   0x2204             MOVS     R2,#+4
   \   00000544   0xA902             ADD      R1,SP,#+8
   \   00000546   0xE00E             B.N      ??save_20
    600               }
    601              //#else
    602              else
    603              {
    604                EEPROM_WRITE(thermalManager.bedKp);
   \                     ??save_19: (+1)
   \   00000548   0xAB00             ADD      R3,SP,#+0
   \   0000054A   0x2204             MOVS     R2,#+4
   \   0000054C   0x....             LDR.N    R1,??DataTable98_41
   \   0000054E   0xA801             ADD      R0,SP,#+4
   \   00000550   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    605                EEPROM_WRITE(thermalManager.bedKi);
   \   00000554   0xAB00             ADD      R3,SP,#+0
   \   00000556   0x2204             MOVS     R2,#+4
   \   00000558   0x....             LDR.N    R1,??DataTable98_42
   \   0000055A   0xA801             ADD      R0,SP,#+4
   \   0000055C   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    606                EEPROM_WRITE(thermalManager.bedKd);
   \   00000560   0xAB00             ADD      R3,SP,#+0
   \   00000562   0x2204             MOVS     R2,#+4
   \   00000564   0x....             LDR.N    R1,??DataTable98_43
   \                     ??save_20: (+1)
   \   00000566   0xA801             ADD      R0,SP,#+4
   \   00000568   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    607              }
    608              //#endif
    609          
    610              #if !HAS_LCD_CONTRAST
    611                const uint16_t lcd_contrast = 32;
   \   0000056C   0x2020             MOVS     R0,#+32
   \   0000056E   0xF8AD 0x0038      STRH     R0,[SP, #+56]
    612              #endif
    613              EEPROM_WRITE(lcd_contrast);
   \   00000572   0xAB00             ADD      R3,SP,#+0
   \   00000574   0x2202             MOVS     R2,#+2
   \   00000576   0xA90E             ADD      R1,SP,#+56
   \   00000578   0xA801             ADD      R0,SP,#+4
   \   0000057A   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    614          
    615              #if DISABLED(FWRETRACT)
    616                const bool autoretract_enabled = false;
   \   0000057E   0x2000             MOVS     R0,#+0
   \   00000580   0xF88D 0x0002      STRB     R0,[SP, #+2]
    617                const float retract_length = 3,
    618                            retract_feedrate_mm_s = 45,
    619                            retract_zlift = 0,
    620                            retract_recover_length = 0,
    621                            retract_recover_feedrate_mm_s = 0,
    622                            swap_retract_length = 13,
    623                            swap_retract_recover_length = 0,
    624                            swap_retract_recover_feedrate_mm_s = 8;
    625              #endif
    626              EEPROM_WRITE(autoretract_enabled);
   \   00000584   0xAB00             ADD      R3,SP,#+0
   \   00000586   0x....             LDR.N    R0,??DataTable98_44  ;; 0x40400000
   \   00000588   0x900D             STR      R0,[SP, #+52]
   \   0000058A   0x2201             MOVS     R2,#+1
   \   0000058C   0x....             LDR.N    R0,??DataTable98_45  ;; 0x42340000
   \   0000058E   0x900C             STR      R0,[SP, #+48]
   \   00000590   0xF10D 0x0102      ADD      R1,SP,#+2
   \   00000594   0x2000             MOVS     R0,#+0
   \   00000596   0x900B             STR      R0,[SP, #+44]
   \   00000598   0x900A             STR      R0,[SP, #+40]
   \   0000059A   0x9009             STR      R0,[SP, #+36]
   \   0000059C   0x....             LDR.N    R0,??DataTable98_46  ;; 0x41500000
   \   0000059E   0x9008             STR      R0,[SP, #+32]
   \   000005A0   0x2000             MOVS     R0,#+0
   \   000005A2   0x9007             STR      R0,[SP, #+28]
   \   000005A4   0xF04F 0x4082      MOV      R0,#+1090519040
   \   000005A8   0x9006             STR      R0,[SP, #+24]
   \   000005AA   0xA801             ADD      R0,SP,#+4
   \   000005AC   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    627              EEPROM_WRITE(retract_length);
   \   000005B0   0xAB00             ADD      R3,SP,#+0
   \   000005B2   0x2204             MOVS     R2,#+4
   \   000005B4   0xA90D             ADD      R1,SP,#+52
   \   000005B6   0xA801             ADD      R0,SP,#+4
   \   000005B8   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    628              EEPROM_WRITE(retract_feedrate_mm_s);
   \   000005BC   0xAB00             ADD      R3,SP,#+0
   \   000005BE   0x2204             MOVS     R2,#+4
   \   000005C0   0xA90C             ADD      R1,SP,#+48
   \   000005C2   0xA801             ADD      R0,SP,#+4
   \   000005C4   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    629              EEPROM_WRITE(retract_zlift);
   \   000005C8   0xAB00             ADD      R3,SP,#+0
   \   000005CA   0x2204             MOVS     R2,#+4
   \   000005CC   0xA90B             ADD      R1,SP,#+44
   \   000005CE   0xA801             ADD      R0,SP,#+4
   \   000005D0   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    630              EEPROM_WRITE(retract_recover_length);
   \   000005D4   0xAB00             ADD      R3,SP,#+0
   \   000005D6   0x2204             MOVS     R2,#+4
   \   000005D8   0xA90A             ADD      R1,SP,#+40
   \   000005DA   0xA801             ADD      R0,SP,#+4
   \   000005DC   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    631              EEPROM_WRITE(retract_recover_feedrate_mm_s);
   \   000005E0   0xAB00             ADD      R3,SP,#+0
   \   000005E2   0x2204             MOVS     R2,#+4
   \   000005E4   0xA909             ADD      R1,SP,#+36
   \   000005E6   0xA801             ADD      R0,SP,#+4
   \   000005E8   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    632              EEPROM_WRITE(swap_retract_length);
   \   000005EC   0xAB00             ADD      R3,SP,#+0
   \   000005EE   0x2204             MOVS     R2,#+4
   \   000005F0   0xA908             ADD      R1,SP,#+32
   \   000005F2   0xA801             ADD      R0,SP,#+4
   \   000005F4   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    633              EEPROM_WRITE(swap_retract_recover_length);
   \   000005F8   0xAB00             ADD      R3,SP,#+0
   \   000005FA   0x2204             MOVS     R2,#+4
   \   000005FC   0xA907             ADD      R1,SP,#+28
   \   000005FE   0xA801             ADD      R0,SP,#+4
   \   00000600   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    634              EEPROM_WRITE(swap_retract_recover_feedrate_mm_s);
   \   00000604   0xAB00             ADD      R3,SP,#+0
   \   00000606   0x2204             MOVS     R2,#+4
   \   00000608   0xA906             ADD      R1,SP,#+24
   \   0000060A   0xA801             ADD      R0,SP,#+4
   \   0000060C   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    635          
    636              //
    637              // Volumetric & Filament Size
    638              //
    639              #if DISABLED(NO_VOLUMETRICS)
    640          
    641                EEPROM_WRITE(parser.volumetric_enabled);
   \   00000610   0xAB00             ADD      R3,SP,#+0
   \   00000612   0x2201             MOVS     R2,#+1
   \   00000614   0x....             LDR.N    R1,??DataTable98_47
   \   00000616   0xA801             ADD      R0,SP,#+4
   \   00000618   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    642          
    643                // Save filament sizes
    644                for (uint8_t q = 0; q < MAX_EXTRUDERS; q++) {
   \   0000061C   0x....             LDR.N    R5,??DataTable98_48
    645                  if (q < COUNT(planner.filament_size)) dummy = planner.filament_size[q];
   \   0000061E   0x6828             LDR      R0,[R5, #+0]
   \   00000620   0x9002             STR      R0,[SP, #+8]
    646                  EEPROM_WRITE(dummy);
   \   00000622   0xAB00             ADD      R3,SP,#+0
   \   00000624   0x2204             MOVS     R2,#+4
   \   00000626   0xA902             ADD      R1,SP,#+8
   \   00000628   0xA801             ADD      R0,SP,#+4
   \   0000062A   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   0000062E   0x6868             LDR      R0,[R5, #+4]
   \   00000630   0x9002             STR      R0,[SP, #+8]
   \   00000632   0xAB00             ADD      R3,SP,#+0
   \   00000634   0x2204             MOVS     R2,#+4
   \   00000636   0xA902             ADD      R1,SP,#+8
   \   00000638   0xA801             ADD      R0,SP,#+4
   \   0000063A   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    647                }
    648          
    649              #endif
    650          
    651              // Save TMC2130 or TMC2208 Configuration, and placeholder values
    652              uint16_t val;
    653              #if HAS_TRINAMIC
    654                #if X_IS_TRINAMIC
    655                  val = stepperX.getCurrent();
    656                #else
    657                  val = 0;
    658                #endif
    659                EEPROM_WRITE(val);
    660                #if Y_IS_TRINAMIC
    661                  val = stepperY.getCurrent();
    662                #else
    663                  val = 0;
    664                #endif
    665                EEPROM_WRITE(val);
    666                #if Z_IS_TRINAMIC
    667                  val = stepperZ.getCurrent();
    668                #else
    669                  val = 0;
    670                #endif
    671                EEPROM_WRITE(val);
    672                #if X2_IS_TRINAMIC
    673                  val = stepperX2.getCurrent();
    674                #else
    675                  val = 0;
    676                #endif
    677                EEPROM_WRITE(val);
    678                #if Y2_IS_TRINAMIC
    679                  val = stepperY2.getCurrent();
    680                #else
    681                  val = 0;
    682                #endif
    683                EEPROM_WRITE(val);
    684                #if Z2_IS_TRINAMIC
    685                  val = stepperZ2.getCurrent();
    686                #else
    687                  val = 0;
    688                #endif
    689                EEPROM_WRITE(val);
    690                #if E0_IS_TRINAMIC
    691                  val = stepperE0.getCurrent();
    692                #else
    693                  val = 0;
    694                #endif
    695                EEPROM_WRITE(val);
    696                #if E1_IS_TRINAMIC
    697                  val = stepperE1.getCurrent();
    698                #else
    699                  val = 0;
    700                #endif
    701                EEPROM_WRITE(val);
    702                #if E2_IS_TRINAMIC
    703                  val = stepperE2.getCurrent();
    704                #else
    705                  val = 0;
    706                #endif
    707                EEPROM_WRITE(val);
    708                #if E3_IS_TRINAMIC
    709                  val = stepperE3.getCurrent();
    710                #else
    711                  val = 0;
    712                #endif
    713                EEPROM_WRITE(val);
    714                #if E4_IS_TRINAMIC
    715                  val = stepperE4.getCurrent();
    716                #else
    717                  val = 0;
    718                #endif
    719                EEPROM_WRITE(val);
    720              #else
    721                val = 0;
   \   0000063E   0x2000             MOVS     R0,#+0
   \   00000640   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    722                for (uint8_t q = 11; q--;) EEPROM_WRITE(val);
   \   00000644   0x250B             MOVS     R5,#+11
   \                     ??save_21: (+1)
   \   00000646   0xAB00             ADD      R3,SP,#+0
   \   00000648   0x2202             MOVS     R2,#+2
   \   0000064A   0xF10D 0x0112      ADD      R1,SP,#+18
   \   0000064E   0xA801             ADD      R0,SP,#+4
   \   00000650   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   00000654   0x1E6D             SUBS     R5,R5,#+1
   \   00000656   0xD1F6             BNE.N    ??save_21
    723              #endif
    724          
    725              //
    726              // TMC2130 Sensorless homing threshold
    727              //
    728              int16_t thrs;
    729              #if ENABLED(SENSORLESS_HOMING)
    730                #if ENABLED(X_IS_TMC2130)
    731                  thrs = stepperX.sgt();
    732                #else
    733                  thrs = 0;
    734                #endif
    735                EEPROM_WRITE(thrs);
    736                #if ENABLED(Y_IS_TMC2130)
    737                  thrs = stepperY.sgt();
    738                #else
    739                  thrs = 0;
    740                #endif
    741                EEPROM_WRITE(thrs);
    742              #else
    743                thrs = 0;
   \   00000658   0x2000             MOVS     R0,#+0
   \   0000065A   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    744                for (uint8_t q = 2; q--;) EEPROM_WRITE(thrs);
   \   0000065E   0xAB00             ADD      R3,SP,#+0
   \   00000660   0x2202             MOVS     R2,#+2
   \   00000662   0xA904             ADD      R1,SP,#+16
   \   00000664   0xA801             ADD      R0,SP,#+4
   \   00000666   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   0000066A   0xAB00             ADD      R3,SP,#+0
   \   0000066C   0x2202             MOVS     R2,#+2
   \   0000066E   0xA904             ADD      R1,SP,#+16
   \   00000670   0xA801             ADD      R0,SP,#+4
   \   00000672   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    745              #endif
    746          
    747              //
    748              // Linear Advance
    749              //
    750          
    751              #if ENABLED(LIN_ADVANCE)
    752                EEPROM_WRITE(planner.extruder_advance_k);
    753                EEPROM_WRITE(planner.advance_ed_ratio);
    754              #else
    755                dummy = 0.0f;
   \   00000676   0x2000             MOVS     R0,#+0
   \   00000678   0x9002             STR      R0,[SP, #+8]
    756                EEPROM_WRITE(dummy);
   \   0000067A   0xAB00             ADD      R3,SP,#+0
   \   0000067C   0x2204             MOVS     R2,#+4
   \   0000067E   0xA902             ADD      R1,SP,#+8
   \   00000680   0xA801             ADD      R0,SP,#+4
   \   00000682   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    757                EEPROM_WRITE(dummy);
   \   00000686   0xAB00             ADD      R3,SP,#+0
   \   00000688   0x2204             MOVS     R2,#+4
   \   0000068A   0xA902             ADD      R1,SP,#+8
   \   0000068C   0xA801             ADD      R0,SP,#+4
   \   0000068E   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    758              #endif
    759          
    760              #if HAS_MOTOR_CURRENT_PWM
    761                for (uint8_t q = 3; q--;) EEPROM_WRITE(stepper.motor_current_setting[q]);
    762              #else
    763                const uint32_t dummyui32 = 0;
   \   00000692   0x2000             MOVS     R0,#+0
   \   00000694   0x9005             STR      R0,[SP, #+20]
    764                for (uint8_t q = 3; q--;) EEPROM_WRITE(dummyui32);
   \   00000696   0xAB00             ADD      R3,SP,#+0
   \   00000698   0x2204             MOVS     R2,#+4
   \   0000069A   0xA905             ADD      R1,SP,#+20
   \   0000069C   0xA801             ADD      R0,SP,#+4
   \   0000069E   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   000006A2   0xAB00             ADD      R3,SP,#+0
   \   000006A4   0x2204             MOVS     R2,#+4
   \   000006A6   0xA905             ADD      R1,SP,#+20
   \   000006A8   0xA801             ADD      R0,SP,#+4
   \   000006AA   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   000006AE   0xAB00             ADD      R3,SP,#+0
   \   000006B0   0x2204             MOVS     R2,#+4
   \   000006B2   0xA905             ADD      R1,SP,#+20
   \   000006B4   0xA801             ADD      R0,SP,#+4
   \   000006B6   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    765              #endif
    766          
    767              //
    768              // CNC Coordinate Systems
    769              //
    770          
    771              #if ENABLED(CNC_COORDINATE_SYSTEMS)
    772                EEPROM_WRITE(coordinate_system); // 27 floats
    773              #else
    774                dummy = 0.0f;
   \   000006BA   0x2000             MOVS     R0,#+0
   \   000006BC   0x9002             STR      R0,[SP, #+8]
    775                for (uint8_t q = 27; q--;) 
   \   000006BE   0x251B             MOVS     R5,#+27
    776                {
    777                  EEPROM_WRITE(dummy);//48784//11186
   \                     ??save_22: (+1)
   \   000006C0   0xAB00             ADD      R3,SP,#+0
   \   000006C2   0x2204             MOVS     R2,#+4
   \   000006C4   0xA902             ADD      R1,SP,#+8
   \   000006C6   0xA801             ADD      R0,SP,#+4
   \   000006C8   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   000006CC   0x1E6D             SUBS     R5,R5,#+1
    778                  //SERIAL_ECHOPAIR("q:",q);
    779                  //SERIAL_ECHOPAIR(" offset:",eeprom_index);
    780                  //SERIAL_ECHOPAIR(" dummy:",dummy);
    781                  //SERIAL_ECHOPAIR(" CRC:",working_crc);
    782                  //SERIAL_EOL();
    783                }
   \   000006CE   0xD1F7             BNE.N    ??save_22
    784              #endif
    785          
    786              //
    787              // Skew correction factors
    788              //
    789          
    790              #if ENABLED(SKEW_CORRECTION)
    791                EEPROM_WRITE(planner.xy_skew_factor);
    792                EEPROM_WRITE(planner.xz_skew_factor);
    793                EEPROM_WRITE(planner.yz_skew_factor);
    794              #else
    795                dummy = 0.0f;
   \   000006D0   0x2000             MOVS     R0,#+0
   \   000006D2   0x9002             STR      R0,[SP, #+8]
    796                for (uint8_t q = 3; q--;) EEPROM_WRITE(dummy);
   \   000006D4   0xAB00             ADD      R3,SP,#+0
   \   000006D6   0x2204             MOVS     R2,#+4
   \   000006D8   0xA902             ADD      R1,SP,#+8
   \   000006DA   0xA801             ADD      R0,SP,#+4
   \   000006DC   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   000006E0   0xAB00             ADD      R3,SP,#+0
   \   000006E2   0x2204             MOVS     R2,#+4
   \   000006E4   0xA902             ADD      R1,SP,#+8
   \   000006E6   0xA801             ADD      R0,SP,#+4
   \   000006E8   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
   \   000006EC   0xAB00             ADD      R3,SP,#+0
   \   000006EE   0x2204             MOVS     R2,#+4
   \   000006F0   0xA902             ADD      R1,SP,#+8
   \   000006F2   0xA801             ADD      R0,SP,#+4
   \   000006F4   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    797              #endif
    798          
    799              if (!eeprom_error) {
   \   000006F8   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   000006FC   0xBB18             CBNZ.N   R0,??save_23
    800                const int eeprom_size = eeprom_index;
    801          
    802                const uint16_t final_crc = working_crc;
   \   000006FE   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000702   0x9D01             LDR      R5,[SP, #+4]
    803          
    804                // Write the EEPROM header
    805                eeprom_index = EEPROM_OFFSET;
    806          
    807                EEPROM_WRITE(version);
   \   00000704   0x....             LDR.N    R1,??DataTable98_49
   \   00000706   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   \   0000070A   0xAB00             ADD      R3,SP,#+0
   \   0000070C   0x2000             MOVS     R0,#+0
   \   0000070E   0x9001             STR      R0,[SP, #+4]
   \   00000710   0x2204             MOVS     R2,#+4
   \   00000712   0xA801             ADD      R0,SP,#+4
   \   00000714   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    808                EEPROM_WRITE(final_crc);
   \   00000718   0xAB00             ADD      R3,SP,#+0
   \   0000071A   0x2202             MOVS     R2,#+2
   \   0000071C   0xF10D 0x010E      ADD      R1,SP,#+14
   \   00000720   0xA801             ADD      R0,SP,#+4
   \   00000722   0x.... 0x....      BL       _ZN14MarlinSettings10write_dataERiPKhtPt
    809          
    810                // Report storage size
    811                #if ENABLED(EEPROM_CHITCHAT)
    812                  SERIAL_ECHO_START();
   \   00000726   0x....             LDR.N    R0,??DataTable98_4
   \   00000728   0x.... 0x....      BL       _Z14serialprintPGMPKc
    813                  SERIAL_ECHOPAIR("Settings Stored (", eeprom_size - (EEPROM_OFFSET));
   \   0000072C   0x4629             MOV      R1,R5
   \   0000072E   0x.... 0x....      ADR.W    R0,`?<Constant "Settings Stored (">`
   \   00000732   0x.... 0x....      BL       _Z17serial_echopair_PPKci
    814                  SERIAL_ECHOPAIR(" bytes; crc ", (uint32_t)final_crc);
   \   00000736   0xF8BD 0x100E      LDRH     R1,[SP, #+14]
   \   0000073A   0x....             LDR.N    R0,??DataTable98_50
   \   0000073C   0x.... 0x....      BL       _Z17serial_echopair_PPKcj
    815                  SERIAL_ECHOLNPGM(")");
   \   00000740   0x....             ADR.N    R0,??DataTable98  ;; 0x29, 0x0A, 0x00, 0x00
   \   00000742   0x.... 0x....      BL       _Z14serialprintPGMPKc
    816                #endif
    817              }
    818          
    819              #if ENABLED(UBL_SAVE_ACTIVE_ON_M500)
    820                if (ubl.storage_slot >= 0)
    821                  store_mesh(ubl.storage_slot);
    822              #endif
    823          
    824              return !eeprom_error;
   \                     ??save_23: (+1)
   \   00000746   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   0000074A   0xF080 0x0001      EOR      R0,R0,#0x1
   \   0000074E   0xB019             ADD      SP,SP,#+100
   \   00000750   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    825            }
    826          
    827            /**
    828             * M501 - Retrieve Configuration
    829             */

   \                                 In section .text, align 4, keep-with-next
    830            bool MarlinSettings::load() {
   \                     _ZN14MarlinSettings4loadEv: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0A3             SUB      SP,SP,#+140
    831              uint16_t working_crc = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    832          
    833              EEPROM_START();
   \   0000000C   0x9001             STR      R0,[SP, #+4]
    834          
    835              char stored_ver[4];
    836              EEPROM_READ(stored_ver);
   \   0000000E   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000012   0x2204             MOVS     R2,#+4
   \   00000014   0xA905             ADD      R1,SP,#+20
   \   00000016   0xA801             ADD      R0,SP,#+4
   \   00000018   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    837          
    838              uint16_t stored_crc;
    839              EEPROM_READ(stored_crc);
   \   0000001C   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000020   0x2202             MOVS     R2,#+2
   \   00000022   0xF10D 0x0112      ADD      R1,SP,#+18
   \   00000026   0xA801             ADD      R0,SP,#+4
   \   00000028   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   \   0000002C   0x2203             MOVS     R2,#+3
   \   0000002E   0xA905             ADD      R1,SP,#+20
   \   00000030   0xF8DF 0x0E44      LDR.W    R0,??load_0
    840          
    841              // Version has to match or defaults are used
    842              if (strncmp(version, stored_ver, 3) != 0) {
   \   00000034   0x.... 0x....      BL       strncmp
   \   00000038   0xB310             CBZ.N    R0,??load_1
    843                if (stored_ver[0] != 'V') {
   \   0000003A   0xF99D 0x0014      LDRSB    R0,[SP, #+20]
   \   0000003E   0x2856             CMP      R0,#+86
   \   00000040   0xD005             BEQ.N    ??load_2
    844                  stored_ver[0] = '?';
   \   00000042   0x203F             MOVS     R0,#+63
   \   00000044   0xF88D 0x0014      STRB     R0,[SP, #+20]
    845                  stored_ver[1] = '\0';
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xF88D 0x0015      STRB     R0,[SP, #+21]
    846                }
    847                #if ENABLED(EEPROM_CHITCHAT)
    848                  SERIAL_ECHO_START();
   \                     ??load_2: (+1)
   \   0000004E   0xF8DF 0x0E2C      LDR.W    R0,??load_0+0x4
   \   00000052   0x.... 0x....      BL       _Z14serialprintPGMPKc
    849                  SERIAL_ECHOPGM("EEPROM version mismatch ");
   \   00000056   0xF8DF 0x0E28      LDR.W    R0,??load_0+0x8
   \   0000005A   0x.... 0x....      BL       _Z14serialprintPGMPKc
    850                  SERIAL_ECHOPAIR("(EEPROM=", stored_ver);
   \   0000005E   0xA905             ADD      R1,SP,#+20
   \   00000060   0xF8DF 0x0E20      LDR.W    R0,??load_0+0xC
   \   00000064   0x.... 0x....      BL       _Z17serial_echopair_PPKcS0_
    851                  SERIAL_ECHOLNPGM(" Marlin=" EEPROM_VERSION ")");
   \   00000068   0xF8DF 0x0E1C      LDR.W    R0,??load_0+0x10
   \   0000006C   0x.... 0x....      BL       _Z14serialprintPGMPKc
    852                #endif
    853                card.mksReset();
   \   00000070   0xF8DF 0x0E18      LDR.W    R0,??load_0+0x14
   \   00000074   0x.... 0x....      BL       _ZN10CardReader8mksResetEv
    854                reset();
   \   00000078   0x.... 0x....      BL       _ZN14MarlinSettings5resetEv
   \   0000007C   0xF001 0xBA0B      B.W      ??load_3
    855              }
    856              else {
    857                  card.mksLoad();
   \                     ??load_1: (+1)
   \   00000080   0xF8DF 0x0E08      LDR.W    R0,??load_0+0x14
   \   00000084   0x.... 0x....      BL       _ZN10CardReader7mksLoadEv
    858                  
    859                float dummy = 0;
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0x9002             STR      R0,[SP, #+8]
    860                #if DISABLED(AUTO_BED_LEVELING_UBL) || DISABLED(FWRETRACT)
    861                  bool dummyb;
    862                #endif
    863          
    864                working_crc = 0;  // Init to 0. Accumulated by EEPROM_READ
   \   0000008C   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    865          
    866                // Number of esteppers may change
    867                uint8_t esteppers;
    868                EEPROM_READ(esteppers);
   \   00000090   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000094   0x2201             MOVS     R2,#+1
   \   00000096   0xF10D 0x0101      ADD      R1,SP,#+1
   \   0000009A   0xA801             ADD      R0,SP,#+4
   \   0000009C   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    869          
    870                //
    871                // Planner Motion
    872                //
    873          
    874                // Get only the number of E stepper parameters previously stored
    875                // Any steppers added later are set to their defaults
    876                const float def1[] = DEFAULT_AXIS_STEPS_PER_UNIT, def2[] = DEFAULT_MAX_FEEDRATE;
   \   000000A0   0xF8DF 0x1DEC      LDR.W    R1,??load_0+0x18
   \   000000A4   0xC97C             LDM      R1!,{R2-R6}
   \   000000A6   0xA81D             ADD      R0,SP,#+116
   \   000000A8   0xF8DF 0x1DE8      LDR.W    R1,??load_0+0x1C
   \   000000AC   0xC07C             STM      R0!,{R2-R6}
   \   000000AE   0xC97C             LDM      R1!,{R2-R6}
   \   000000B0   0xA818             ADD      R0,SP,#+96
    877                const uint32_t def3[] = DEFAULT_MAX_ACCELERATION;
   \   000000B2   0xF8DF 0x1DE4      LDR.W    R1,??load_0+0x20
   \   000000B6   0xC07C             STM      R0!,{R2-R6}
   \   000000B8   0xC97C             LDM      R1!,{R2-R6}
   \   000000BA   0xA813             ADD      R0,SP,#+76
   \   000000BC   0xC07C             STM      R0!,{R2-R6}
    878               /*
    879                float tmp1[XYZ + esteppers], tmp2[XYZ + esteppers];
    880                uint32_t tmp3[XYZ + esteppers];
    881                EEPROM_READ(tmp1);
    882                EEPROM_READ(tmp2);
    883                EEPROM_READ(tmp3);
    884                */
    885                float *tmp1 = NULL;			
    886                float *tmp2 = NULL;
    887                uint32_t *tmp3 = NULL;
    888                tmp1 = (float *)malloc((XYZ + esteppers) * sizeof(float));
   \   000000BE   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000C2   0x1CC0             ADDS     R0,R0,#+3
   \   000000C4   0x0080             LSLS     R0,R0,#+2
   \   000000C6   0x.... 0x....      BL       malloc
   \   000000CA   0x9006             STR      R0,[SP, #+24]
    889                tmp2 = (float *)malloc((XYZ + esteppers) * sizeof(float));
   \   000000CC   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000D0   0x1CC0             ADDS     R0,R0,#+3
   \   000000D2   0x0080             LSLS     R0,R0,#+2
   \   000000D4   0x.... 0x....      BL       malloc
   \   000000D8   0x4604             MOV      R4,R0
    890                tmp3 = (uint32_t *)malloc((XYZ + esteppers) * sizeof(uint32_t));
   \   000000DA   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000DE   0x1CC0             ADDS     R0,R0,#+3
   \   000000E0   0x0080             LSLS     R0,R0,#+2
   \   000000E2   0x.... 0x....      BL       malloc
   \   000000E6   0x4605             MOV      R5,R0
    891                read_data(eeprom_index, (uint8_t *)tmp1, (XYZ + esteppers) * sizeof(float),&working_crc);
   \   000000E8   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000EC   0x9906             LDR      R1,[SP, #+24]
   \   000000EE   0x1CC0             ADDS     R0,R0,#+3
   \   000000F0   0x0082             LSLS     R2,R0,#+2
   \   000000F2   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000000F6   0xB292             UXTH     R2,R2
   \   000000F8   0xA801             ADD      R0,SP,#+4
   \   000000FA   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    892                read_data(eeprom_index, (uint8_t *)tmp2, (XYZ + esteppers) * sizeof(float),&working_crc);
   \   000000FE   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000102   0x1CC0             ADDS     R0,R0,#+3
   \   00000104   0x0082             LSLS     R2,R0,#+2
   \   00000106   0xF10D 0x0302      ADD      R3,SP,#+2
   \   0000010A   0xB292             UXTH     R2,R2
   \   0000010C   0x4621             MOV      R1,R4
   \   0000010E   0xA801             ADD      R0,SP,#+4
   \   00000110   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    893                read_data(eeprom_index, (uint8_t *)tmp3, (XYZ + esteppers) * sizeof(uint32_t),&working_crc);
   \   00000114   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000118   0x1CC0             ADDS     R0,R0,#+3
   \   0000011A   0x0082             LSLS     R2,R0,#+2
   \   0000011C   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000120   0xB292             UXTH     R2,R2
   \   00000122   0x4629             MOV      R1,R5
   \   00000124   0xA801             ADD      R0,SP,#+4
   \   00000126   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    894                
    895                LOOP_XYZE_N(i) {
   \   0000012A   0xF89D 0xA001      LDRB     R10,[SP, #+1]
   \   0000012E   0x9906             LDR      R1,[SP, #+24]
   \   00000130   0xF8DF 0x3D68      LDR.W    R3,??load_0+0x24
   \   00000134   0xF8DF 0xCD68      LDR.W    R12,??load_0+0x28
   \   00000138   0xF8DF 0x9D68      LDR.W    R9,??load_0+0x2C
   \   0000013C   0x2000             MOVS     R0,#+0
   \   0000013E   0xAA1D             ADD      R2,SP,#+116
   \   00000140   0x4626             MOV      R6,R4
   \   00000142   0xAF18             ADD      R7,SP,#+96
   \   00000144   0x46AE             MOV      LR,R5
   \   00000146   0xF10D 0x084C      ADD      R8,SP,#+76
   \   0000014A   0xF10A 0x0A03      ADD      R10,R10,#+3
    896                  planner.axis_steps_per_mm[i]          = i < XYZ + esteppers ? tmp1[i] : def1[i < COUNT(def1) ? i : COUNT(def1) - 1];
   \                     ??load_4: (+1)
   \   0000014E   0x4550             CMP      R0,R10
   \   00000150   0xBFB4             ITE      LT 
   \   00000152   0xF8D1 0xB000      LDRLT    R11,[R1, #+0]
   \   00000156   0xF8D2 0xB000      LDRGE    R11,[R2, #+0]
   \   0000015A   0xF8C3 0xB000      STR      R11,[R3, #+0]
    897                  planner.max_feedrate_mm_s[i]          = i < XYZ + esteppers ? tmp2[i] : def2[i < COUNT(def2) ? i : COUNT(def2) - 1];
   \   0000015E   0x4550             CMP      R0,R10
   \   00000160   0xBFB4             ITE      LT 
   \   00000162   0xF8D6 0xB000      LDRLT    R11,[R6, #+0]
   \   00000166   0xF8D7 0xB000      LDRGE    R11,[R7, #+0]
   \   0000016A   0xF8CC 0xB000      STR      R11,[R12, #+0]
    898                  planner.max_acceleration_mm_per_s2[i] = i < XYZ + esteppers ? tmp3[i] : def3[i < COUNT(def3) ? i : COUNT(def3) - 1];
   \   0000016E   0x4550             CMP      R0,R10
   \   00000170   0xBFB4             ITE      LT 
   \   00000172   0xF8DE 0xB000      LDRLT    R11,[LR, #+0]
   \   00000176   0xF8D8 0xB000      LDRGE    R11,[R8, #+0]
    899                }
   \   0000017A   0x1C40             ADDS     R0,R0,#+1
   \   0000017C   0x1D3F             ADDS     R7,R7,#+4
   \   0000017E   0x1D36             ADDS     R6,R6,#+4
   \   00000180   0x1D1B             ADDS     R3,R3,#+4
   \   00000182   0x1D12             ADDS     R2,R2,#+4
   \   00000184   0x1D09             ADDS     R1,R1,#+4
   \   00000186   0xF849 0xBB04      STR      R11,[R9], #+4
   \   0000018A   0xF108 0x0804      ADD      R8,R8,#+4
   \   0000018E   0xF10E 0x0E04      ADD      LR,LR,#+4
   \   00000192   0xF10C 0x0C04      ADD      R12,R12,#+4
   \   00000196   0x2805             CMP      R0,#+5
   \   00000198   0xDBD9             BLT.N    ??load_4
    900          
    901                EEPROM_READ(planner.acceleration);
   \   0000019A   0xF10D 0x0302      ADD      R3,SP,#+2
   \   0000019E   0x2204             MOVS     R2,#+4
   \   000001A0   0xF8DF 0x1D04      LDR.W    R1,??load_0+0x30
   \   000001A4   0xA801             ADD      R0,SP,#+4
   \   000001A6   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    902                EEPROM_READ(planner.retract_acceleration);
   \   000001AA   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000001AE   0x2204             MOVS     R2,#+4
   \   000001B0   0xF8DF 0x1CF8      LDR.W    R1,??load_0+0x34
   \   000001B4   0xA801             ADD      R0,SP,#+4
   \   000001B6   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    903                EEPROM_READ(planner.travel_acceleration);
   \   000001BA   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000001BE   0x2204             MOVS     R2,#+4
   \   000001C0   0xF8DF 0x1CEC      LDR.W    R1,??load_0+0x38
   \   000001C4   0xA801             ADD      R0,SP,#+4
   \   000001C6   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    904                EEPROM_READ(planner.min_feedrate_mm_s);
   \   000001CA   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000001CE   0x2204             MOVS     R2,#+4
   \   000001D0   0xF8DF 0x1CE0      LDR.W    R1,??load_0+0x3C
   \   000001D4   0xA801             ADD      R0,SP,#+4
   \   000001D6   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    905                EEPROM_READ(planner.min_travel_feedrate_mm_s);
   \   000001DA   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000001DE   0x2204             MOVS     R2,#+4
   \   000001E0   0xF8DF 0x1CD4      LDR.W    R1,??load_0+0x40
   \   000001E4   0xA801             ADD      R0,SP,#+4
   \   000001E6   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    906                EEPROM_READ(planner.min_segment_time_us);
   \   000001EA   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000001EE   0x2204             MOVS     R2,#+4
   \   000001F0   0xF8DF 0x1CC8      LDR.W    R1,??load_0+0x44
   \   000001F4   0xA801             ADD      R0,SP,#+4
   \   000001F6   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    907                EEPROM_READ(planner.max_jerk);
   \   000001FA   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000001FE   0x2210             MOVS     R2,#+16
   \   00000200   0xF8DF 0x1CBC      LDR.W    R1,??load_0+0x48
   \   00000204   0xA801             ADD      R0,SP,#+4
   \   00000206   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    908          
    909                //
    910                // Home Offset (M206)
    911                //
    912          
    913                #if !HAS_HOME_OFFSET
    914                  float home_offset[XYZ];
    915                #endif
    916                EEPROM_READ(home_offset);
   \   0000020A   0xF10D 0x0302      ADD      R3,SP,#+2
   \   0000020E   0x220C             MOVS     R2,#+12
   \   00000210   0xF8DF 0x1CB0      LDR.W    R1,??load_0+0x4C
   \   00000214   0xA801             ADD      R0,SP,#+4
   \   00000216   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    917          
    918                //
    919                // Hotend Offsets, if any
    920                //
    921          
    922                #if HOTENDS > 1
    923                  // Skip hotend 0 which must be 0
    924                  for (uint8_t e = 1; e < HOTENDS; e++)
   \   0000021A   0xF8DF 0x6CAC      LDR.W    R6,??load_0+0x50
    925                    LOOP_XYZ(i) EEPROM_READ(hotend_offset[i][e]);
   \   0000021E   0xF8DF 0x8CAC      LDR.W    R8,??load_0+0x54
   \   00000222   0x2700             MOVS     R7,#+0
   \                     ??load_5: (+1)
   \   00000224   0x46C1             MOV      R9,R8
   \   00000226   0x7830             LDRB     R0,[R6, #+0]
   \   00000228   0x2800             CMP      R0,#+0
   \   0000022A   0xD148             BNE.N    ??load_6
   \   0000022C   0x9801             LDR      R0,[SP, #+4]
   \   0000022E   0x2201             MOVS     R2,#+1
   \   00000230   0xA900             ADD      R1,SP,#+0
   \   00000232   0xB280             UXTH     R0,R0
   \   00000234   0x.... 0x....      BL       AT24CXX_Read
   \   00000238   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000023C   0xF889 0x0000      STRB     R0,[R9, #+0]
   \   00000240   0x2201             MOVS     R2,#+1
   \   00000242   0xA900             ADD      R1,SP,#+0
   \   00000244   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000248   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   0000024C   0x9801             LDR      R0,[SP, #+4]
   \   0000024E   0x1C40             ADDS     R0,R0,#+1
   \   00000250   0x9001             STR      R0,[SP, #+4]
   \   00000252   0x2201             MOVS     R2,#+1
   \   00000254   0xA900             ADD      R1,SP,#+0
   \   00000256   0xB280             UXTH     R0,R0
   \   00000258   0x.... 0x....      BL       AT24CXX_Read
   \   0000025C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000260   0xF809 0x0F01      STRB     R0,[R9, #+1]!
   \   00000264   0x2201             MOVS     R2,#+1
   \   00000266   0xA900             ADD      R1,SP,#+0
   \   00000268   0xF10D 0x0002      ADD      R0,SP,#+2
   \   0000026C   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000270   0x9801             LDR      R0,[SP, #+4]
   \   00000272   0x1C40             ADDS     R0,R0,#+1
   \   00000274   0x9001             STR      R0,[SP, #+4]
   \   00000276   0x2201             MOVS     R2,#+1
   \   00000278   0xA900             ADD      R1,SP,#+0
   \   0000027A   0xB280             UXTH     R0,R0
   \   0000027C   0x.... 0x....      BL       AT24CXX_Read
   \   00000280   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000284   0xF809 0x0F01      STRB     R0,[R9, #+1]!
   \   00000288   0x2201             MOVS     R2,#+1
   \   0000028A   0xA900             ADD      R1,SP,#+0
   \   0000028C   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000290   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000294   0x9801             LDR      R0,[SP, #+4]
   \   00000296   0x1C40             ADDS     R0,R0,#+1
   \   00000298   0x9001             STR      R0,[SP, #+4]
   \   0000029A   0x2201             MOVS     R2,#+1
   \   0000029C   0xA900             ADD      R1,SP,#+0
   \   0000029E   0xB280             UXTH     R0,R0
   \   000002A0   0x.... 0x....      BL       AT24CXX_Read
   \   000002A4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000002A8   0xF809 0x0F01      STRB     R0,[R9, #+1]!
   \   000002AC   0x2201             MOVS     R2,#+1
   \   000002AE   0xA900             ADD      R1,SP,#+0
   \   000002B0   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000002B4   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000002B8   0x9801             LDR      R0,[SP, #+4]
   \   000002BA   0x1C40             ADDS     R0,R0,#+1
   \   000002BC   0x9001             STR      R0,[SP, #+4]
   \                     ??load_6: (+1)
   \   000002BE   0x1C7F             ADDS     R7,R7,#+1
   \   000002C0   0xF108 0x0808      ADD      R8,R8,#+8
   \   000002C4   0x2F03             CMP      R7,#+3
   \   000002C6   0xDBAD             BLT.N    ??load_5
    926                #endif
    927          
    928                //
    929                // Global Leveling
    930                //
    931          
    932                //#if ENABLED(ENABLE_LEVELING_FADE_HEIGHT)
    933                if((MACHINETPYE != DELTA) && (BED_LEVELING_METHOD&HAS_FADE))
   \   000002C8   0xF8DF 0x8C04      LDR.W    R8,??load_0+0x58
   \   000002CC   0xF208 0x0736      ADDW     R7,R8,#+54
   \   000002D0   0xF9B7 0x0022      LDRSH    R0,[R7, #+34]
   \   000002D4   0x2802             CMP      R0,#+2
   \   000002D6   0xD007             BEQ.N    ??load_7
   \   000002D8   0x7B38             LDRB     R0,[R7, #+12]
   \   000002DA   0x06C0             LSLS     R0,R0,#+27
   \   000002DC   0xD504             BPL.N    ??load_7
    934                  EEPROM_READ(new_z_fade_height);
   \   000002DE   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000002E2   0x2204             MOVS     R2,#+4
   \   000002E4   0x1D31             ADDS     R1,R6,#+4
   \   000002E6   0xE003             B.N      ??load_8
    935                //#else
    936                else
    937                  EEPROM_READ(dummy);
   \                     ??load_7: (+1)
   \   000002E8   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000002EC   0x2204             MOVS     R2,#+4
   \   000002EE   0xA902             ADD      R1,SP,#+8
   \                     ??load_8: (+1)
   \   000002F0   0xA801             ADD      R0,SP,#+4
   \   000002F2   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    938                //#endif
    939          
    940                //
    941                // Mesh (Manual) Bed Leveling
    942                //
    943          
    944                bool leveling_is_on;
    945                uint8_t mesh_num_x, mesh_num_y;
    946                EEPROM_READ(leveling_is_on);
   \   000002F6   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000002FA   0x2201             MOVS     R2,#+1
   \   000002FC   0xA904             ADD      R1,SP,#+16
   \   000002FE   0xA801             ADD      R0,SP,#+4
   \   00000300   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    947                EEPROM_READ(dummy);
   \   00000304   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000308   0x2204             MOVS     R2,#+4
   \   0000030A   0xA902             ADD      R1,SP,#+8
   \   0000030C   0xA801             ADD      R0,SP,#+4
   \   0000030E   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    948                EEPROM_READ(mesh_num_x);
   \   00000312   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000316   0x2201             MOVS     R2,#+1
   \   00000318   0xF10D 0x010F      ADD      R1,SP,#+15
   \   0000031C   0xA801             ADD      R0,SP,#+4
   \   0000031E   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    949                EEPROM_READ(mesh_num_y);
   \   00000322   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000326   0x2201             MOVS     R2,#+1
   \   00000328   0xF10D 0x010E      ADD      R1,SP,#+14
   \   0000032C   0xA801             ADD      R0,SP,#+4
   \   0000032E   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    950          
    951                //#if ENABLED(MESH_BED_LEVELING)
    952                if(BED_LEVELING_METHOD == MESH_BED_LEVELING) {
   \   00000332   0x7B38             LDRB     R0,[R7, #+12]
   \   00000334   0x2820             CMP      R0,#+32
   \   00000336   0xD17B             BNE.N    ??load_9
    953                  mbl.has_mesh = leveling_is_on;
   \   00000338   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   0000033C   0xF8DF 0x1B94      LDR.W    R1,??load_0+0x5C
   \   00000340   0x7008             STRB     R0,[R1, #+0]
    954                  mbl.z_offset = dummy;
   \   00000342   0xF8DF 0x1B94      LDR.W    R1,??load_0+0x60
   \   00000346   0x9802             LDR      R0,[SP, #+8]
   \   00000348   0x6008             STR      R0,[R1, #+0]
    955                  if (mesh_num_x == GRID_MAX_POINTS_X && mesh_num_y == GRID_MAX_POINTS_Y) {
   \   0000034A   0xF898 0x1060      LDRB     R1,[R8, #+96]
   \   0000034E   0xF89D 0x000F      LDRB     R0,[SP, #+15]
   \   00000352   0x4288             CMP      R0,R1
   \   00000354   0xBF01             ITTTT    EQ 
   \   00000356   0xF89D 0x000E      LDRBEQ   R0,[SP, #+14]
   \   0000035A   0xF108 0x0160      ADDEQ    R1,R8,#+96
   \   0000035E   0x7849             LDRBEQ   R1,[R1, #+1]
   \   00000360   0x4288             CMPEQ    R0,R1
   \   00000362   0xD109             BNE.N    ??load_10
    956                    // EEPROM data fits the current mesh
    957                    EEPROM_READ(mbl.z_values);
   \   00000364   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000368   0xF44F 0x7210      MOV      R2,#+576
   \   0000036C   0xF8DF 0x1B6C      LDR.W    R1,??load_0+0x64
   \   00000370   0xA801             ADD      R0,SP,#+4
   \   00000372   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   \   00000376   0xE0B4             B.N      ??load_11
    958                  }
    959                  else {
    960                    // EEPROM data is stale
    961                    mbl.reset();
   \                     ??load_10: (+1)
   \   00000378   0x.... 0x....      BL       _ZN17mesh_bed_leveling5resetEv
    962                    for (uint16_t q = mesh_num_x * mesh_num_y; q--;) EEPROM_READ(dummy);
   \   0000037C   0xF89D 0x000F      LDRB     R0,[SP, #+15]
   \   00000380   0xF89D 0x100E      LDRB     R1,[SP, #+14]
   \   00000384   0xFB01 0xF900      MUL      R9,R1,R0
   \                     ??load_12: (+1)
   \   00000388   0xFA1F 0xF089      UXTH     R0,R9
   \   0000038C   0x2800             CMP      R0,#+0
   \   0000038E   0xF000 0x80A8      BEQ.W    ??load_11
   \   00000392   0xF1A0 0x0901      SUB      R9,R0,#+1
   \   00000396   0x7830             LDRB     R0,[R6, #+0]
   \   00000398   0x2800             CMP      R0,#+0
   \   0000039A   0xD1F5             BNE.N    ??load_12
   \   0000039C   0x9801             LDR      R0,[SP, #+4]
   \   0000039E   0x2201             MOVS     R2,#+1
   \   000003A0   0xA900             ADD      R1,SP,#+0
   \   000003A2   0xB280             UXTH     R0,R0
   \   000003A4   0x.... 0x....      BL       AT24CXX_Read
   \   000003A8   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000003AC   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   000003B0   0x2201             MOVS     R2,#+1
   \   000003B2   0xA900             ADD      R1,SP,#+0
   \   000003B4   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000003B8   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000003BC   0x9801             LDR      R0,[SP, #+4]
   \   000003BE   0x1C40             ADDS     R0,R0,#+1
   \   000003C0   0x9001             STR      R0,[SP, #+4]
   \   000003C2   0x2201             MOVS     R2,#+1
   \   000003C4   0xA900             ADD      R1,SP,#+0
   \   000003C6   0xB280             UXTH     R0,R0
   \   000003C8   0x.... 0x....      BL       AT24CXX_Read
   \   000003CC   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000003D0   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   000003D4   0x2201             MOVS     R2,#+1
   \   000003D6   0xA900             ADD      R1,SP,#+0
   \   000003D8   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000003DC   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000003E0   0x9801             LDR      R0,[SP, #+4]
   \   000003E2   0x1C40             ADDS     R0,R0,#+1
   \   000003E4   0x9001             STR      R0,[SP, #+4]
   \   000003E6   0x2201             MOVS     R2,#+1
   \   000003E8   0xA900             ADD      R1,SP,#+0
   \   000003EA   0xB280             UXTH     R0,R0
   \   000003EC   0x.... 0x....      BL       AT24CXX_Read
   \   000003F0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000003F4   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   000003F8   0x2201             MOVS     R2,#+1
   \   000003FA   0xA900             ADD      R1,SP,#+0
   \   000003FC   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000400   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000404   0x9801             LDR      R0,[SP, #+4]
   \   00000406   0x1C40             ADDS     R0,R0,#+1
   \   00000408   0x9001             STR      R0,[SP, #+4]
   \   0000040A   0x2201             MOVS     R2,#+1
   \   0000040C   0xA900             ADD      R1,SP,#+0
   \   0000040E   0xB280             UXTH     R0,R0
   \   00000410   0x.... 0x....      BL       AT24CXX_Read
   \   00000414   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000418   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   0000041C   0x2201             MOVS     R2,#+1
   \   0000041E   0xA900             ADD      R1,SP,#+0
   \   00000420   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000424   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000428   0x9801             LDR      R0,[SP, #+4]
   \   0000042A   0x1C40             ADDS     R0,R0,#+1
   \   0000042C   0x9001             STR      R0,[SP, #+4]
   \   0000042E   0xE7AB             B.N      ??load_12
    963                  }
    964                }
    965                //#else
    966                else
    967                {
    968                  // MBL is disabled - skip the stored data
    969                  for (uint16_t q = mesh_num_x * mesh_num_y; q--;) EEPROM_READ(dummy);
   \                     ??load_9: (+1)
   \   00000430   0xF89D 0x000F      LDRB     R0,[SP, #+15]
   \   00000434   0xF89D 0x100E      LDRB     R1,[SP, #+14]
   \   00000438   0xFB01 0xF900      MUL      R9,R1,R0
   \   0000043C   0xE04D             B.N      ??load_13
   \                     ??load_14: (+1)
   \   0000043E   0xF1A0 0x0901      SUB      R9,R0,#+1
   \   00000442   0x7830             LDRB     R0,[R6, #+0]
   \   00000444   0x2800             CMP      R0,#+0
   \   00000446   0xD148             BNE.N    ??load_13
   \   00000448   0x9801             LDR      R0,[SP, #+4]
   \   0000044A   0x2201             MOVS     R2,#+1
   \   0000044C   0xA900             ADD      R1,SP,#+0
   \   0000044E   0xB280             UXTH     R0,R0
   \   00000450   0x.... 0x....      BL       AT24CXX_Read
   \   00000454   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000458   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   0000045C   0x2201             MOVS     R2,#+1
   \   0000045E   0xA900             ADD      R1,SP,#+0
   \   00000460   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000464   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000468   0x9801             LDR      R0,[SP, #+4]
   \   0000046A   0x1C40             ADDS     R0,R0,#+1
   \   0000046C   0x9001             STR      R0,[SP, #+4]
   \   0000046E   0x2201             MOVS     R2,#+1
   \   00000470   0xA900             ADD      R1,SP,#+0
   \   00000472   0xB280             UXTH     R0,R0
   \   00000474   0x.... 0x....      BL       AT24CXX_Read
   \   00000478   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000047C   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   00000480   0x2201             MOVS     R2,#+1
   \   00000482   0xA900             ADD      R1,SP,#+0
   \   00000484   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000488   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   0000048C   0x9801             LDR      R0,[SP, #+4]
   \   0000048E   0x1C40             ADDS     R0,R0,#+1
   \   00000490   0x9001             STR      R0,[SP, #+4]
   \   00000492   0x2201             MOVS     R2,#+1
   \   00000494   0xA900             ADD      R1,SP,#+0
   \   00000496   0xB280             UXTH     R0,R0
   \   00000498   0x.... 0x....      BL       AT24CXX_Read
   \   0000049C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000004A0   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   000004A4   0x2201             MOVS     R2,#+1
   \   000004A6   0xA900             ADD      R1,SP,#+0
   \   000004A8   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000004AC   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000004B0   0x9801             LDR      R0,[SP, #+4]
   \   000004B2   0x1C40             ADDS     R0,R0,#+1
   \   000004B4   0x9001             STR      R0,[SP, #+4]
   \   000004B6   0x2201             MOVS     R2,#+1
   \   000004B8   0xA900             ADD      R1,SP,#+0
   \   000004BA   0xB280             UXTH     R0,R0
   \   000004BC   0x.... 0x....      BL       AT24CXX_Read
   \   000004C0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000004C4   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   000004C8   0x2201             MOVS     R2,#+1
   \   000004CA   0xA900             ADD      R1,SP,#+0
   \   000004CC   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000004D0   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000004D4   0x9801             LDR      R0,[SP, #+4]
   \   000004D6   0x1C40             ADDS     R0,R0,#+1
   \   000004D8   0x9001             STR      R0,[SP, #+4]
   \                     ??load_13: (+1)
   \   000004DA   0xFA1F 0xF089      UXTH     R0,R9
   \   000004DE   0x2800             CMP      R0,#+0
   \   000004E0   0xD1AD             BNE.N    ??load_14
    970                }
    971                //#endif // MESH_BED_LEVELING
    972          
    973                #if !HAS_BED_PROBE
    974                  float zprobe_zoffset;
    975                #endif
    976                EEPROM_READ(zprobe_zoffset);
   \                     ??load_11: (+1)
   \   000004E2   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000004E6   0x2204             MOVS     R2,#+4
   \   000004E8   0xF8DF 0x1EE0      LDR.W    R1,??load_15
   \   000004EC   0xA801             ADD      R0,SP,#+4
   \   000004EE   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    977          
    978                //
    979                // Planar Bed Leveling matrix
    980                //
    981          
    982                //#if ABL_PLANAR
    983                if(BED_LEVELING_METHOD&ABL_PLANAR)
   \   000004F2   0x7B38             LDRB     R0,[R7, #+12]
   \   000004F4   0x2106             MOVS     R1,#+6
   \   000004F6   0x4208             TST      R0,R1
   \   000004F8   0xD008             BEQ.N    ??load_16
    984                {
    985                  EEPROM_READ(planner.bed_level_matrix);
   \   000004FA   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000004FE   0x2224             MOVS     R2,#+36
   \   00000500   0xF8DF 0x1ECC      LDR.W    R1,??load_15+0x4
   \   00000504   0xA801             ADD      R0,SP,#+4
   \   00000506   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   \   0000050A   0xE052             B.N      ??load_17
    986                }
    987                else//#else
    988                {
    989                  for (uint8_t q = 9; q--;) EEPROM_READ(dummy);
   \                     ??load_16: (+1)
   \   0000050C   0xF04F 0x0909      MOV      R9,#+9
   \                     ??load_18: (+1)
   \   00000510   0xF1A9 0x0901      SUB      R9,R9,#+1
   \   00000514   0x7830             LDRB     R0,[R6, #+0]
   \   00000516   0x2800             CMP      R0,#+0
   \   00000518   0xD148             BNE.N    ??load_19
   \   0000051A   0x9801             LDR      R0,[SP, #+4]
   \   0000051C   0x2201             MOVS     R2,#+1
   \   0000051E   0xA900             ADD      R1,SP,#+0
   \   00000520   0xB280             UXTH     R0,R0
   \   00000522   0x.... 0x....      BL       AT24CXX_Read
   \   00000526   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000052A   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   0000052E   0x2201             MOVS     R2,#+1
   \   00000530   0xA900             ADD      R1,SP,#+0
   \   00000532   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000536   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   0000053A   0x9801             LDR      R0,[SP, #+4]
   \   0000053C   0x1C40             ADDS     R0,R0,#+1
   \   0000053E   0x9001             STR      R0,[SP, #+4]
   \   00000540   0x2201             MOVS     R2,#+1
   \   00000542   0xA900             ADD      R1,SP,#+0
   \   00000544   0xB280             UXTH     R0,R0
   \   00000546   0x.... 0x....      BL       AT24CXX_Read
   \   0000054A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000054E   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   00000552   0x2201             MOVS     R2,#+1
   \   00000554   0xA900             ADD      R1,SP,#+0
   \   00000556   0xF10D 0x0002      ADD      R0,SP,#+2
   \   0000055A   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   0000055E   0x9801             LDR      R0,[SP, #+4]
   \   00000560   0x1C40             ADDS     R0,R0,#+1
   \   00000562   0x9001             STR      R0,[SP, #+4]
   \   00000564   0x2201             MOVS     R2,#+1
   \   00000566   0xA900             ADD      R1,SP,#+0
   \   00000568   0xB280             UXTH     R0,R0
   \   0000056A   0x.... 0x....      BL       AT24CXX_Read
   \   0000056E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000572   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   00000576   0x2201             MOVS     R2,#+1
   \   00000578   0xA900             ADD      R1,SP,#+0
   \   0000057A   0xF10D 0x0002      ADD      R0,SP,#+2
   \   0000057E   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000582   0x9801             LDR      R0,[SP, #+4]
   \   00000584   0x1C40             ADDS     R0,R0,#+1
   \   00000586   0x9001             STR      R0,[SP, #+4]
   \   00000588   0x2201             MOVS     R2,#+1
   \   0000058A   0xA900             ADD      R1,SP,#+0
   \   0000058C   0xB280             UXTH     R0,R0
   \   0000058E   0x.... 0x....      BL       AT24CXX_Read
   \   00000592   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000596   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   0000059A   0x2201             MOVS     R2,#+1
   \   0000059C   0xA900             ADD      R1,SP,#+0
   \   0000059E   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000005A2   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000005A6   0x9801             LDR      R0,[SP, #+4]
   \   000005A8   0x1C40             ADDS     R0,R0,#+1
   \   000005AA   0x9001             STR      R0,[SP, #+4]
   \                     ??load_19: (+1)
   \   000005AC   0xF1B9 0x0F00      CMP      R9,#+0
   \   000005B0   0xD1AE             BNE.N    ??load_18
    990                }
    991                //#endif
    992          
    993                //
    994                // Bilinear Auto Bed Leveling
    995                //
    996          
    997                uint8_t grid_max_x, grid_max_y;
    998                EEPROM_READ(grid_max_x);                       // 1 byte
   \                     ??load_17: (+1)
   \   000005B2   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000005B6   0x2201             MOVS     R2,#+1
   \   000005B8   0xF10D 0x010D      ADD      R1,SP,#+13
   \   000005BC   0xA801             ADD      R0,SP,#+4
   \   000005BE   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
    999                EEPROM_READ(grid_max_y);                       // 1 byte
   \   000005C2   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000005C6   0x2201             MOVS     R2,#+1
   \   000005C8   0xA903             ADD      R1,SP,#+12
   \   000005CA   0xA801             ADD      R0,SP,#+4
   \   000005CC   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1000                int bgs[2], bs[2];
   1001                //#if ENABLED(AUTO_BED_LEVELING_BILINEAR)
   1002                if(BED_LEVELING_METHOD == AUTO_BED_LEVELING_BILINEAR)
   \   000005D0   0x7B38             LDRB     R0,[R7, #+12]
   \   000005D2   0x2808             CMP      R0,#+8
   \   000005D4   0xF040 0x8092      BNE.W    ??load_20
   1003                {
   1004                  if (grid_max_x == GRID_MAX_POINTS_X && grid_max_y == GRID_MAX_POINTS_Y) {
   \   000005D8   0xF89D 0x000D      LDRB     R0,[SP, #+13]
   \   000005DC   0xF898 0x1060      LDRB     R1,[R8, #+96]
   \   000005E0   0x4288             CMP      R0,R1
   \   000005E2   0xBF01             ITTTT    EQ 
   \   000005E4   0xF89D 0x000C      LDRBEQ   R0,[SP, #+12]
   \   000005E8   0xF108 0x0160      ADDEQ    R1,R8,#+96
   \   000005EC   0x7849             LDRBEQ   R1,[R1, #+1]
   \   000005EE   0x4288             CMPEQ    R0,R1
   \   000005F0   0xD11C             BNE.N    ??load_21
   1005                    set_bed_leveling_enabled(false);
   \   000005F2   0x2000             MOVS     R0,#+0
   \   000005F4   0x.... 0x....      BL       _Z24set_bed_leveling_enabledb
   1006                    EEPROM_READ(bilinear_grid_spacing);        // 2 ints
   \   000005F8   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000005FC   0x2208             MOVS     R2,#+8
   \   000005FE   0x.... 0x....      LDR.W    R1,??DataTable99
   \   00000602   0xA801             ADD      R0,SP,#+4
   \   00000604   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1007                    EEPROM_READ(bilinear_start);               // 2 ints
   \   00000608   0xF10D 0x0302      ADD      R3,SP,#+2
   \   0000060C   0x2208             MOVS     R2,#+8
   \   0000060E   0x.... 0x....      LDR.W    R1,??DataTable99_1
   \   00000612   0xA801             ADD      R0,SP,#+4
   \   00000614   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1008                    EEPROM_READ(z_values);                     // 9 to 256 floats
   \   00000618   0xF10D 0x0302      ADD      R3,SP,#+2
   \   0000061C   0xF44F 0x7210      MOV      R2,#+576
   \   00000620   0x.... 0x....      LDR.W    R1,??DataTable99_2
   \   00000624   0xA801             ADD      R0,SP,#+4
   \   00000626   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   \   0000062A   0xE0CE             B.N      ??load_22
   1009                  }
   1010                  else // EEPROM data is stale
   1011                //#endif // AUTO_BED_LEVELING_BILINEAR
   1012                  {
   1013                    // Skip past disabled (or stale) Bilinear Grid data
   1014                    //int bgs[2], bs[2];
   1015                    EEPROM_READ(bgs);
   \                     ??load_21: (+1)
   \   0000062C   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000630   0x2208             MOVS     R2,#+8
   \   00000632   0xA90B             ADD      R1,SP,#+44
   \   00000634   0xA801             ADD      R0,SP,#+4
   \   00000636   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1016                    EEPROM_READ(bs);
   \   0000063A   0xF10D 0x0302      ADD      R3,SP,#+2
   \   0000063E   0x2208             MOVS     R2,#+8
   \   00000640   0xA909             ADD      R1,SP,#+36
   \   00000642   0xA801             ADD      R0,SP,#+4
   \   00000644   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1017                    for (uint16_t q = grid_max_x * grid_max_y; q--;) EEPROM_READ(dummy);
   \   00000648   0xF89D 0x000D      LDRB     R0,[SP, #+13]
   \   0000064C   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   00000650   0xFB01 0xF900      MUL      R9,R1,R0
   \                     ??load_23: (+1)
   \   00000654   0xFA1F 0xF089      UXTH     R0,R9
   \   00000658   0x2800             CMP      R0,#+0
   \   0000065A   0xF000 0x80B6      BEQ.W    ??load_22
   \   0000065E   0xF1A0 0x0901      SUB      R9,R0,#+1
   \   00000662   0x7830             LDRB     R0,[R6, #+0]
   \   00000664   0x2800             CMP      R0,#+0
   \   00000666   0xD1F5             BNE.N    ??load_23
   \   00000668   0x9801             LDR      R0,[SP, #+4]
   \   0000066A   0x2201             MOVS     R2,#+1
   \   0000066C   0xA900             ADD      R1,SP,#+0
   \   0000066E   0xB280             UXTH     R0,R0
   \   00000670   0x.... 0x....      BL       AT24CXX_Read
   \   00000674   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000678   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   0000067C   0x2201             MOVS     R2,#+1
   \   0000067E   0xA900             ADD      R1,SP,#+0
   \   00000680   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000684   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000688   0x9801             LDR      R0,[SP, #+4]
   \   0000068A   0x1C40             ADDS     R0,R0,#+1
   \   0000068C   0x9001             STR      R0,[SP, #+4]
   \   0000068E   0x2201             MOVS     R2,#+1
   \   00000690   0xA900             ADD      R1,SP,#+0
   \   00000692   0xB280             UXTH     R0,R0
   \   00000694   0x.... 0x....      BL       AT24CXX_Read
   \   00000698   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000069C   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   000006A0   0x2201             MOVS     R2,#+1
   \   000006A2   0xA900             ADD      R1,SP,#+0
   \   000006A4   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000006A8   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000006AC   0x9801             LDR      R0,[SP, #+4]
   \   000006AE   0x1C40             ADDS     R0,R0,#+1
   \   000006B0   0x9001             STR      R0,[SP, #+4]
   \   000006B2   0x2201             MOVS     R2,#+1
   \   000006B4   0xA900             ADD      R1,SP,#+0
   \   000006B6   0xB280             UXTH     R0,R0
   \   000006B8   0x.... 0x....      BL       AT24CXX_Read
   \   000006BC   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000006C0   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   000006C4   0x2201             MOVS     R2,#+1
   \   000006C6   0xA900             ADD      R1,SP,#+0
   \   000006C8   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000006CC   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000006D0   0x9801             LDR      R0,[SP, #+4]
   \   000006D2   0x1C40             ADDS     R0,R0,#+1
   \   000006D4   0x9001             STR      R0,[SP, #+4]
   \   000006D6   0x2201             MOVS     R2,#+1
   \   000006D8   0xA900             ADD      R1,SP,#+0
   \   000006DA   0xB280             UXTH     R0,R0
   \   000006DC   0x.... 0x....      BL       AT24CXX_Read
   \   000006E0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000006E4   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   000006E8   0x2201             MOVS     R2,#+1
   \   000006EA   0xA900             ADD      R1,SP,#+0
   \   000006EC   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000006F0   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000006F4   0x9801             LDR      R0,[SP, #+4]
   \   000006F6   0x1C40             ADDS     R0,R0,#+1
   \   000006F8   0x9001             STR      R0,[SP, #+4]
   \   000006FA   0xE7AB             B.N      ??load_23
   1018                  }
   1019                }
   1020                else
   1021          	  {
   1022                   EEPROM_READ(bgs);
   \                     ??load_20: (+1)
   \   000006FC   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000700   0x2208             MOVS     R2,#+8
   \   00000702   0xA90B             ADD      R1,SP,#+44
   \   00000704   0xA801             ADD      R0,SP,#+4
   \   00000706   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1023                   EEPROM_READ(bs);
   \   0000070A   0xF10D 0x0302      ADD      R3,SP,#+2
   \   0000070E   0x2208             MOVS     R2,#+8
   \   00000710   0xA909             ADD      R1,SP,#+36
   \   00000712   0xA801             ADD      R0,SP,#+4
   \   00000714   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1024                   for (uint16_t q = grid_max_x * grid_max_y; q--;) EEPROM_READ(dummy);
   \   00000718   0xF89D 0x000D      LDRB     R0,[SP, #+13]
   \   0000071C   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   00000720   0xFB01 0xF900      MUL      R9,R1,R0
   \   00000724   0xE04D             B.N      ??load_24
   \                     ??load_25: (+1)
   \   00000726   0xF1A0 0x0901      SUB      R9,R0,#+1
   \   0000072A   0x7830             LDRB     R0,[R6, #+0]
   \   0000072C   0x2800             CMP      R0,#+0
   \   0000072E   0xD148             BNE.N    ??load_24
   \   00000730   0x9801             LDR      R0,[SP, #+4]
   \   00000732   0x2201             MOVS     R2,#+1
   \   00000734   0xA900             ADD      R1,SP,#+0
   \   00000736   0xB280             UXTH     R0,R0
   \   00000738   0x.... 0x....      BL       AT24CXX_Read
   \   0000073C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000740   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00000744   0x2201             MOVS     R2,#+1
   \   00000746   0xA900             ADD      R1,SP,#+0
   \   00000748   0xF10D 0x0002      ADD      R0,SP,#+2
   \   0000074C   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000750   0x9801             LDR      R0,[SP, #+4]
   \   00000752   0x1C40             ADDS     R0,R0,#+1
   \   00000754   0x9001             STR      R0,[SP, #+4]
   \   00000756   0x2201             MOVS     R2,#+1
   \   00000758   0xA900             ADD      R1,SP,#+0
   \   0000075A   0xB280             UXTH     R0,R0
   \   0000075C   0x.... 0x....      BL       AT24CXX_Read
   \   00000760   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000764   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   00000768   0x2201             MOVS     R2,#+1
   \   0000076A   0xA900             ADD      R1,SP,#+0
   \   0000076C   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000770   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000774   0x9801             LDR      R0,[SP, #+4]
   \   00000776   0x1C40             ADDS     R0,R0,#+1
   \   00000778   0x9001             STR      R0,[SP, #+4]
   \   0000077A   0x2201             MOVS     R2,#+1
   \   0000077C   0xA900             ADD      R1,SP,#+0
   \   0000077E   0xB280             UXTH     R0,R0
   \   00000780   0x.... 0x....      BL       AT24CXX_Read
   \   00000784   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000788   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   0000078C   0x2201             MOVS     R2,#+1
   \   0000078E   0xA900             ADD      R1,SP,#+0
   \   00000790   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000794   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000798   0x9801             LDR      R0,[SP, #+4]
   \   0000079A   0x1C40             ADDS     R0,R0,#+1
   \   0000079C   0x9001             STR      R0,[SP, #+4]
   \   0000079E   0x2201             MOVS     R2,#+1
   \   000007A0   0xA900             ADD      R1,SP,#+0
   \   000007A2   0xB280             UXTH     R0,R0
   \   000007A4   0x.... 0x....      BL       AT24CXX_Read
   \   000007A8   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000007AC   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   000007B0   0x2201             MOVS     R2,#+1
   \   000007B2   0xA900             ADD      R1,SP,#+0
   \   000007B4   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000007B8   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000007BC   0x9801             LDR      R0,[SP, #+4]
   \   000007BE   0x1C40             ADDS     R0,R0,#+1
   \   000007C0   0x9001             STR      R0,[SP, #+4]
   \                     ??load_24: (+1)
   \   000007C2   0xFA1F 0xF089      UXTH     R0,R9
   \   000007C6   0x2800             CMP      R0,#+0
   \   000007C8   0xD1AD             BNE.N    ??load_25
   1025          	  }
   1026          
   1027                //
   1028                // Unified Bed Leveling active state
   1029                //
   1030          
   1031                //#if ENABLED(AUTO_BED_LEVELING_UBL)
   1032                 if(BED_LEVELING_METHOD == AUTO_BED_LEVELING_UBL)	{
   \                     ??load_22: (+1)
   \   000007CA   0x7B38             LDRB     R0,[R7, #+12]
   \   000007CC   0x2810             CMP      R0,#+16
   \   000007CE   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000007D2   0xD10B             BNE.N    ??load_26
   1033                  EEPROM_READ(planner.leveling_active);
   \   000007D4   0x2201             MOVS     R2,#+1
   \   000007D6   0x.... 0x....      LDR.W    R1,??DataTable101
   \   000007DA   0xA801             ADD      R0,SP,#+4
   \   000007DC   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1034                  EEPROM_READ(ubl.storage_slot);}
   \   000007E0   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000007E4   0x2201             MOVS     R2,#+1
   \   000007E6   0x.... 0x....      LDR.W    R1,??DataTable101_1
   \   000007EA   0xE009             B.N      ??load_27
   1035                //#else
   1036                else{
   1037                  uint8_t dummyui8;
   1038                  EEPROM_READ(dummyb);
   \                     ??load_26: (+1)
   \   000007EC   0x2201             MOVS     R2,#+1
   \   000007EE   0xF10D 0x0111      ADD      R1,SP,#+17
   \   000007F2   0xA801             ADD      R0,SP,#+4
   \   000007F4   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1039                  EEPROM_READ(dummyui8);}
   \   000007F8   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000007FC   0x2201             MOVS     R2,#+1
   \   000007FE   0xA900             ADD      R1,SP,#+0
   \                     ??load_27: (+1)
   \   00000800   0xA801             ADD      R0,SP,#+4
   \   00000802   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1040                //#endif // AUTO_BED_LEVELING_UBL
   1041          
   1042                //
   1043                // DELTA Geometry or Dual Endstops offsets
   1044                //
   1045          
   1046                //#if ENABLED(DELTA)
   1047                if(MACHINETPYE == DELTA)	{
   \   00000806   0xF9B7 0x0022      LDRSH    R0,[R7, #+34]
   \   0000080A   0x2802             CMP      R0,#+2
   \   0000080C   0xD138             BNE.N    ??load_28
   1048                  EEPROM_READ(delta_height);              // 1 float
   \   0000080E   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000812   0x2204             MOVS     R2,#+4
   \   00000814   0x.... 0x....      LDR.W    R1,??DataTable101_2
   \   00000818   0xA801             ADD      R0,SP,#+4
   \   0000081A   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1049                  EEPROM_READ(delta_endstop_adj);         // 3 floats
   \   0000081E   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000822   0x220C             MOVS     R2,#+12
   \   00000824   0x.... 0x....      LDR.W    R1,??DataTable101_3
   \   00000828   0xA801             ADD      R0,SP,#+4
   \   0000082A   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1050                  EEPROM_READ(delta_radius);              // 1 float
   \   0000082E   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000832   0x2204             MOVS     R2,#+4
   \   00000834   0x.... 0x....      LDR.W    R1,??DataTable101_4
   \   00000838   0xA801             ADD      R0,SP,#+4
   \   0000083A   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1051                  EEPROM_READ(delta_diagonal_rod);        // 1 float
   \   0000083E   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000842   0x2204             MOVS     R2,#+4
   \   00000844   0x.... 0x....      LDR.W    R1,??DataTable101_5
   \   00000848   0xA801             ADD      R0,SP,#+4
   \   0000084A   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1052                  EEPROM_READ(delta_segments_per_second); // 1 float
   \   0000084E   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000852   0x2204             MOVS     R2,#+4
   \   00000854   0x.... 0x....      LDR.W    R1,??DataTable101_6
   \   00000858   0xA801             ADD      R0,SP,#+4
   \   0000085A   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1053                  EEPROM_READ(delta_calibration_radius);  // 1 float
   \   0000085E   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000862   0x2204             MOVS     R2,#+4
   \   00000864   0x.... 0x....      LDR.W    R1,??DataTable101_7
   \   00000868   0xA801             ADD      R0,SP,#+4
   \   0000086A   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1054                  EEPROM_READ(delta_tower_angle_trim);    // 3 floats
   \   0000086E   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000872   0x220C             MOVS     R2,#+12
   \   00000874   0x.... 0x....      LDR.W    R1,??DataTable101_8
   \   00000878   0xA801             ADD      R0,SP,#+4
   \   0000087A   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   \   0000087E   0xE0C6             B.N      ??load_29
   1055                  }
   1056                  else
   1057                  {
   1058                
   1059                //#elif ENABLED(X_DUAL_ENDSTOPS) || ENABLED(Y_DUAL_ENDSTOPS) || ENABLED(Z_DUAL_ENDSTOPS)
   1060                      if(Z_DUAL_ENDSTOPS==1)
   \                     ??load_28: (+1)
   \   00000880   0xF898 0x0102      LDRB     R0,[R8, #+258]
   \   00000884   0x2801             CMP      R0,#+1
   \   00000886   0xD16F             BNE.N    ??load_30
   1061                      {
   1062                          #if ENABLED(X_DUAL_ENDSTOPS)
   1063                            EEPROM_READ(x_endstop_adj);             // 1 float
   1064                          #else
   1065                            EEPROM_READ(dummy);
   \   00000888   0xF10D 0x0302      ADD      R3,SP,#+2
   \   0000088C   0x2204             MOVS     R2,#+4
   \   0000088E   0xA902             ADD      R1,SP,#+8
   \   00000890   0xA801             ADD      R0,SP,#+4
   \   00000892   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1066                          #endif
   1067                          #if ENABLED(Y_DUAL_ENDSTOPS)
   1068                            EEPROM_READ(y_endstop_adj);             // 1 float
   1069                          #else
   1070                            EEPROM_READ(dummy);
   \   00000896   0xF10D 0x0302      ADD      R3,SP,#+2
   \   0000089A   0x2204             MOVS     R2,#+4
   \   0000089C   0xA902             ADD      R1,SP,#+8
   \   0000089E   0xA801             ADD      R0,SP,#+4
   \   000008A0   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1071                          #endif
   1072                          //#if ENABLED(Z_DUAL_ENDSTOPS)
   1073                          if(Z_DUAL_ENDSTOPS==1)
   \   000008A4   0xF898 0x0102      LDRB     R0,[R8, #+258]
   \   000008A8   0x2801             CMP      R0,#+1
   \   000008AA   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000008AE   0xBF07             ITTEE    EQ 
   1074                            EEPROM_READ(z_endstop_adj);             // 1 float
   \   000008B0   0x2204             MOVEQ    R2,#+4
   \   000008B2   0x.... 0x....      LDREQ.W  R1,??DataTable102_1
   1075                          //#else
   1076                          else
   1077                            EEPROM_READ(dummy);
   \   000008B6   0x2204             MOVNE    R2,#+4
   \   000008B8   0xA902             ADDNE    R1,SP,#+8
   \   000008BA   0xA801             ADD      R0,SP,#+4
   \   000008BC   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1078                          //#endif
   1079          
   1080                          for (uint8_t q=8; q--;) EEPROM_READ(dummy);
   \   000008C0   0xF04F 0x0908      MOV      R9,#+8
   \                     ??load_31: (+1)
   \   000008C4   0xF1A9 0x0901      SUB      R9,R9,#+1
   \   000008C8   0x7830             LDRB     R0,[R6, #+0]
   \   000008CA   0x2800             CMP      R0,#+0
   \   000008CC   0xD148             BNE.N    ??load_32
   \   000008CE   0x9801             LDR      R0,[SP, #+4]
   \   000008D0   0x2201             MOVS     R2,#+1
   \   000008D2   0xA900             ADD      R1,SP,#+0
   \   000008D4   0xB280             UXTH     R0,R0
   \   000008D6   0x.... 0x....      BL       AT24CXX_Read
   \   000008DA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000008DE   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   000008E2   0x2201             MOVS     R2,#+1
   \   000008E4   0xA900             ADD      R1,SP,#+0
   \   000008E6   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000008EA   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000008EE   0x9801             LDR      R0,[SP, #+4]
   \   000008F0   0x1C40             ADDS     R0,R0,#+1
   \   000008F2   0x9001             STR      R0,[SP, #+4]
   \   000008F4   0x2201             MOVS     R2,#+1
   \   000008F6   0xA900             ADD      R1,SP,#+0
   \   000008F8   0xB280             UXTH     R0,R0
   \   000008FA   0x.... 0x....      BL       AT24CXX_Read
   \   000008FE   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000902   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   00000906   0x2201             MOVS     R2,#+1
   \   00000908   0xA900             ADD      R1,SP,#+0
   \   0000090A   0xF10D 0x0002      ADD      R0,SP,#+2
   \   0000090E   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000912   0x9801             LDR      R0,[SP, #+4]
   \   00000914   0x1C40             ADDS     R0,R0,#+1
   \   00000916   0x9001             STR      R0,[SP, #+4]
   \   00000918   0x2201             MOVS     R2,#+1
   \   0000091A   0xA900             ADD      R1,SP,#+0
   \   0000091C   0xB280             UXTH     R0,R0
   \   0000091E   0x.... 0x....      BL       AT24CXX_Read
   \   00000922   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000926   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   0000092A   0x2201             MOVS     R2,#+1
   \   0000092C   0xA900             ADD      R1,SP,#+0
   \   0000092E   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000932   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000936   0x9801             LDR      R0,[SP, #+4]
   \   00000938   0x1C40             ADDS     R0,R0,#+1
   \   0000093A   0x9001             STR      R0,[SP, #+4]
   \   0000093C   0x2201             MOVS     R2,#+1
   \   0000093E   0xA900             ADD      R1,SP,#+0
   \   00000940   0xB280             UXTH     R0,R0
   \   00000942   0x.... 0x....      BL       AT24CXX_Read
   \   00000946   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000094A   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   0000094E   0x2201             MOVS     R2,#+1
   \   00000950   0xA900             ADD      R1,SP,#+0
   \   00000952   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000956   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   0000095A   0x9801             LDR      R0,[SP, #+4]
   \   0000095C   0x1C40             ADDS     R0,R0,#+1
   \   0000095E   0x9001             STR      R0,[SP, #+4]
   \                     ??load_32: (+1)
   \   00000960   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000964   0xD1AE             BNE.N    ??load_31
   \   00000966   0xE052             B.N      ??load_29
   1081          
   1082                    //#else
   1083                      }
   1084                      else
   1085                          for (uint8_t q=11; q--;) EEPROM_READ(dummy);
   \                     ??load_30: (+1)
   \   00000968   0xF04F 0x090B      MOV      R9,#+11
   \                     ??load_33: (+1)
   \   0000096C   0xF1A9 0x0901      SUB      R9,R9,#+1
   \   00000970   0x7830             LDRB     R0,[R6, #+0]
   \   00000972   0x2800             CMP      R0,#+0
   \   00000974   0xD148             BNE.N    ??load_34
   \   00000976   0x9801             LDR      R0,[SP, #+4]
   \   00000978   0x2201             MOVS     R2,#+1
   \   0000097A   0xA900             ADD      R1,SP,#+0
   \   0000097C   0xB280             UXTH     R0,R0
   \   0000097E   0x.... 0x....      BL       AT24CXX_Read
   \   00000982   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000986   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   0000098A   0x2201             MOVS     R2,#+1
   \   0000098C   0xA900             ADD      R1,SP,#+0
   \   0000098E   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000992   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000996   0x9801             LDR      R0,[SP, #+4]
   \   00000998   0x1C40             ADDS     R0,R0,#+1
   \   0000099A   0x9001             STR      R0,[SP, #+4]
   \   0000099C   0x2201             MOVS     R2,#+1
   \   0000099E   0xA900             ADD      R1,SP,#+0
   \   000009A0   0xB280             UXTH     R0,R0
   \   000009A2   0x.... 0x....      BL       AT24CXX_Read
   \   000009A6   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000009AA   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   000009AE   0x2201             MOVS     R2,#+1
   \   000009B0   0xA900             ADD      R1,SP,#+0
   \   000009B2   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000009B6   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000009BA   0x9801             LDR      R0,[SP, #+4]
   \   000009BC   0x1C40             ADDS     R0,R0,#+1
   \   000009BE   0x9001             STR      R0,[SP, #+4]
   \   000009C0   0x2201             MOVS     R2,#+1
   \   000009C2   0xA900             ADD      R1,SP,#+0
   \   000009C4   0xB280             UXTH     R0,R0
   \   000009C6   0x.... 0x....      BL       AT24CXX_Read
   \   000009CA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000009CE   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   000009D2   0x2201             MOVS     R2,#+1
   \   000009D4   0xA900             ADD      R1,SP,#+0
   \   000009D6   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000009DA   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000009DE   0x9801             LDR      R0,[SP, #+4]
   \   000009E0   0x1C40             ADDS     R0,R0,#+1
   \   000009E2   0x9001             STR      R0,[SP, #+4]
   \   000009E4   0x2201             MOVS     R2,#+1
   \   000009E6   0xA900             ADD      R1,SP,#+0
   \   000009E8   0xB280             UXTH     R0,R0
   \   000009EA   0x.... 0x....      BL       AT24CXX_Read
   \   000009EE   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000009F2   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   000009F6   0x2201             MOVS     R2,#+1
   \   000009F8   0xA900             ADD      R1,SP,#+0
   \   000009FA   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000009FE   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000A02   0x9801             LDR      R0,[SP, #+4]
   \   00000A04   0x1C40             ADDS     R0,R0,#+1
   \   00000A06   0x9001             STR      R0,[SP, #+4]
   \                     ??load_34: (+1)
   \   00000A08   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000A0C   0xD1AE             BNE.N    ??load_33
   1086                }
   1087                //#endif
   1088          
   1089                //
   1090                // LCD Preheat settings
   1091                //
   1092          
   1093                #if DISABLED(ULTIPANEL)
   1094                  int lcd_preheat_hotend_temp[2], lcd_preheat_bed_temp[2], lcd_preheat_fan_speed[2];
   1095                #endif
   1096                EEPROM_READ(lcd_preheat_hotend_temp); // 2 floats
   \                     ??load_29: (+1)
   \   00000A0E   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000A12   0x2208             MOVS     R2,#+8
   \   00000A14   0xA911             ADD      R1,SP,#+68
   \   00000A16   0xA801             ADD      R0,SP,#+4
   \   00000A18   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1097                EEPROM_READ(lcd_preheat_bed_temp);    // 2 floats
   \   00000A1C   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000A20   0x2208             MOVS     R2,#+8
   \   00000A22   0xA90F             ADD      R1,SP,#+60
   \   00000A24   0xA801             ADD      R0,SP,#+4
   \   00000A26   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1098                EEPROM_READ(lcd_preheat_fan_speed);   // 2 floats
   \   00000A2A   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000A2E   0x2208             MOVS     R2,#+8
   \   00000A30   0xA90D             ADD      R1,SP,#+52
   \   00000A32   0xA801             ADD      R0,SP,#+4
   \   00000A34   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1099          
   1100                //EEPROM_ASSERT(
   1101                //  WITHIN(lcd_preheat_fan_speed, 0, 255),
   1102                //  "lcd_preheat_fan_speed out of range"
   1103                //);
   1104          
   1105                //
   1106                // Hotend PID
   1107                //
   1108          
   1109                //#if ENABLED(PIDTEMP)
   1110                if(PIDTEMP){
   \   00000A38   0xF898 0x0036      LDRB     R0,[R8, #+54]
   \   00000A3C   0x2800             CMP      R0,#+0
   \   00000A3E   0xF000 0x819B      BEQ.W    ??load_35
   1111                  for (uint8_t e = 0; e < MAX_EXTRUDERS; e++) {
   \   00000A42   0xF04F 0x0802      MOV      R8,#+2
   \   00000A46   0x.... 0x....      LDR.W    R9,??DataTable103
   \   00000A4A   0x.... 0x....      LDR.W    R10,??DataTable103_1  ;; 0x453b8000
   1112                    EEPROM_READ(dummy); // Kp
   \                     ??load_36: (+1)
   \   00000A4E   0x7830             LDRB     R0,[R6, #+0]
   \   00000A50   0x2800             CMP      R0,#+0
   \   00000A52   0xD148             BNE.N    ??load_37
   \   00000A54   0x9801             LDR      R0,[SP, #+4]
   \   00000A56   0x2201             MOVS     R2,#+1
   \   00000A58   0xA900             ADD      R1,SP,#+0
   \   00000A5A   0xB280             UXTH     R0,R0
   \   00000A5C   0x.... 0x....      BL       AT24CXX_Read
   \   00000A60   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000A64   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00000A68   0x2201             MOVS     R2,#+1
   \   00000A6A   0xA900             ADD      R1,SP,#+0
   \   00000A6C   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000A70   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000A74   0x9801             LDR      R0,[SP, #+4]
   \   00000A76   0x1C40             ADDS     R0,R0,#+1
   \   00000A78   0x9001             STR      R0,[SP, #+4]
   \   00000A7A   0x2201             MOVS     R2,#+1
   \   00000A7C   0xA900             ADD      R1,SP,#+0
   \   00000A7E   0xB280             UXTH     R0,R0
   \   00000A80   0x.... 0x....      BL       AT24CXX_Read
   \   00000A84   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000A88   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   00000A8C   0x2201             MOVS     R2,#+1
   \   00000A8E   0xA900             ADD      R1,SP,#+0
   \   00000A90   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000A94   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000A98   0x9801             LDR      R0,[SP, #+4]
   \   00000A9A   0x1C40             ADDS     R0,R0,#+1
   \   00000A9C   0x9001             STR      R0,[SP, #+4]
   \   00000A9E   0x2201             MOVS     R2,#+1
   \   00000AA0   0xA900             ADD      R1,SP,#+0
   \   00000AA2   0xB280             UXTH     R0,R0
   \   00000AA4   0x.... 0x....      BL       AT24CXX_Read
   \   00000AA8   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000AAC   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   00000AB0   0x2201             MOVS     R2,#+1
   \   00000AB2   0xA900             ADD      R1,SP,#+0
   \   00000AB4   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000AB8   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000ABC   0x9801             LDR      R0,[SP, #+4]
   \   00000ABE   0x1C40             ADDS     R0,R0,#+1
   \   00000AC0   0x9001             STR      R0,[SP, #+4]
   \   00000AC2   0x2201             MOVS     R2,#+1
   \   00000AC4   0xA900             ADD      R1,SP,#+0
   \   00000AC6   0xB280             UXTH     R0,R0
   \   00000AC8   0x.... 0x....      BL       AT24CXX_Read
   \   00000ACC   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000AD0   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   00000AD4   0x2201             MOVS     R2,#+1
   \   00000AD6   0xA900             ADD      R1,SP,#+0
   \   00000AD8   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000ADC   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000AE0   0x9801             LDR      R0,[SP, #+4]
   \   00000AE2   0x1C40             ADDS     R0,R0,#+1
   \   00000AE4   0x9001             STR      R0,[SP, #+4]
   1113                    if (e < HOTENDS && dummy != DUMMY_PID_VALUE) {
   \                     ??load_37: (+1)
   \   00000AE6   0x4651             MOV      R1,R10
   \   00000AE8   0x9802             LDR      R0,[SP, #+8]
   \   00000AEA   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000AEE   0xF000 0x80EC      BEQ.W    ??load_38
   1114                      // do not need to scale PID values as the values in EEPROM are already scaled
   1115                      PID_PARAM(Kp, e) = dummy;
   \   00000AF2   0xF8C9 0x0000      STR      R0,[R9, #+0]
   1116                      EEPROM_READ(PID_PARAM(Ki, e));
   \   00000AF6   0x7830             LDRB     R0,[R6, #+0]
   \   00000AF8   0x2800             CMP      R0,#+0
   \   00000AFA   0xD14A             BNE.N    ??load_39
   \   00000AFC   0x9801             LDR      R0,[SP, #+4]
   \   00000AFE   0x2201             MOVS     R2,#+1
   \   00000B00   0xA900             ADD      R1,SP,#+0
   \   00000B02   0xB280             UXTH     R0,R0
   \   00000B04   0x.... 0x....      BL       AT24CXX_Read
   \   00000B08   0x.... 0x....      LDR.W    R11,??DataTable103_2
   \   00000B0C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000B10   0xF88B 0x0000      STRB     R0,[R11, #+0]
   \   00000B14   0x2201             MOVS     R2,#+1
   \   00000B16   0xA900             ADD      R1,SP,#+0
   \   00000B18   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000B1C   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000B20   0x9801             LDR      R0,[SP, #+4]
   \   00000B22   0x1C40             ADDS     R0,R0,#+1
   \   00000B24   0x9001             STR      R0,[SP, #+4]
   \   00000B26   0x2201             MOVS     R2,#+1
   \   00000B28   0xA900             ADD      R1,SP,#+0
   \   00000B2A   0xB280             UXTH     R0,R0
   \   00000B2C   0x.... 0x....      BL       AT24CXX_Read
   \   00000B30   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000B34   0xF88B 0x0001      STRB     R0,[R11, #+1]
   \   00000B38   0x2201             MOVS     R2,#+1
   \   00000B3A   0xA900             ADD      R1,SP,#+0
   \   00000B3C   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000B40   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000B44   0x9801             LDR      R0,[SP, #+4]
   \   00000B46   0x1C40             ADDS     R0,R0,#+1
   \   00000B48   0x9001             STR      R0,[SP, #+4]
   \   00000B4A   0x2201             MOVS     R2,#+1
   \   00000B4C   0xA900             ADD      R1,SP,#+0
   \   00000B4E   0xB280             UXTH     R0,R0
   \   00000B50   0x.... 0x....      BL       AT24CXX_Read
   \   00000B54   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000B58   0xF88B 0x0002      STRB     R0,[R11, #+2]
   \   00000B5C   0x2201             MOVS     R2,#+1
   \   00000B5E   0xA900             ADD      R1,SP,#+0
   \   00000B60   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000B64   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000B68   0x9801             LDR      R0,[SP, #+4]
   \   00000B6A   0x1C40             ADDS     R0,R0,#+1
   \   00000B6C   0x9001             STR      R0,[SP, #+4]
   \   00000B6E   0x2201             MOVS     R2,#+1
   \   00000B70   0xA900             ADD      R1,SP,#+0
   \   00000B72   0xB280             UXTH     R0,R0
   \   00000B74   0x.... 0x....      BL       AT24CXX_Read
   \   00000B78   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000B7C   0xF88B 0x0003      STRB     R0,[R11, #+3]
   \   00000B80   0x2201             MOVS     R2,#+1
   \   00000B82   0xA900             ADD      R1,SP,#+0
   \   00000B84   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000B88   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000B8C   0x9801             LDR      R0,[SP, #+4]
   \   00000B8E   0x1C40             ADDS     R0,R0,#+1
   \   00000B90   0x9001             STR      R0,[SP, #+4]
   1117                      EEPROM_READ(PID_PARAM(Kd, e));
   \                     ??load_39: (+1)
   \   00000B92   0x7830             LDRB     R0,[R6, #+0]
   \   00000B94   0x2800             CMP      R0,#+0
   \   00000B96   0xD14A             BNE.N    ??load_40
   \   00000B98   0x9801             LDR      R0,[SP, #+4]
   \   00000B9A   0x2201             MOVS     R2,#+1
   \   00000B9C   0xA900             ADD      R1,SP,#+0
   \   00000B9E   0xB280             UXTH     R0,R0
   \   00000BA0   0x.... 0x....      BL       AT24CXX_Read
   \   00000BA4   0x.... 0x....      LDR.W    R11,??DataTable103_3
   \   00000BA8   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000BAC   0xF88B 0x0000      STRB     R0,[R11, #+0]
   \   00000BB0   0x2201             MOVS     R2,#+1
   \   00000BB2   0xA900             ADD      R1,SP,#+0
   \   00000BB4   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000BB8   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000BBC   0x9801             LDR      R0,[SP, #+4]
   \   00000BBE   0x1C40             ADDS     R0,R0,#+1
   \   00000BC0   0x9001             STR      R0,[SP, #+4]
   \   00000BC2   0x2201             MOVS     R2,#+1
   \   00000BC4   0xA900             ADD      R1,SP,#+0
   \   00000BC6   0xB280             UXTH     R0,R0
   \   00000BC8   0x.... 0x....      BL       AT24CXX_Read
   \   00000BCC   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000BD0   0xF88B 0x0001      STRB     R0,[R11, #+1]
   \   00000BD4   0x2201             MOVS     R2,#+1
   \   00000BD6   0xA900             ADD      R1,SP,#+0
   \   00000BD8   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000BDC   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000BE0   0x9801             LDR      R0,[SP, #+4]
   \   00000BE2   0x1C40             ADDS     R0,R0,#+1
   \   00000BE4   0x9001             STR      R0,[SP, #+4]
   \   00000BE6   0x2201             MOVS     R2,#+1
   \   00000BE8   0xA900             ADD      R1,SP,#+0
   \   00000BEA   0xB280             UXTH     R0,R0
   \   00000BEC   0x.... 0x....      BL       AT24CXX_Read
   \   00000BF0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000BF4   0xF88B 0x0002      STRB     R0,[R11, #+2]
   \   00000BF8   0x2201             MOVS     R2,#+1
   \   00000BFA   0xA900             ADD      R1,SP,#+0
   \   00000BFC   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000C00   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000C04   0x9801             LDR      R0,[SP, #+4]
   \   00000C06   0x1C40             ADDS     R0,R0,#+1
   \   00000C08   0x9001             STR      R0,[SP, #+4]
   \   00000C0A   0x2201             MOVS     R2,#+1
   \   00000C0C   0xA900             ADD      R1,SP,#+0
   \   00000C0E   0xB280             UXTH     R0,R0
   \   00000C10   0x.... 0x....      BL       AT24CXX_Read
   \   00000C14   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000C18   0xF88B 0x0003      STRB     R0,[R11, #+3]
   \   00000C1C   0x2201             MOVS     R2,#+1
   \   00000C1E   0xA900             ADD      R1,SP,#+0
   \   00000C20   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000C24   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000C28   0x9801             LDR      R0,[SP, #+4]
   \   00000C2A   0x1C40             ADDS     R0,R0,#+1
   \   00000C2C   0x9001             STR      R0,[SP, #+4]
   1118                      #if ENABLED(PID_EXTRUSION_SCALING)
   1119                        EEPROM_READ(PID_PARAM(Kc, e));
   1120                      #else
   1121                        EEPROM_READ(dummy);
   \                     ??load_40: (+1)
   \   00000C2E   0x7830             LDRB     R0,[R6, #+0]
   \   00000C30   0x2800             CMP      R0,#+0
   \   00000C32   0xF040 0x809D      BNE.W    ??load_41
   \   00000C36   0x9801             LDR      R0,[SP, #+4]
   \   00000C38   0x2201             MOVS     R2,#+1
   \   00000C3A   0xA900             ADD      R1,SP,#+0
   \   00000C3C   0xB280             UXTH     R0,R0
   \   00000C3E   0x.... 0x....      BL       AT24CXX_Read
   \   00000C42   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000C46   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00000C4A   0x2201             MOVS     R2,#+1
   \   00000C4C   0xA900             ADD      R1,SP,#+0
   \   00000C4E   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000C52   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000C56   0x9801             LDR      R0,[SP, #+4]
   \   00000C58   0x1C40             ADDS     R0,R0,#+1
   \   00000C5A   0x9001             STR      R0,[SP, #+4]
   \   00000C5C   0x2201             MOVS     R2,#+1
   \   00000C5E   0xA900             ADD      R1,SP,#+0
   \   00000C60   0xB280             UXTH     R0,R0
   \   00000C62   0x.... 0x....      BL       AT24CXX_Read
   \   00000C66   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000C6A   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   00000C6E   0x2201             MOVS     R2,#+1
   \   00000C70   0xA900             ADD      R1,SP,#+0
   \   00000C72   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000C76   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000C7A   0x9801             LDR      R0,[SP, #+4]
   \   00000C7C   0x1C40             ADDS     R0,R0,#+1
   \   00000C7E   0x9001             STR      R0,[SP, #+4]
   \   00000C80   0x2201             MOVS     R2,#+1
   \   00000C82   0xA900             ADD      R1,SP,#+0
   \   00000C84   0xB280             UXTH     R0,R0
   \   00000C86   0x.... 0x....      BL       AT24CXX_Read
   \   00000C8A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000C8E   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   00000C92   0x2201             MOVS     R2,#+1
   \   00000C94   0xA900             ADD      R1,SP,#+0
   \   00000C96   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000C9A   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000C9E   0x9801             LDR      R0,[SP, #+4]
   \   00000CA0   0x1C40             ADDS     R0,R0,#+1
   \   00000CA2   0x9001             STR      R0,[SP, #+4]
   \   00000CA4   0x2201             MOVS     R2,#+1
   \   00000CA6   0xA900             ADD      R1,SP,#+0
   \   00000CA8   0xB280             UXTH     R0,R0
   \   00000CAA   0x.... 0x....      BL       AT24CXX_Read
   \   00000CAE   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000CB2   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   00000CB6   0x2201             MOVS     R2,#+1
   \   00000CB8   0xA900             ADD      R1,SP,#+0
   \   00000CBA   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000CBE   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000CC2   0x9801             LDR      R0,[SP, #+4]
   \   00000CC4   0x1C40             ADDS     R0,R0,#+1
   \   00000CC6   0x9001             STR      R0,[SP, #+4]
   \   00000CC8   0xE052             B.N      ??load_41
   1122                      #endif
   1123                    }
   1124                    else {
   1125                      for (uint8_t q=3; q--;) EEPROM_READ(dummy); // Ki, Kd, Kc
   \                     ??load_38: (+1)
   \   00000CCA   0xF04F 0x0B03      MOV      R11,#+3
   \                     ??load_42: (+1)
   \   00000CCE   0xF1AB 0x0B01      SUB      R11,R11,#+1
   \   00000CD2   0x7830             LDRB     R0,[R6, #+0]
   \   00000CD4   0x2800             CMP      R0,#+0
   \   00000CD6   0xD148             BNE.N    ??load_43
   \   00000CD8   0x9801             LDR      R0,[SP, #+4]
   \   00000CDA   0x2201             MOVS     R2,#+1
   \   00000CDC   0xA900             ADD      R1,SP,#+0
   \   00000CDE   0xB280             UXTH     R0,R0
   \   00000CE0   0x.... 0x....      BL       AT24CXX_Read
   \   00000CE4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000CE8   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00000CEC   0x2201             MOVS     R2,#+1
   \   00000CEE   0xA900             ADD      R1,SP,#+0
   \   00000CF0   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000CF4   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000CF8   0x9801             LDR      R0,[SP, #+4]
   \   00000CFA   0x1C40             ADDS     R0,R0,#+1
   \   00000CFC   0x9001             STR      R0,[SP, #+4]
   \   00000CFE   0x2201             MOVS     R2,#+1
   \   00000D00   0xA900             ADD      R1,SP,#+0
   \   00000D02   0xB280             UXTH     R0,R0
   \   00000D04   0x.... 0x....      BL       AT24CXX_Read
   \   00000D08   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000D0C   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   00000D10   0x2201             MOVS     R2,#+1
   \   00000D12   0xA900             ADD      R1,SP,#+0
   \   00000D14   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000D18   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000D1C   0x9801             LDR      R0,[SP, #+4]
   \   00000D1E   0x1C40             ADDS     R0,R0,#+1
   \   00000D20   0x9001             STR      R0,[SP, #+4]
   \   00000D22   0x2201             MOVS     R2,#+1
   \   00000D24   0xA900             ADD      R1,SP,#+0
   \   00000D26   0xB280             UXTH     R0,R0
   \   00000D28   0x.... 0x....      BL       AT24CXX_Read
   \   00000D2C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000D30   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   00000D34   0x2201             MOVS     R2,#+1
   \   00000D36   0xA900             ADD      R1,SP,#+0
   \   00000D38   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000D3C   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000D40   0x9801             LDR      R0,[SP, #+4]
   \   00000D42   0x1C40             ADDS     R0,R0,#+1
   \   00000D44   0x9001             STR      R0,[SP, #+4]
   \   00000D46   0x2201             MOVS     R2,#+1
   \   00000D48   0xA900             ADD      R1,SP,#+0
   \   00000D4A   0xB280             UXTH     R0,R0
   \   00000D4C   0x.... 0x....      BL       AT24CXX_Read
   \   00000D50   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000D54   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   00000D58   0x2201             MOVS     R2,#+1
   \   00000D5A   0xA900             ADD      R1,SP,#+0
   \   00000D5C   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000D60   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000D64   0x9801             LDR      R0,[SP, #+4]
   \   00000D66   0x1C40             ADDS     R0,R0,#+1
   \   00000D68   0x9001             STR      R0,[SP, #+4]
   \                     ??load_43: (+1)
   \   00000D6A   0xF1BB 0x0F00      CMP      R11,#+0
   \   00000D6E   0xD1AE             BNE.N    ??load_42
   1126                    }
   1127                  }
   \                     ??load_41: (+1)
   \   00000D70   0xF1B8 0x0801      SUBS     R8,R8,#+1
   \   00000D74   0xD053             BEQ.N    ??load_44
   \   00000D76   0xE66A             B.N      ??load_36
   1128                }
   1129                //#else // !PIDTEMP
   1130                else
   1131                  // 4 x 4 = 16 slots for PID parameters
   1132                  for (uint8_t q = MAX_EXTRUDERS * 4; q--;) EEPROM_READ(dummy);  // Kp, Ki, Kd, Kc
   \                     ??load_35: (+1)
   \   00000D78   0xF04F 0x0808      MOV      R8,#+8
   \                     ??load_45: (+1)
   \   00000D7C   0xF1A8 0x0801      SUB      R8,R8,#+1
   \   00000D80   0x7830             LDRB     R0,[R6, #+0]
   \   00000D82   0x2800             CMP      R0,#+0
   \   00000D84   0xD148             BNE.N    ??load_46
   \   00000D86   0x9801             LDR      R0,[SP, #+4]
   \   00000D88   0x2201             MOVS     R2,#+1
   \   00000D8A   0xA900             ADD      R1,SP,#+0
   \   00000D8C   0xB280             UXTH     R0,R0
   \   00000D8E   0x.... 0x....      BL       AT24CXX_Read
   \   00000D92   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000D96   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00000D9A   0x2201             MOVS     R2,#+1
   \   00000D9C   0xA900             ADD      R1,SP,#+0
   \   00000D9E   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000DA2   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000DA6   0x9801             LDR      R0,[SP, #+4]
   \   00000DA8   0x1C40             ADDS     R0,R0,#+1
   \   00000DAA   0x9001             STR      R0,[SP, #+4]
   \   00000DAC   0x2201             MOVS     R2,#+1
   \   00000DAE   0xA900             ADD      R1,SP,#+0
   \   00000DB0   0xB280             UXTH     R0,R0
   \   00000DB2   0x.... 0x....      BL       AT24CXX_Read
   \   00000DB6   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000DBA   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   00000DBE   0x2201             MOVS     R2,#+1
   \   00000DC0   0xA900             ADD      R1,SP,#+0
   \   00000DC2   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000DC6   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000DCA   0x9801             LDR      R0,[SP, #+4]
   \   00000DCC   0x1C40             ADDS     R0,R0,#+1
   \   00000DCE   0x9001             STR      R0,[SP, #+4]
   \   00000DD0   0x2201             MOVS     R2,#+1
   \   00000DD2   0xA900             ADD      R1,SP,#+0
   \   00000DD4   0xB280             UXTH     R0,R0
   \   00000DD6   0x.... 0x....      BL       AT24CXX_Read
   \   00000DDA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000DDE   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   00000DE2   0x2201             MOVS     R2,#+1
   \   00000DE4   0xA900             ADD      R1,SP,#+0
   \   00000DE6   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000DEA   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000DEE   0x9801             LDR      R0,[SP, #+4]
   \   00000DF0   0x1C40             ADDS     R0,R0,#+1
   \   00000DF2   0x9001             STR      R0,[SP, #+4]
   \   00000DF4   0x2201             MOVS     R2,#+1
   \   00000DF6   0xA900             ADD      R1,SP,#+0
   \   00000DF8   0xB280             UXTH     R0,R0
   \   00000DFA   0x.... 0x....      BL       AT24CXX_Read
   \   00000DFE   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000E02   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   00000E06   0x2201             MOVS     R2,#+1
   \   00000E08   0xA900             ADD      R1,SP,#+0
   \   00000E0A   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000E0E   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000E12   0x9801             LDR      R0,[SP, #+4]
   \   00000E14   0x1C40             ADDS     R0,R0,#+1
   \   00000E16   0x9001             STR      R0,[SP, #+4]
   \                     ??load_46: (+1)
   \   00000E18   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000E1C   0xD1AE             BNE.N    ??load_45
   1133                //#endif // !PIDTEMP
   1134          
   1135                //
   1136                // PID Extrusion Scaling
   1137                //
   1138          
   1139                #if DISABLED(PID_EXTRUSION_SCALING)
   1140                  int lpq_len;
   1141                #endif
   1142                EEPROM_READ(lpq_len);
   \                     ??load_44: (+1)
   \   00000E1E   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000E22   0x2204             MOVS     R2,#+4
   \   00000E24   0xA908             ADD      R1,SP,#+32
   \   00000E26   0xA801             ADD      R0,SP,#+4
   \   00000E28   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1143          
   1144                //
   1145                // Heated Bed PID
   1146                //
   1147          
   1148                //#if ENABLED(PIDTEMPBED)
   1149                if(PIDTEMPBED)
   \   00000E2C   0x7878             LDRB     R0,[R7, #+1]
   \   00000E2E   0x2800             CMP      R0,#+0
   \   00000E30   0xD056             BEQ.N    ??load_47
   1150                {
   1151                  EEPROM_READ(dummy); // bedKp
   \   00000E32   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000E36   0x2204             MOVS     R2,#+4
   \   00000E38   0xA902             ADD      R1,SP,#+8
   \   00000E3A   0xA801             ADD      R0,SP,#+4
   \   00000E3C   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1152                  if (dummy != DUMMY_PID_VALUE) {
   \   00000E40   0x9802             LDR      R0,[SP, #+8]
   \   00000E42   0x.... 0x....      LDR.W    R1,??DataTable103_1  ;; 0x453b8000
   \   00000E46   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000E4A   0xF000 0x809C      BEQ.W    ??load_48
   1153                    thermalManager.bedKp = dummy;
   \   00000E4E   0x.... 0x....      LDR.W    R1,??DataTable104
   \   00000E52   0x6008             STR      R0,[R1, #+0]
   1154                    EEPROM_READ(thermalManager.bedKi);
   \   00000E54   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000E58   0x2204             MOVS     R2,#+4
   \   00000E5A   0x.... 0x....      LDR.W    R1,??DataTable104_1
   \   00000E5E   0xA801             ADD      R0,SP,#+4
   \   00000E60   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1155                    EEPROM_READ(thermalManager.bedKd);
   \   00000E64   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000E68   0x2204             MOVS     R2,#+4
   \   00000E6A   0x.... 0x....      LDR.W    R1,??DataTable104_2
   \   00000E6E   0xA801             ADD      R0,SP,#+4
   \   00000E70   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   \   00000E74   0xE087             B.N      ??load_48
   \   00000E76   0xBF00             Nop      
   \                     ??load_0:
   \   00000E78   0x........         DC32     version
   \   00000E7C   0x........         DC32     echomagic
   \   00000E80   0x........         DC32     `?<Constant "EEPROM version mismatch ">`
   \   00000E84   0x........         DC32     `?<Constant "(EEPROM=">`
   \   00000E88   0x........         DC32     `?<Constant " Marlin=V47)\\n">`
   \   00000E8C   0x........         DC32     card
   \   00000E90   0x........         DC32     `?<Constant {(8.05999984E+1F), (8.0400001522E+1`
   \   00000E94   0x........         DC32     `?<Constant {(200.0F), (200.0F), (4.0F), (70.0F`
   \   00000E98   0x........         DC32     `?<Constant {1000, 1000, 100, 1000, 1000}>`
   \   00000E9C   0x........         DC32     _ZN7Planner17axis_steps_per_mmE
   \   00000EA0   0x........         DC32     _ZN7Planner17max_feedrate_mm_sE
   \   00000EA4   0x........         DC32     _ZN7Planner26max_acceleration_mm_per_s2E
   \   00000EA8   0x........         DC32     _ZN7Planner12accelerationE
   \   00000EAC   0x........         DC32     _ZN7Planner20retract_accelerationE
   \   00000EB0   0x........         DC32     _ZN7Planner19travel_accelerationE
   \   00000EB4   0x........         DC32     _ZN7Planner17min_feedrate_mm_sE
   \   00000EB8   0x........         DC32     _ZN7Planner24min_travel_feedrate_mm_sE
   \   00000EBC   0x........         DC32     _ZN7Planner19min_segment_time_usE
   \   00000EC0   0x........         DC32     _ZN7Planner8max_jerkE
   \   00000EC4   0x........         DC32     home_offset
   \   00000EC8   0x........         DC32     _ZN14MarlinSettings12eeprom_errorE
   \   00000ECC   0x........         DC32     hotend_offset+0x4
   \   00000ED0   0x........         DC32     mksCfg
   \   00000ED4   0x........         DC32     _ZN17mesh_bed_leveling8has_meshE
   \   00000ED8   0x........         DC32     _ZN17mesh_bed_leveling8z_offsetE
   \   00000EDC   0x........         DC32     _ZN17mesh_bed_leveling8z_valuesE
   1156                  }
   1157                }
   1158                //#else
   1159                else
   1160                {
   1161                  for (uint8_t q=3; q--;) EEPROM_READ(dummy); // bedKp, bedKi, bedKd
   \                     ??load_47: (+1)
   \   00000EE0   0xF04F 0x0803      MOV      R8,#+3
   \                     ??load_49: (+1)
   \   00000EE4   0xF1A8 0x0801      SUB      R8,R8,#+1
   \   00000EE8   0x7830             LDRB     R0,[R6, #+0]
   \   00000EEA   0x2800             CMP      R0,#+0
   \   00000EEC   0xD148             BNE.N    ??load_50
   \   00000EEE   0x9801             LDR      R0,[SP, #+4]
   \   00000EF0   0x2201             MOVS     R2,#+1
   \   00000EF2   0xA900             ADD      R1,SP,#+0
   \   00000EF4   0xB280             UXTH     R0,R0
   \   00000EF6   0x.... 0x....      BL       AT24CXX_Read
   \   00000EFA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000EFE   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00000F02   0x2201             MOVS     R2,#+1
   \   00000F04   0xA900             ADD      R1,SP,#+0
   \   00000F06   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000F0A   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000F0E   0x9801             LDR      R0,[SP, #+4]
   \   00000F10   0x1C40             ADDS     R0,R0,#+1
   \   00000F12   0x9001             STR      R0,[SP, #+4]
   \   00000F14   0x2201             MOVS     R2,#+1
   \   00000F16   0xA900             ADD      R1,SP,#+0
   \   00000F18   0xB280             UXTH     R0,R0
   \   00000F1A   0x.... 0x....      BL       AT24CXX_Read
   \   00000F1E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000F22   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   00000F26   0x2201             MOVS     R2,#+1
   \   00000F28   0xA900             ADD      R1,SP,#+0
   \   00000F2A   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000F2E   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000F32   0x9801             LDR      R0,[SP, #+4]
   \   00000F34   0x1C40             ADDS     R0,R0,#+1
   \   00000F36   0x9001             STR      R0,[SP, #+4]
   \   00000F38   0x2201             MOVS     R2,#+1
   \   00000F3A   0xA900             ADD      R1,SP,#+0
   \   00000F3C   0xB280             UXTH     R0,R0
   \   00000F3E   0x.... 0x....      BL       AT24CXX_Read
   \   00000F42   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000F46   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   00000F4A   0x2201             MOVS     R2,#+1
   \   00000F4C   0xA900             ADD      R1,SP,#+0
   \   00000F4E   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000F52   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000F56   0x9801             LDR      R0,[SP, #+4]
   \   00000F58   0x1C40             ADDS     R0,R0,#+1
   \   00000F5A   0x9001             STR      R0,[SP, #+4]
   \   00000F5C   0x2201             MOVS     R2,#+1
   \   00000F5E   0xA900             ADD      R1,SP,#+0
   \   00000F60   0xB280             UXTH     R0,R0
   \   00000F62   0x.... 0x....      BL       AT24CXX_Read
   \   00000F66   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000F6A   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   00000F6E   0x2201             MOVS     R2,#+1
   \   00000F70   0xA900             ADD      R1,SP,#+0
   \   00000F72   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000F76   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000F7A   0x9801             LDR      R0,[SP, #+4]
   \   00000F7C   0x1C40             ADDS     R0,R0,#+1
   \   00000F7E   0x9001             STR      R0,[SP, #+4]
   \                     ??load_50: (+1)
   \   00000F80   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000F84   0xD1AE             BNE.N    ??load_49
   1162                }
   1163                //#endif
   1164          
   1165                //
   1166                // LCD Contrast
   1167                //
   1168          
   1169                #if !HAS_LCD_CONTRAST
   1170                  uint16_t lcd_contrast;
   1171                #endif
   1172                EEPROM_READ(lcd_contrast);
   \                     ??load_48: (+1)
   \   00000F86   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000F8A   0x2202             MOVS     R2,#+2
   \   00000F8C   0xA907             ADD      R1,SP,#+28
   \   00000F8E   0xA801             ADD      R0,SP,#+4
   \   00000F90   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1173          
   1174                //
   1175                // Firmware Retraction
   1176                //
   1177          
   1178                #if ENABLED(FWRETRACT)
   1179                  EEPROM_READ(autoretract_enabled);
   1180                  EEPROM_READ(retract_length);
   1181                  EEPROM_READ(retract_feedrate_mm_s);
   1182                  EEPROM_READ(retract_zlift);
   1183                  EEPROM_READ(retract_recover_length);
   1184                  EEPROM_READ(retract_recover_feedrate_mm_s);
   1185                  EEPROM_READ(swap_retract_length);
   1186                  EEPROM_READ(swap_retract_recover_length);
   1187                  EEPROM_READ(swap_retract_recover_feedrate_mm_s);
   1188                #else
   1189                  EEPROM_READ(dummyb);
   \   00000F94   0xF10D 0x0302      ADD      R3,SP,#+2
   \   00000F98   0x2201             MOVS     R2,#+1
   \   00000F9A   0xF10D 0x0111      ADD      R1,SP,#+17
   \   00000F9E   0xA801             ADD      R0,SP,#+4
   \   00000FA0   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1190                  for (uint8_t q=8; q--;) EEPROM_READ(dummy);
   \   00000FA4   0xF04F 0x0808      MOV      R8,#+8
   \                     ??load_51: (+1)
   \   00000FA8   0xF1A8 0x0801      SUB      R8,R8,#+1
   \   00000FAC   0x7830             LDRB     R0,[R6, #+0]
   \   00000FAE   0x2800             CMP      R0,#+0
   \   00000FB0   0xD148             BNE.N    ??load_52
   \   00000FB2   0x9801             LDR      R0,[SP, #+4]
   \   00000FB4   0x2201             MOVS     R2,#+1
   \   00000FB6   0xA900             ADD      R1,SP,#+0
   \   00000FB8   0xB280             UXTH     R0,R0
   \   00000FBA   0x.... 0x....      BL       AT24CXX_Read
   \   00000FBE   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000FC2   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00000FC6   0x2201             MOVS     R2,#+1
   \   00000FC8   0xA900             ADD      R1,SP,#+0
   \   00000FCA   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000FCE   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000FD2   0x9801             LDR      R0,[SP, #+4]
   \   00000FD4   0x1C40             ADDS     R0,R0,#+1
   \   00000FD6   0x9001             STR      R0,[SP, #+4]
   \   00000FD8   0x2201             MOVS     R2,#+1
   \   00000FDA   0xA900             ADD      R1,SP,#+0
   \   00000FDC   0xB280             UXTH     R0,R0
   \   00000FDE   0x.... 0x....      BL       AT24CXX_Read
   \   00000FE2   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000FE6   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   00000FEA   0x2201             MOVS     R2,#+1
   \   00000FEC   0xA900             ADD      R1,SP,#+0
   \   00000FEE   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000FF2   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000FF6   0x9801             LDR      R0,[SP, #+4]
   \   00000FF8   0x1C40             ADDS     R0,R0,#+1
   \   00000FFA   0x9001             STR      R0,[SP, #+4]
   \   00000FFC   0x2201             MOVS     R2,#+1
   \   00000FFE   0xA900             ADD      R1,SP,#+0
   \   00001000   0xB280             UXTH     R0,R0
   \   00001002   0x.... 0x....      BL       AT24CXX_Read
   \   00001006   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000100A   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   0000100E   0x2201             MOVS     R2,#+1
   \   00001010   0xA900             ADD      R1,SP,#+0
   \   00001012   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00001016   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   0000101A   0x9801             LDR      R0,[SP, #+4]
   \   0000101C   0x1C40             ADDS     R0,R0,#+1
   \   0000101E   0x9001             STR      R0,[SP, #+4]
   \   00001020   0x2201             MOVS     R2,#+1
   \   00001022   0xA900             ADD      R1,SP,#+0
   \   00001024   0xB280             UXTH     R0,R0
   \   00001026   0x.... 0x....      BL       AT24CXX_Read
   \   0000102A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000102E   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   00001032   0x2201             MOVS     R2,#+1
   \   00001034   0xA900             ADD      R1,SP,#+0
   \   00001036   0xF10D 0x0002      ADD      R0,SP,#+2
   \   0000103A   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   0000103E   0x9801             LDR      R0,[SP, #+4]
   \   00001040   0x1C40             ADDS     R0,R0,#+1
   \   00001042   0x9001             STR      R0,[SP, #+4]
   \                     ??load_52: (+1)
   \   00001044   0xF1B8 0x0F00      CMP      R8,#+0
   \   00001048   0xD1AE             BNE.N    ??load_51
   1191                #endif
   1192          
   1193                //
   1194                // Volumetric & Filament Size
   1195                //
   1196                #if DISABLED(NO_VOLUMETRICS)
   1197          
   1198                  EEPROM_READ(parser.volumetric_enabled);
   \   0000104A   0xF10D 0x0302      ADD      R3,SP,#+2
   \   0000104E   0x2201             MOVS     R2,#+1
   \   00001050   0x.... 0x....      LDR.W    R1,??report_0+0x8
   \   00001054   0xA801             ADD      R0,SP,#+4
   \   00001056   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1199          
   1200                  for (uint8_t q = 0; q < MAX_EXTRUDERS; q++) {
   \   0000105A   0x.... 0x....      LDR.W    R8,??report_0+0xC
   \   0000105E   0xF04F 0x0902      MOV      R9,#+2
   1201                    EEPROM_READ(dummy);
   \                     ??load_53: (+1)
   \   00001062   0x7830             LDRB     R0,[R6, #+0]
   \   00001064   0x2800             CMP      R0,#+0
   \   00001066   0xD148             BNE.N    ??load_54
   \   00001068   0x9801             LDR      R0,[SP, #+4]
   \   0000106A   0x2201             MOVS     R2,#+1
   \   0000106C   0xA900             ADD      R1,SP,#+0
   \   0000106E   0xB280             UXTH     R0,R0
   \   00001070   0x.... 0x....      BL       AT24CXX_Read
   \   00001074   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00001078   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   0000107C   0x2201             MOVS     R2,#+1
   \   0000107E   0xA900             ADD      R1,SP,#+0
   \   00001080   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00001084   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00001088   0x9801             LDR      R0,[SP, #+4]
   \   0000108A   0x1C40             ADDS     R0,R0,#+1
   \   0000108C   0x9001             STR      R0,[SP, #+4]
   \   0000108E   0x2201             MOVS     R2,#+1
   \   00001090   0xA900             ADD      R1,SP,#+0
   \   00001092   0xB280             UXTH     R0,R0
   \   00001094   0x.... 0x....      BL       AT24CXX_Read
   \   00001098   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000109C   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   000010A0   0x2201             MOVS     R2,#+1
   \   000010A2   0xA900             ADD      R1,SP,#+0
   \   000010A4   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000010A8   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000010AC   0x9801             LDR      R0,[SP, #+4]
   \   000010AE   0x1C40             ADDS     R0,R0,#+1
   \   000010B0   0x9001             STR      R0,[SP, #+4]
   \   000010B2   0x2201             MOVS     R2,#+1
   \   000010B4   0xA900             ADD      R1,SP,#+0
   \   000010B6   0xB280             UXTH     R0,R0
   \   000010B8   0x.... 0x....      BL       AT24CXX_Read
   \   000010BC   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000010C0   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   000010C4   0x2201             MOVS     R2,#+1
   \   000010C6   0xA900             ADD      R1,SP,#+0
   \   000010C8   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000010CC   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000010D0   0x9801             LDR      R0,[SP, #+4]
   \   000010D2   0x1C40             ADDS     R0,R0,#+1
   \   000010D4   0x9001             STR      R0,[SP, #+4]
   \   000010D6   0x2201             MOVS     R2,#+1
   \   000010D8   0xA900             ADD      R1,SP,#+0
   \   000010DA   0xB280             UXTH     R0,R0
   \   000010DC   0x.... 0x....      BL       AT24CXX_Read
   \   000010E0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000010E4   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   000010E8   0x2201             MOVS     R2,#+1
   \   000010EA   0xA900             ADD      R1,SP,#+0
   \   000010EC   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000010F0   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000010F4   0x9801             LDR      R0,[SP, #+4]
   \   000010F6   0x1C40             ADDS     R0,R0,#+1
   \   000010F8   0x9001             STR      R0,[SP, #+4]
   1202                    if (q < COUNT(planner.filament_size)) planner.filament_size[q] = dummy;
   1203                  }
   \                     ??load_54: (+1)
   \   000010FA   0xF1B9 0x0901      SUBS     R9,R9,#+1
   \   000010FE   0x9802             LDR      R0,[SP, #+8]
   \   00001100   0xF848 0x0B04      STR      R0,[R8], #+4
   \   00001104   0xD1AD             BNE.N    ??load_53
   1204          
   1205                #endif
   1206          
   1207                //
   1208                // TMC2130 Stepper Current
   1209                //
   1210          
   1211                uint16_t val;
   1212                #if HAS_TRINAMIC
   1213                  EEPROM_READ(val);
   1214                  #if X_IS_TRINAMIC
   1215                    stepperX.setCurrent(val, R_SENSE, HOLD_MULTIPLIER);
   1216                  #endif
   1217                  EEPROM_READ(val);
   1218                  #if Y_IS_TRINAMIC
   1219                    stepperY.setCurrent(val, R_SENSE, HOLD_MULTIPLIER);
   1220                  #endif
   1221                  EEPROM_READ(val);
   1222                  #if Z_IS_TRINAMIC
   1223                    stepperZ.setCurrent(val, R_SENSE, HOLD_MULTIPLIER);
   1224                  #endif
   1225                  EEPROM_READ(val);
   1226                  #if X2_IS_TRINAMIC
   1227                    stepperX2.setCurrent(val, R_SENSE, HOLD_MULTIPLIER);
   1228                  #endif
   1229                  EEPROM_READ(val);
   1230                  #if Y2_IS_TRINAMIC
   1231                    stepperY2.setCurrent(val, R_SENSE, HOLD_MULTIPLIER);
   1232                  #endif
   1233                  EEPROM_READ(val);
   1234                  #if Z2_IS_TRINAMIC
   1235                    stepperZ2.setCurrent(val, R_SENSE, HOLD_MULTIPLIER);
   1236                  #endif
   1237                  EEPROM_READ(val);
   1238                  #if E0_IS_TRINAMIC
   1239                    stepperE0.setCurrent(val, R_SENSE, HOLD_MULTIPLIER);
   1240                  #endif
   1241                  EEPROM_READ(val);
   1242                  #if E1_IS_TRINAMIC
   1243                    stepperE1.setCurrent(val, R_SENSE, HOLD_MULTIPLIER);
   1244                  #endif
   1245                  EEPROM_READ(val);
   1246                  #if E2_IS_TRINAMIC
   1247                    stepperE2.setCurrent(val, R_SENSE, HOLD_MULTIPLIER);
   1248                  #endif
   1249                  EEPROM_READ(val);
   1250                  #if E3_IS_TRINAMIC
   1251                    stepperE3.setCurrent(val, R_SENSE, HOLD_MULTIPLIER);
   1252                  #endif
   1253                  EEPROM_READ(val);
   1254                  #if E4_IS_TRINAMIC
   1255                    stepperE4.setCurrent(val, R_SENSE, HOLD_MULTIPLIER);
   1256                  #endif
   1257                #else
   1258                  for (uint8_t q = 11; q--;) EEPROM_READ(val);
   \   00001106   0xF04F 0x080B      MOV      R8,#+11
   \                     ??load_55: (+1)
   \   0000110A   0xF1A8 0x0801      SUB      R8,R8,#+1
   \   0000110E   0x7830             LDRB     R0,[R6, #+0]
   \   00001110   0xB9E0             CBNZ.N   R0,??load_56
   \   00001112   0x9801             LDR      R0,[SP, #+4]
   \   00001114   0x2201             MOVS     R2,#+1
   \   00001116   0xA900             ADD      R1,SP,#+0
   \   00001118   0xB280             UXTH     R0,R0
   \   0000111A   0x.... 0x....      BL       AT24CXX_Read
   \   0000111E   0x2201             MOVS     R2,#+1
   \   00001120   0xA900             ADD      R1,SP,#+0
   \   00001122   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00001126   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   0000112A   0x9801             LDR      R0,[SP, #+4]
   \   0000112C   0x1C40             ADDS     R0,R0,#+1
   \   0000112E   0x9001             STR      R0,[SP, #+4]
   \   00001130   0x2201             MOVS     R2,#+1
   \   00001132   0xA900             ADD      R1,SP,#+0
   \   00001134   0xB280             UXTH     R0,R0
   \   00001136   0x.... 0x....      BL       AT24CXX_Read
   \   0000113A   0x2201             MOVS     R2,#+1
   \   0000113C   0xA900             ADD      R1,SP,#+0
   \   0000113E   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00001142   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00001146   0x9801             LDR      R0,[SP, #+4]
   \   00001148   0x1C40             ADDS     R0,R0,#+1
   \   0000114A   0x9001             STR      R0,[SP, #+4]
   \                     ??load_56: (+1)
   \   0000114C   0xF1B8 0x0F00      CMP      R8,#+0
   \   00001150   0xD1DB             BNE.N    ??load_55
   1259                #endif
   1260          
   1261                /*
   1262                 * TMC2130 Sensorless homing threshold.
   1263                 * X and X2 use the same value
   1264                 * Y and Y2 use the same value
   1265                 */
   1266                int16_t thrs;
   1267                #if ENABLED(SENSORLESS_HOMING)
   1268                  EEPROM_READ(thrs);
   1269                  #if ENABLED(X_IS_TMC2130)
   1270                    stepperX.sgt(thrs);
   1271                  #endif
   1272                  #if ENABLED(X2_IS_TMC2130)
   1273                    stepperX2.sgt(thrs);
   1274                  #endif
   1275                  EEPROM_READ(thrs);
   1276                  #if ENABLED(Y_IS_TMC2130)
   1277                    stepperY.sgt(thrs);
   1278                  #endif
   1279                  #if ENABLED(Y2_IS_TMC2130)
   1280                    stepperY2.sgt(thrs);
   1281                  #endif
   1282                #else
   1283                  for (uint8_t q = 0; q < 2; q++) EEPROM_READ(thrs);
   \   00001152   0xF04F 0x0802      MOV      R8,#+2
   \                     ??load_57: (+1)
   \   00001156   0x7830             LDRB     R0,[R6, #+0]
   \   00001158   0xB9E0             CBNZ.N   R0,??load_58
   \   0000115A   0x2201             MOVS     R2,#+1
   \   0000115C   0x9801             LDR      R0,[SP, #+4]
   \   0000115E   0xA900             ADD      R1,SP,#+0
   \   00001160   0xB280             UXTH     R0,R0
   \   00001162   0x.... 0x....      BL       AT24CXX_Read
   \   00001166   0x2201             MOVS     R2,#+1
   \   00001168   0xA900             ADD      R1,SP,#+0
   \   0000116A   0xF10D 0x0002      ADD      R0,SP,#+2
   \   0000116E   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00001172   0x9801             LDR      R0,[SP, #+4]
   \   00001174   0x1C40             ADDS     R0,R0,#+1
   \   00001176   0x9001             STR      R0,[SP, #+4]
   \   00001178   0x2201             MOVS     R2,#+1
   \   0000117A   0xA900             ADD      R1,SP,#+0
   \   0000117C   0xB280             UXTH     R0,R0
   \   0000117E   0x.... 0x....      BL       AT24CXX_Read
   \   00001182   0x2201             MOVS     R2,#+1
   \   00001184   0xA900             ADD      R1,SP,#+0
   \   00001186   0xF10D 0x0002      ADD      R0,SP,#+2
   \   0000118A   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   0000118E   0x9801             LDR      R0,[SP, #+4]
   \   00001190   0x1C40             ADDS     R0,R0,#+1
   \   00001192   0x9001             STR      R0,[SP, #+4]
   \                     ??load_58: (+1)
   \   00001194   0xF1B8 0x0801      SUBS     R8,R8,#+1
   \   00001198   0xD1DD             BNE.N    ??load_57
   1284                #endif
   1285          
   1286                //
   1287                // Linear Advance
   1288                //
   1289          
   1290                #if ENABLED(LIN_ADVANCE)
   1291                  EEPROM_READ(planner.extruder_advance_k);
   1292                  EEPROM_READ(planner.advance_ed_ratio);
   1293                #else
   1294                  EEPROM_READ(dummy);
   \   0000119A   0xF10D 0x0302      ADD      R3,SP,#+2
   \   0000119E   0x2204             MOVS     R2,#+4
   \   000011A0   0xA902             ADD      R1,SP,#+8
   \   000011A2   0xA801             ADD      R0,SP,#+4
   \   000011A4   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1295                  EEPROM_READ(dummy);
   \   000011A8   0xF10D 0x0302      ADD      R3,SP,#+2
   \   000011AC   0x2204             MOVS     R2,#+4
   \   000011AE   0xA902             ADD      R1,SP,#+8
   \   000011B0   0xA801             ADD      R0,SP,#+4
   \   000011B2   0x.... 0x....      BL       _ZN14MarlinSettings9read_dataERiPhtPt
   1296                #endif
   1297          
   1298                //
   1299                // Motor Current PWM
   1300                //
   1301          
   1302                #if HAS_MOTOR_CURRENT_PWM
   1303                  for (uint8_t q = 3; q--;) EEPROM_READ(stepper.motor_current_setting[q]);
   1304                #else
   1305                  uint32_t dummyui32;
   1306                  for (uint8_t q = 3; q--;) EEPROM_READ(dummyui32);
   \   000011B6   0xF04F 0x0803      MOV      R8,#+3
   \                     ??load_59: (+1)
   \   000011BA   0xF1A8 0x0801      SUB      R8,R8,#+1
   \   000011BE   0x7830             LDRB     R0,[R6, #+0]
   \   000011C0   0xBBC0             CBNZ.N   R0,??load_60
   \   000011C2   0x9801             LDR      R0,[SP, #+4]
   \   000011C4   0x2201             MOVS     R2,#+1
   \   000011C6   0xA900             ADD      R1,SP,#+0
   \   000011C8   0xB280             UXTH     R0,R0
   \   000011CA   0x.... 0x....      BL       AT24CXX_Read
   \   000011CE   0x2201             MOVS     R2,#+1
   \   000011D0   0xA900             ADD      R1,SP,#+0
   \   000011D2   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000011D6   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000011DA   0x9801             LDR      R0,[SP, #+4]
   \   000011DC   0x1C40             ADDS     R0,R0,#+1
   \   000011DE   0x9001             STR      R0,[SP, #+4]
   \   000011E0   0x2201             MOVS     R2,#+1
   \   000011E2   0xA900             ADD      R1,SP,#+0
   \   000011E4   0xB280             UXTH     R0,R0
   \   000011E6   0x.... 0x....      BL       AT24CXX_Read
   \   000011EA   0x2201             MOVS     R2,#+1
   \   000011EC   0xA900             ADD      R1,SP,#+0
   \   000011EE   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000011F2   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000011F6   0x9801             LDR      R0,[SP, #+4]
   \   000011F8   0x1C40             ADDS     R0,R0,#+1
   \   000011FA   0x9001             STR      R0,[SP, #+4]
   \   000011FC   0x2201             MOVS     R2,#+1
   \   000011FE   0xA900             ADD      R1,SP,#+0
   \   00001200   0xB280             UXTH     R0,R0
   \   00001202   0x.... 0x....      BL       AT24CXX_Read
   \   00001206   0x2201             MOVS     R2,#+1
   \   00001208   0xA900             ADD      R1,SP,#+0
   \   0000120A   0xF10D 0x0002      ADD      R0,SP,#+2
   \   0000120E   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00001212   0x9801             LDR      R0,[SP, #+4]
   \   00001214   0x1C40             ADDS     R0,R0,#+1
   \   00001216   0x9001             STR      R0,[SP, #+4]
   \   00001218   0x2201             MOVS     R2,#+1
   \   0000121A   0xA900             ADD      R1,SP,#+0
   \   0000121C   0xB280             UXTH     R0,R0
   \   0000121E   0x.... 0x....      BL       AT24CXX_Read
   \   00001222   0x2201             MOVS     R2,#+1
   \   00001224   0xA900             ADD      R1,SP,#+0
   \   00001226   0xF10D 0x0002      ADD      R0,SP,#+2
   \   0000122A   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   0000122E   0x9801             LDR      R0,[SP, #+4]
   \   00001230   0x1C40             ADDS     R0,R0,#+1
   \   00001232   0x9001             STR      R0,[SP, #+4]
   \                     ??load_60: (+1)
   \   00001234   0xF1B8 0x0F00      CMP      R8,#+0
   \   00001238   0xD1BF             BNE.N    ??load_59
   1307                #endif
   1308          
   1309                //
   1310                // CNC Coordinate System
   1311                //
   1312          
   1313                #if ENABLED(CNC_COORDINATE_SYSTEMS)
   1314                  (void)select_coordinate_system(-1); // Go back to machine space
   1315                  EEPROM_READ(coordinate_system);                  // 27 floats
   1316                #else
   1317                  for (uint8_t q = 27; q--;) 
   \   0000123A   0xF04F 0x081B      MOV      R8,#+27
   \                     ??load_61: (+1)
   \   0000123E   0xF1A8 0x0801      SUB      R8,R8,#+1
   1318                  {
   1319                      EEPROM_READ(dummy);
   \   00001242   0x7830             LDRB     R0,[R6, #+0]
   \   00001244   0x2800             CMP      R0,#+0
   \   00001246   0xD148             BNE.N    ??load_62
   \   00001248   0x9801             LDR      R0,[SP, #+4]
   \   0000124A   0x2201             MOVS     R2,#+1
   \   0000124C   0xA900             ADD      R1,SP,#+0
   \   0000124E   0xB280             UXTH     R0,R0
   \   00001250   0x.... 0x....      BL       AT24CXX_Read
   \   00001254   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00001258   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   0000125C   0x2201             MOVS     R2,#+1
   \   0000125E   0xA900             ADD      R1,SP,#+0
   \   00001260   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00001264   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00001268   0x9801             LDR      R0,[SP, #+4]
   \   0000126A   0x1C40             ADDS     R0,R0,#+1
   \   0000126C   0x9001             STR      R0,[SP, #+4]
   \   0000126E   0x2201             MOVS     R2,#+1
   \   00001270   0xA900             ADD      R1,SP,#+0
   \   00001272   0xB280             UXTH     R0,R0
   \   00001274   0x.... 0x....      BL       AT24CXX_Read
   \   00001278   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000127C   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   00001280   0x2201             MOVS     R2,#+1
   \   00001282   0xA900             ADD      R1,SP,#+0
   \   00001284   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00001288   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   0000128C   0x9801             LDR      R0,[SP, #+4]
   \   0000128E   0x1C40             ADDS     R0,R0,#+1
   \   00001290   0x9001             STR      R0,[SP, #+4]
   \   00001292   0x2201             MOVS     R2,#+1
   \   00001294   0xA900             ADD      R1,SP,#+0
   \   00001296   0xB280             UXTH     R0,R0
   \   00001298   0x.... 0x....      BL       AT24CXX_Read
   \   0000129C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000012A0   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   000012A4   0x2201             MOVS     R2,#+1
   \   000012A6   0xA900             ADD      R1,SP,#+0
   \   000012A8   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000012AC   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000012B0   0x9801             LDR      R0,[SP, #+4]
   \   000012B2   0x1C40             ADDS     R0,R0,#+1
   \   000012B4   0x9001             STR      R0,[SP, #+4]
   \   000012B6   0x2201             MOVS     R2,#+1
   \   000012B8   0xA900             ADD      R1,SP,#+0
   \   000012BA   0xB280             UXTH     R0,R0
   \   000012BC   0x.... 0x....      BL       AT24CXX_Read
   \   000012C0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000012C4   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   000012C8   0x2201             MOVS     R2,#+1
   \   000012CA   0xA900             ADD      R1,SP,#+0
   \   000012CC   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000012D0   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000012D4   0x9801             LDR      R0,[SP, #+4]
   \   000012D6   0x1C40             ADDS     R0,R0,#+1
   \   000012D8   0x9001             STR      R0,[SP, #+4]
   1320                      //SERIAL_ECHOPAIR("q:",q);
   1321                      //SERIAL_ECHOPAIR(" offset:",eeprom_index);
   1322                      //SERIAL_ECHOPAIR(" dummy:",dummy);
   1323                      //SERIAL_ECHOPAIR(" CRC:",working_crc);
   1324                      //SERIAL_EOL();
   1325                  }
   \                     ??load_62: (+1)
   \   000012DA   0xF1B8 0x0F00      CMP      R8,#+0
   \   000012DE   0xD1AE             BNE.N    ??load_61
   1326                #endif
   1327          
   1328                //
   1329                // Skew correction factors
   1330                //
   1331          
   1332                #if ENABLED(SKEW_CORRECTION_GCODE)
   1333                  EEPROM_READ(planner.xy_skew_factor);
   1334                  #if ENABLED(SKEW_CORRECTION_FOR_Z)
   1335                    EEPROM_READ(planner.xz_skew_factor);
   1336                    EEPROM_READ(planner.yz_skew_factor);
   1337                  #else
   1338                    EEPROM_READ(dummy);
   1339                    EEPROM_READ(dummy);
   1340                  #endif
   1341                #else
   1342                  for (uint8_t q = 3; q--;) EEPROM_READ(dummy);
   \   000012E0   0xF04F 0x0803      MOV      R8,#+3
   \                     ??load_63: (+1)
   \   000012E4   0x7830             LDRB     R0,[R6, #+0]
   \   000012E6   0xF1A8 0x0801      SUB      R8,R8,#+1
   \   000012EA   0x2800             CMP      R0,#+0
   \   000012EC   0xD148             BNE.N    ??load_64
   \   000012EE   0x9801             LDR      R0,[SP, #+4]
   \   000012F0   0x2201             MOVS     R2,#+1
   \   000012F2   0xA900             ADD      R1,SP,#+0
   \   000012F4   0xB280             UXTH     R0,R0
   \   000012F6   0x.... 0x....      BL       AT24CXX_Read
   \   000012FA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000012FE   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00001302   0x2201             MOVS     R2,#+1
   \   00001304   0xA900             ADD      R1,SP,#+0
   \   00001306   0xF10D 0x0002      ADD      R0,SP,#+2
   \   0000130A   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   0000130E   0x9801             LDR      R0,[SP, #+4]
   \   00001310   0x1C40             ADDS     R0,R0,#+1
   \   00001312   0x9001             STR      R0,[SP, #+4]
   \   00001314   0x2201             MOVS     R2,#+1
   \   00001316   0xA900             ADD      R1,SP,#+0
   \   00001318   0xB280             UXTH     R0,R0
   \   0000131A   0x.... 0x....      BL       AT24CXX_Read
   \   0000131E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00001322   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   00001326   0x2201             MOVS     R2,#+1
   \   00001328   0xA900             ADD      R1,SP,#+0
   \   0000132A   0xF10D 0x0002      ADD      R0,SP,#+2
   \   0000132E   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00001332   0x9801             LDR      R0,[SP, #+4]
   \   00001334   0x1C40             ADDS     R0,R0,#+1
   \   00001336   0x9001             STR      R0,[SP, #+4]
   \   00001338   0x2201             MOVS     R2,#+1
   \   0000133A   0xA900             ADD      R1,SP,#+0
   \   0000133C   0xB280             UXTH     R0,R0
   \   0000133E   0x.... 0x....      BL       AT24CXX_Read
   \   00001342   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00001346   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   0000134A   0x2201             MOVS     R2,#+1
   \   0000134C   0xA900             ADD      R1,SP,#+0
   \   0000134E   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00001352   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00001356   0x9801             LDR      R0,[SP, #+4]
   \   00001358   0x1C40             ADDS     R0,R0,#+1
   \   0000135A   0x9001             STR      R0,[SP, #+4]
   \   0000135C   0x2201             MOVS     R2,#+1
   \   0000135E   0xA900             ADD      R1,SP,#+0
   \   00001360   0xB280             UXTH     R0,R0
   \   00001362   0x.... 0x....      BL       AT24CXX_Read
   \   00001366   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000136A   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   0000136E   0x2201             MOVS     R2,#+1
   \   00001370   0xA900             ADD      R1,SP,#+0
   \   00001372   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00001376   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   0000137A   0x9801             LDR      R0,[SP, #+4]
   \   0000137C   0x1C40             ADDS     R0,R0,#+1
   \   0000137E   0x9001             STR      R0,[SP, #+4]
   \                     ??load_64: (+1)
   \   00001380   0xF1B8 0x0F00      CMP      R8,#+0
   \   00001384   0xD1AE             BNE.N    ??load_63
   1343                #endif
   1344          
   1345                if (working_crc == stored_crc) {
   \   00001386   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000138A   0xF8BD 0x1012      LDRH     R1,[SP, #+18]
   \   0000138E   0x.... 0x....      LDR.W    R8,??DataTable104_3
   \   00001392   0x4288             CMP      R0,R1
   \   00001394   0xD11E             BNE.N    ??load_65
   1346                  postprocess();
   \   00001396   0x.... 0x....      BL       _ZN14MarlinSettings11postprocessEv
   1347                  #if ENABLED(EEPROM_CHITCHAT)
   1348                    SERIAL_ECHO_START();
   \   0000139A   0x.... 0x....      LDR.W    R0,??DataTable104_4
   \   0000139E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1349                    SERIAL_ECHO(version);
   \   000013A2   0x.... 0x....      ADR.W    R1,version
   \   000013A6   0x4640             MOV      R0,R8
   \   000013A8   0x.... 0x....      BL       _ZN5Print5printEPKc
   1350                    SERIAL_ECHOPAIR(" stored settings retrieved (", eeprom_index - (EEPROM_OFFSET));
   \   000013AC   0x9901             LDR      R1,[SP, #+4]
   \   000013AE   0x.... 0x....      ADR.W    R0,`?<Constant " stored settings retr...">`
   \   000013B2   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   1351                    SERIAL_ECHOPAIR(" bytes; crc ", (uint32_t)working_crc);
   \   000013B6   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   000013BA   0x.... 0x....      ADR.W    R0,`?<Constant " bytes; crc ">`
   \   000013BE   0x.... 0x....      BL       _Z17serial_echopair_PPKcj
   1352                    SERIAL_ECHOLNPGM(")");
   \   000013C2   0x....             ADR.N    R0,??DataTable102  ;; 0x29, 0x0A, 0x00, 0x00
   \   000013C4   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   000013C8   0xE022             B.N      ??load_66
   \   000013CA   0xBF00             Nop      
   \                     ??load_15:
   \   000013CC   0x........         DC32     zprobe_zoffset
   \   000013D0   0x........         DC32     _ZN7Planner16bed_level_matrixE
   1353                  #endif
   1354                }
   1355                else {
   1356                  #if ENABLED(EEPROM_CHITCHAT)
   1357                    SERIAL_ERROR_START();
   \                     ??load_65: (+1)
   \   000013D4   0x.... 0x....      LDR.W    R0,??DataTable104_5
   \   000013D8   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1358                    SERIAL_ERRORPGM("EEPROM CRC mismatch - (stored) ");
   \   000013DC   0x.... 0x....      ADR.W    R0,`?<Constant "EEPROM CRC mismatch -...">`
   \   000013E0   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1359                    SERIAL_ERROR(stored_crc);
   \   000013E4   0xF8BD 0x1012      LDRH     R1,[SP, #+18]
   \   000013E8   0x220A             MOVS     R2,#+10
   \   000013EA   0x4640             MOV      R0,R8
   \   000013EC   0x.... 0x....      BL       _ZN5Print5printEii
   1360                    SERIAL_ERRORPGM(" != ");
   \   000013F0   0x.... 0x....      ADR.W    R0,`?<Constant " != ">`
   \   000013F4   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1361                    SERIAL_ERROR(working_crc);
   \   000013F8   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   000013FC   0x220A             MOVS     R2,#+10
   \   000013FE   0x4640             MOV      R0,R8
   \   00001400   0x.... 0x....      BL       _ZN5Print5printEii
   1362                    SERIAL_ERRORLNPGM(" (calculated)!");
   \   00001404   0x.... 0x....      ADR.W    R0,`?<Constant " (calculated)!\\n">`
   \   00001408   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1363                  #endif
   1364                  reset();
   \   0000140C   0x.... 0x....      BL       _ZN14MarlinSettings5resetEv
   1365                }
   1366          
   1367                //#if ENABLED(AUTO_BED_LEVELING_UBL)
   1368                if(BED_LEVELING_METHOD == AUTO_BED_LEVELING_UBL) 	{
   \                     ??load_66: (+1)
   \   00001410   0x7B38             LDRB     R0,[R7, #+12]
   \   00001412   0x2810             CMP      R0,#+16
   \   00001414   0xD136             BNE.N    ??load_67
   1369                  meshes_begin = (eeprom_index + 32) & 0xFFF8;  // Pad the end of configuration data so it
   \   00001416   0x9801             LDR      R0,[SP, #+4]
   \   00001418   0x3020             ADDS     R0,R0,#+32
   \   0000141A   0xF020 0x0007      BIC      R0,R0,#0x7
   \   0000141E   0x8070             STRH     R0,[R6, #+2]
   1370                                                                // can float up or down a little bit without
   1371                                                                // disrupting the mesh data
   1372                  ubl.report_state();
   \   00001420   0x.... 0x....      BL       _ZN20unified_bed_leveling12report_stateEv
   1373          
   1374                  if (!ubl.sanity_check()) {
   \   00001424   0x.... 0x....      BL       _ZN20unified_bed_leveling12sanity_checkEv
   \   00001428   0xB950             CBNZ.N   R0,??load_68
   1375                    SERIAL_EOL();
   \   0000142A   0x210A             MOVS     R1,#+10
   \   0000142C   0x4640             MOV      R0,R8
   \   0000142E   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1376                    #if ENABLED(EEPROM_CHITCHAT)
   1377                      ubl.echo_name();
   \   00001432   0x.... 0x....      BL       _ZN20unified_bed_leveling9echo_nameEv
   1378                      SERIAL_ECHOLNPGM(" initialized.\n");
   \   00001436   0x.... 0x....      ADR.W    R0,`?<Constant " initialized.\\n\\n">`
   \   0000143A   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   0000143E   0xE00A             B.N      ??load_69
   1379                    #endif
   1380                  }
   1381                  else {
   1382                    #if ENABLED(EEPROM_CHITCHAT)
   1383                      SERIAL_PROTOCOLPGM("?Can't enable ");
   \                     ??load_68: (+1)
   \   00001440   0x.... 0x....      ADR.W    R0,`?<Constant "?Can\\'t enable ">`
   \   00001444   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1384                      ubl.echo_name();
   \   00001448   0x.... 0x....      BL       _ZN20unified_bed_leveling9echo_nameEv
   1385                      SERIAL_PROTOCOLLNPGM(".");
   \   0000144C   0x....             ADR.N    R0,??DataTable102_2  ;; 0x2E, 0x0A, 0x00, 0x00
   \   0000144E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1386                    #endif
   1387                    ubl.reset();
   \   00001452   0x.... 0x....      BL       _ZN20unified_bed_leveling5resetEv
   1388                  }
   1389          
   1390                  if (ubl.storage_slot >= 0) {
   \                     ??load_69: (+1)
   \   00001456   0x....             LDR.N    R6,??DataTable101_1
   \   00001458   0xF996 0x0000      LDRSB    R0,[R6, #+0]
   \   0000145C   0x2800             CMP      R0,#+0
   \   0000145E   0xD40B             BMI.N    ??load_70
   1391                    load_mesh(ubl.storage_slot);
   \   00001460   0x2100             MOVS     R1,#+0
   \   00001462   0x.... 0x....      BL       _ZN14MarlinSettings9load_meshEaPv
   1392                    #if ENABLED(EEPROM_CHITCHAT)
   1393                      SERIAL_ECHOPAIR("Mesh ", ubl.storage_slot);
   \   00001466   0xF996 0x1000      LDRSB    R1,[R6, #+0]
   \   0000146A   0x.... 0x....      ADR.W    R0,`?<Constant "Mesh ">`
   \   0000146E   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   1394                      SERIAL_ECHOLNPGM(" loaded from storage.");
   \   00001472   0x.... 0x....      ADR.W    R0,`?<Constant " loaded from storage.\\n">`
   \   00001476   0xE003             B.N      ??load_71
   1395                    #endif
   1396                  }
   1397                  else {
   1398                    ubl.reset();
   \                     ??load_70: (+1)
   \   00001478   0x.... 0x....      BL       _ZN20unified_bed_leveling5resetEv
   1399                    #if ENABLED(EEPROM_CHITCHAT)
   1400                      SERIAL_ECHOLNPGM("UBL System reset()");
   \   0000147C   0x.... 0x....      ADR.W    R0,`?<Constant "UBL System reset()\\n">`
   \                     ??load_71: (+1)
   \   00001480   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1401                    #endif
   1402                  }
   1403                  }
   1404                //#endif
   1405                free(tmp1);
   \                     ??load_67: (+1)
   \   00001484   0x9806             LDR      R0,[SP, #+24]
   \   00001486   0x.... 0x....      BL       free
   1406                free(tmp2);
   \   0000148A   0x4620             MOV      R0,R4
   \   0000148C   0x.... 0x....      BL       free
   1407                free(tmp3);
   \   00001490   0x4628             MOV      R0,R5
   \   00001492   0x.... 0x....      BL       free
   1408              }
   1409          
   1410              #if ENABLED(EEPROM_CHITCHAT) && DISABLED(DISABLE_M503)
   1411                report();
   \                     ??load_3: (+1)
   \   00001496   0x2000             MOVS     R0,#+0
   \   00001498   0x.... 0x....      BL       _ZN14MarlinSettings6reportEb
   1412              #endif
   1413          
   1414              return !eeprom_error;
   \   0000149C   0x.... 0x....      LDR.W    R0,??DataTable105
   \   000014A0   0x7800             LDRB     R0,[R0, #+0]
   \   000014A2   0xF080 0x0001      EOR      R0,R0,#0x1
   \   000014A6   0xB023             ADD      SP,SP,#+140
   \   000014A8   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1415            }
   1416          
   1417            #if 1//ENABLED(AUTO_BED_LEVELING_UBL)
   1418          
   1419              #if ENABLED(EEPROM_CHITCHAT)

   \                                 In section .text, align 2, keep-with-next
   1420                void ubl_invalid_slot(const int s) {
   \                     _Z16ubl_invalid_sloti: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   1421                  SERIAL_PROTOCOLLNPGM("?Invalid slot.");
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "?Invalid slot.\\n">`
   \   00000008   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1422                  SERIAL_PROTOCOL(s);
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable104_3
   \   00000010   0x220A             MOVS     R2,#+10
   \   00000012   0x4621             MOV      R1,R4
   \   00000014   0x.... 0x....      BL       _ZN5Print5printEii
   1423                  SERIAL_PROTOCOLLNPGM(" mesh slots available.");
   \   00000018   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001C   0x.... 0x....      ADR.W    R0,`?<Constant " mesh slots available.\\n">`
   \   00000020   0x.... 0x....      B.W      _Z14serialprintPGMPKc
   1424                }
   1425              #endif
   1426          

   \                                 In section .text, align 2, keep-with-next
   1427              uint16_t MarlinSettings::calc_num_meshes() {
   \                     _ZN14MarlinSettings15calc_num_meshesEv: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable105
   \   00000004   0xF9B0 0x0002      LDRSH    R0,[R0, #+2]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xDA01             BGE.N    ??calc_num_meshes_0
   1428                //obviously this will get more sophisticated once we've added an actual MAT
   1429          
   1430                if (meshes_begin <= 0) return 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x4770             BX       LR
   1431          
   1432                return (meshes_end - meshes_begin) / sizeof(ubl.z_values);
   \                     ??calc_num_meshes_0: (+1)
   \   00000010   0xF5C0 0x60F0      RSB      R0,R0,#+1920
   \   00000014   0xF44F 0x7110      MOV      R1,#+576
   \   00000018   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000001C   0xB280             UXTH     R0,R0
   \   0000001E   0x4770             BX       LR               ;; return
   1433              }
   1434          

   \                                 In section .text, align 2, keep-with-next
   1435              void MarlinSettings::store_mesh(const int8_t slot) {
   \                     _ZN14MarlinSettings10store_meshEa: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   1436          
   1437                //#if ENABLED(AUTO_BED_LEVELING_UBL)
   1438                if(BED_LEVELING_METHOD & AUTO_BED_LEVELING_UBL){
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable104_6
   \   0000000A   0xF890 0x0042      LDRB     R0,[R0, #+66]
   \   0000000E   0xB082             SUB      SP,SP,#+8
   \   00000010   0x06C0             LSLS     R0,R0,#+27
   \   00000012   0xF140 0x807F      BPL.W    ??store_mesh_0
   1439                  const uint16_t a = calc_num_meshes();
   \   00000016   0x.... 0x....      LDR.W    R5,??DataTable104_7
   \   0000001A   0xF9B5 0x0002      LDRSH    R0,[R5, #+2]
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xBFB1             ITEEE    LT 
   \   00000022   0x2000             MOVLT    R0,#+0
   \   00000024   0xF5C0 0x60F0      RSBGE    R0,R0,#+1920
   \   00000028   0xF44F 0x7110      MOVGE    R1,#+576
   \   0000002C   0xFBB0 0xF0F1      UDIVGE   R0,R0,R1
   \   00000030   0xB280             UXTH     R0,R0
   1440                  if (!WITHIN(slot, 0, a - 1)) {
   \   00000032   0x2C00             CMP      R4,#+0
   \   00000034   0xD402             BMI.N    ??store_mesh_1
   \   00000036   0x1E41             SUBS     R1,R0,#+1
   \   00000038   0x42A1             CMP      R1,R4
   \   0000003A   0xDA1B             BGE.N    ??store_mesh_2
   1441                    #if ENABLED(EEPROM_CHITCHAT)
   1442                      ubl_invalid_slot(a);
   \                     ??store_mesh_1: (+1)
   \   0000003C   0x.... 0x....      BL       _Z16ubl_invalid_sloti
   1443                      SERIAL_PROTOCOLPAIR("E2END=", E2END);
   \   00000040   0xF44F 0x6100      MOV      R1,#+2048
   \   00000044   0x.... 0x....      ADR.W    R0,`?<Constant "E2END=">`
   \   00000048   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   1444                      SERIAL_PROTOCOLPAIR(" meshes_end=", meshes_end);
   \   0000004C   0x.... 0x....      ADR.W    R0,`?<Constant " meshes_end=">`
   \   00000050   0xF44F 0x61F0      MOV      R1,#+1920
   \   00000054   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   1445                      SERIAL_PROTOCOLLNPAIR(" slot=", slot);
   \   00000058   0x4621             MOV      R1,R4
   \   0000005A   0x.... 0x....      ADR.W    R0,`?<Constant " slot=">`
   \   0000005E   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   00000062   0x.... 0x....      LDR.W    R4,??DataTable104_3
   \   00000066   0x210A             MOVS     R1,#+10
   \   00000068   0x4620             MOV      R0,R4
   \   0000006A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1446                      SERIAL_EOL();
   \   0000006E   0x210A             MOVS     R1,#+10
   \   00000070   0x4620             MOV      R0,R4
   \   00000072   0xE04D             B.N      ??store_mesh_3
   1447                    #endif
   1448                    return;
   1449                  }
   1450          
   1451                  uint16_t crc = 0;
   \                     ??store_mesh_2: (+1)
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0xF8AD 0x0002      STRH     R0,[SP, #+2]
   1452                  int pos = meshes_end - (slot + 1) * sizeof(ubl.z_values);
   1453          
   1454                  write_data(pos, (uint8_t *)&ubl.z_values, sizeof(ubl.z_values), &crc);
   \   0000007A   0xF44F 0x7710      MOV      R7,#+576
   \   0000007E   0x1C60             ADDS     R0,R4,#+1
   \   00000080   0xEB00 0x01C0      ADD      R1,R0,R0, LSL #+3
   \   00000084   0x0188             LSLS     R0,R1,#+6
   \   00000086   0xF5C0 0x66F0      RSB      R6,R0,#+1920
   \   0000008A   0x7828             LDRB     R0,[R5, #+0]
   \   0000008C   0x.... 0x....      LDR.W    R8,??DataTable104_8
   \   00000090   0xBBB8             CBNZ.N   R0,??store_mesh_4
   \                     ??store_mesh_5: (+1)
   \   00000092   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   00000096   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000009A   0x1E7F             SUBS     R7,R7,#+1
   \   0000009C   0x2201             MOVS     R2,#+1
   \   0000009E   0xF10D 0x0101      ADD      R1,SP,#+1
   \   000000A2   0xB2B0             UXTH     R0,R6
   \   000000A4   0x.... 0x....      BL       AT24CXX_Read
   \   000000A8   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000AC   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   000000B0   0x4288             CMP      R0,R1
   \   000000B2   0xD010             BEQ.N    ??store_mesh_6
   \   000000B4   0x2201             MOVS     R2,#+1
   \   000000B6   0xA900             ADD      R1,SP,#+0
   \   000000B8   0xB2B0             UXTH     R0,R6
   \   000000BA   0x.... 0x....      BL       AT24CXX_Write
   \   000000BE   0x2201             MOVS     R2,#+1
   \   000000C0   0xF10D 0x0101      ADD      R1,SP,#+1
   \   000000C4   0xB2B0             UXTH     R0,R6
   \   000000C6   0x.... 0x....      BL       AT24CXX_Read
   \   000000CA   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000CE   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000D2   0x4288             CMP      R0,R1
   \   000000D4   0xD10C             BNE.N    ??store_mesh_7
   \                     ??store_mesh_6: (+1)
   \   000000D6   0x2201             MOVS     R2,#+1
   \   000000D8   0xA900             ADD      R1,SP,#+0
   \   000000DA   0xF10D 0x0002      ADD      R0,SP,#+2
   \   000000DE   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   000000E2   0x1C76             ADDS     R6,R6,#+1
   \   000000E4   0xB2BF             UXTH     R7,R7
   \   000000E6   0xF108 0x0801      ADD      R8,R8,#+1
   \   000000EA   0x2F00             CMP      R7,#+0
   \   000000EC   0xD1D1             BNE.N    ??store_mesh_5
   \   000000EE   0xE008             B.N      ??store_mesh_4
   \                     ??store_mesh_7: (+1)
   \   000000F0   0x....             LDR.N    R0,??DataTable104_4
   \   000000F2   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   000000F6   0x.... 0x....      ADR.W    R0,`?<Constant "Error writing to EEPR...">`
   \   000000FA   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   000000FE   0x2001             MOVS     R0,#+1
   \   00000100   0x7028             STRB     R0,[R5, #+0]
   1455          
   1456                  // Write crc to MAT along with other data, or just tack on to the beginning or end
   1457          
   1458                  #if ENABLED(EEPROM_CHITCHAT)
   1459                    SERIAL_PROTOCOLLNPAIR("Mesh saved in slot ", slot);
   \                     ??store_mesh_4: (+1)
   \   00000102   0x4621             MOV      R1,R4
   \   00000104   0x.... 0x....      ADR.W    R0,`?<Constant "Mesh saved in slot ">`
   \   00000108   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   0000010C   0x....             LDR.N    R0,??DataTable104_3
   \   0000010E   0x210A             MOVS     R1,#+10
   \                     ??store_mesh_3: (+1)
   \   00000110   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1460                  #endif
   1461                  }
   1462                //#else\
   1463                else
   1464                 {}
   1465                  // Other mesh types
   1466          
   1467                //#endif
   1468              }
   \                     ??store_mesh_0: (+1)
   \   00000114   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
   1469          

   \                                 In section .text, align 2, keep-with-next
   1470              void MarlinSettings::load_mesh(const int8_t slot, void * const into/*=NULL*/) {
   \                     _ZN14MarlinSettings9load_meshEaPv: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   1471          
   1472                //#if ENABLED(AUTO_BED_LEVELING_UBL)
   1473                if(BED_LEVELING_METHOD & AUTO_BED_LEVELING_UBL){
   \   00000004   0x....             LDR.N    R0,??DataTable104_6
   \   00000006   0xF890 0x0042      LDRB     R0,[R0, #+66]
   \   0000000A   0x460D             MOV      R5,R1
   \   0000000C   0x06C0             LSLS     R0,R0,#+27
   \   0000000E   0xD53E             BPL.N    ??load_mesh_0
   1474          
   1475                  const uint16_t a = settings.calc_num_meshes();
   \   00000010   0x....             LDR.N    R1,??DataTable104_7
   \   00000012   0xF9B1 0x0002      LDRSH    R0,[R1, #+2]
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xBFB1             ITEEE    LT 
   \   0000001A   0x2000             MOVLT    R0,#+0
   \   0000001C   0xF5C0 0x60F0      RSBGE    R0,R0,#+1920
   \   00000020   0xF44F 0x7210      MOVGE    R2,#+576
   \   00000024   0xFBB0 0xF0F2      UDIVGE   R0,R0,R2
   \   00000028   0xB280             UXTH     R0,R0
   1476          
   1477                  if (!WITHIN(slot, 0, a - 1)) {
   \   0000002A   0x2C00             CMP      R4,#+0
   \   0000002C   0xD402             BMI.N    ??load_mesh_1
   \   0000002E   0x1E42             SUBS     R2,R0,#+1
   \   00000030   0x42A2             CMP      R2,R4
   \   00000032   0xDA02             BGE.N    ??load_mesh_2
   1478                    #if ENABLED(EEPROM_CHITCHAT)
   1479                      ubl_invalid_slot(a);
   \                     ??load_mesh_1: (+1)
   \   00000034   0x.... 0x....      BL       _Z16ubl_invalid_sloti
   1480                    #endif
   1481                    return;
   \   00000038   0xBDF1             POP      {R0,R4-R7,PC}
   1482                  }
   1483          
   1484                  uint16_t crc = 0;
   \                     ??load_mesh_2: (+1)
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xF8AD 0x0002      STRH     R0,[SP, #+2]
   1485                  int pos = meshes_end - (slot + 1) * sizeof(ubl.z_values);
   \   00000040   0x1C60             ADDS     R0,R4,#+1
   \   00000042   0xEB00 0x02C0      ADD      R2,R0,R0, LSL #+3
   \   00000046   0x0190             LSLS     R0,R2,#+6
   \   00000048   0xF5C0 0x66F0      RSB      R6,R0,#+1920
   1486                  uint8_t * const dest = into ? (uint8_t*)into : (uint8_t*)&ubl.z_values;
   \   0000004C   0xB905             CBNZ.N   R5,??load_mesh_3
   \   0000004E   0x....             LDR.N    R5,??DataTable104_8
   1487                  read_data(pos, dest, sizeof(ubl.z_values), &crc);
   \                     ??load_mesh_3: (+1)
   \   00000050   0x7808             LDRB     R0,[R1, #+0]
   \   00000052   0xF44F 0x7710      MOV      R7,#+576
   \   00000056   0xB988             CBNZ.N   R0,??load_mesh_4
   \                     ??load_mesh_5: (+1)
   \   00000058   0x2201             MOVS     R2,#+1
   \   0000005A   0xA900             ADD      R1,SP,#+0
   \   0000005C   0xB2B0             UXTH     R0,R6
   \   0000005E   0x.... 0x....      BL       AT24CXX_Read
   \   00000062   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000066   0xF805 0x0B01      STRB     R0,[R5], #+1
   \   0000006A   0x2201             MOVS     R2,#+1
   \   0000006C   0xA900             ADD      R1,SP,#+0
   \   0000006E   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000072   0x.... 0x....      BL       _Z5crc16PtPKvt
   \   00000076   0x1C76             ADDS     R6,R6,#+1
   \   00000078   0x1E7F             SUBS     R7,R7,#+1
   \   0000007A   0xD1ED             BNE.N    ??load_mesh_5
   1488          
   1489                  // Compare crc with crc from MAT, or read from end
   1490          
   1491                  #if ENABLED(EEPROM_CHITCHAT)
   1492                    SERIAL_PROTOCOLLNPAIR("Mesh loaded from slot ", slot);
   \                     ??load_mesh_4: (+1)
   \   0000007C   0x4621             MOV      R1,R4
   \   0000007E   0x.... 0x....      ADR.W    R0,`?<Constant "Mesh loaded from slot ">`
   \   00000082   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   00000086   0x....             LDR.N    R0,??DataTable104_3
   \   00000088   0x210A             MOVS     R1,#+10
   \   0000008A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1493                  #endif
   1494                }
   1495                //#else
   1496                else
   1497                {
   1498                  // Other mesh types
   1499                }
   1500                //#endif
   1501              }
   \                     ??load_mesh_0: (+1)
   \   0000008E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   1502          
   1503              //void MarlinSettings::delete_mesh() { return; }
   1504              //void MarlinSettings::defrag_meshes() { return; }
   1505          
   1506            #endif // AUTO_BED_LEVELING_UBL
   1507          
   1508          #else // !EEPROM_SETTINGS
   1509          
   1510            bool MarlinSettings::save() {
   1511              SERIAL_ERROR_START();
   1512              SERIAL_ERRORLNPGM("EEPROM disabled");
   1513              return false;
   1514            }
   1515          
   1516          #endif // !EEPROM_SETTINGS
   1517          
   1518          /**
   1519           * M502 - Reset Configuration
   1520           */

   \                                 In section .text, align 2, keep-with-next
   1521          void MarlinSettings::reset() {
   \                     _ZN14MarlinSettings5resetEv: (+1)
   \   00000000   0xE92D 0x42F0      PUSH     {R4-R7,R9,LR}
   1522            static const float tmp1[] PROGMEM = DEFAULT_AXIS_STEPS_PER_UNIT, tmp2[] PROGMEM = DEFAULT_MAX_FEEDRATE;
   1523            static const uint32_t tmp3[] PROGMEM = DEFAULT_MAX_ACCELERATION;
   1524            LOOP_XYZE_N(i) {
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable105_6
   1525              planner.axis_steps_per_mm[i]          = tmp1[i < COUNT(tmp1) ? i : COUNT(tmp1) - 1];//pgm_read_float(&tmp1[i < COUNT(tmp1) ? i : COUNT(tmp1) - 1]);
   \   00000008   0x.... 0x....      LDR.W    R3,??DataTable105_7  ;; 0x42a13333
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable105_8
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable105_9
   1526              planner.max_feedrate_mm_s[i]          = tmp2[i < COUNT(tmp2) ? i : COUNT(tmp2) - 1];//pgm_read_float(&tmp2[i < COUNT(tmp2) ? i : COUNT(tmp2) - 1]);
   1527              planner.max_acceleration_mm_per_s2[i] = tmp3[i < COUNT(tmp3) ? i : COUNT(tmp3) - 1];//pgm_read_dword_near(&tmp3[i < COUNT(tmp3) ? i : COUNT(tmp3) - 1]);
   \   00000014   0x.... 0x....      LDR.W    R5,??DataTable105_10  ;; 0x42a0cccd
   \   00000018   0x6013             STR      R3,[R2, #+0]
   \   0000001A   0x6055             STR      R5,[R2, #+4]
   \   0000001C   0xB08E             SUB      SP,SP,#+56
   \   0000001E   0x.... 0x....      LDR.W    R3,??DataTable105_11  ;; 0x43480000
   \   00000022   0x600B             STR      R3,[R1, #+0]
   \   00000024   0x604B             STR      R3,[R1, #+4]
   \   00000026   0xF44F 0x747A      MOV      R4,#+1000
   \   0000002A   0x.... 0x....      LDR.W    R3,??DataTable105_12  ;; 0x43c80000
   \   0000002E   0x.... 0x....      LDR.W    R5,??DataTable105_13  ;; 0x428c0000
   \   00000032   0x6093             STR      R3,[R2, #+8]
   \   00000034   0x60CD             STR      R5,[R1, #+12]
   \   00000036   0xF04F 0x4381      MOV      R3,#+1082130432
   \   0000003A   0x608B             STR      R3,[R1, #+8]
   \   0000003C   0x610D             STR      R5,[R1, #+16]
   \   0000003E   0x2364             MOVS     R3,#+100
   \   00000040   0x6004             STR      R4,[R0, #+0]
   \   00000042   0x6044             STR      R4,[R0, #+4]
   \   00000044   0x6083             STR      R3,[R0, #+8]
   \   00000046   0x60C4             STR      R4,[R0, #+12]
   \   00000048   0x6104             STR      R4,[R0, #+16]
   1528            }
   1529          
   1530            planner.acceleration = DEFAULT_ACCELERATION;
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable105_14
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable105_15  ;; 0x447a0000
   \   00000052   0x.... 0x....      LDR.W    R3,??DataTable105_16  ;; 0x42b40000
   1531            planner.retract_acceleration = DEFAULT_RETRACT_ACCELERATION;
   1532            planner.travel_acceleration = DEFAULT_TRAVEL_ACCELERATION;
   1533            planner.min_feedrate_mm_s = DEFAULT_MINIMUMFEEDRATE;
   1534            planner.min_travel_feedrate_mm_s = DEFAULT_MINTRAVELFEEDRATE;
   1535            planner.min_segment_time_us = DEFAULT_MINSEGMENTTIME;
   1536            planner.max_jerk[X_AXIS] = DEFAULT_XJERK;
   \   00000056   0x.... 0x....      LDR.W    R4,??DataTable105_17  ;; 0x41200000
   \   0000005A   0x6008             STR      R0,[R1, #+0]
   \   0000005C   0x60D3             STR      R3,[R2, #+12]
   \   0000005E   0x6113             STR      R3,[R2, #+16]
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable105_18
   \   00000064   0x6008             STR      R0,[R1, #+0]
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable105_19
   \   0000006A   0x6008             STR      R0,[R1, #+0]
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable105_20
   \   00000072   0x6008             STR      R0,[R1, #+0]
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable105_21
   \   00000078   0x6008             STR      R0,[R1, #+0]
   \   0000007A   0xF644 0x6020      MOVW     R0,#+20000
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable105_22
   \   00000082   0x6008             STR      R0,[R1, #+0]
   1537            planner.max_jerk[Y_AXIS] = DEFAULT_YJERK;
   1538            planner.max_jerk[Z_AXIS] = DEFAULT_ZJERK;
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable105_23  ;; 0x3e99999a
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable105_24
   \   0000008C   0x6081             STR      R1,[R0, #+8]
   \   0000008E   0x6004             STR      R4,[R0, #+0]
   \   00000090   0x6044             STR      R4,[R0, #+4]
   1539            planner.max_jerk[E_AXIS] = DEFAULT_EJERK;
   \   00000092   0x.... 0x....      LDR.W    R1,??DataTable105_25  ;; 0x40a00000
   \   00000096   0x60C1             STR      R1,[R0, #+12]
   1540          
   1541            #if HAS_HOME_OFFSET
   1542              ZERO(home_offset);
   \   00000098   0x210C             MOVS     R1,#+12
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable105_26
   \   0000009E   0x.... 0x....      BL       __aeabi_memclr4
   1543            #endif
   1544          
   1545            #if HOTENDS > 1
   1546              constexpr float tmp4[XYZ][HOTENDS] = {
   1547                HOTEND_OFFSET_X,
   1548                HOTEND_OFFSET_Y
   1549                #ifdef HOTEND_OFFSET_Z
   1550                  , HOTEND_OFFSET_Z
   1551                #else
   1552                  , { 0 }
   1553                #endif
   1554              };
   \   000000A2   0xA806             ADD      R0,SP,#+24
   \   000000A4   0x2100             MOVS     R1,#+0
   \   000000A6   0x2200             MOVS     R2,#+0
   \   000000A8   0x460B             MOV      R3,R1
   \   000000AA   0xC00E             STM      R0!,{R1-R3}
   \   000000AC   0xC00E             STM      R0!,{R1-R3}
   \   000000AE   0x....             LDR.N    R5,??DataTable104_6
   \   000000B0   0xF8D5 0x10F8      LDR      R1,[R5, #+248]
   1555            #if 0
   1556              static_assert(
   1557                tmp4[X_AXIS][0] == 0 && tmp4[Y_AXIS][0] == 0 && tmp4[Z_AXIS][0] == 0,
   1558                "Offsets for the first hotend must be 0.0."
   1559              );
   1560            #endif
   1561              LOOP_XYZ(i) HOTEND_LOOP() hotend_offset[i][e] = tmp4[i][e];
   \   000000B4   0xF895 0x30F7      LDRB     R3,[R5, #+247]
   \   000000B8   0xA806             ADD      R0,SP,#+24
   \   000000BA   0xF105 0x07F8      ADD      R7,R5,#+248
   \   000000BE   0x6041             STR      R1,[R0, #+4]
   \   000000C0   0x2203             MOVS     R2,#+3
   \   000000C2   0x6879             LDR      R1,[R7, #+4]
   \   000000C4   0x60C1             STR      R1,[R0, #+12]
   \   000000C6   0xA906             ADD      R1,SP,#+24
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable105_27
   \                     ??reset_0: (+1)
   \   000000CC   0xF04F 0x0C00      MOV      R12,#+0
   \   000000D0   0xE007             B.N      ??reset_1
   \                     ??reset_2: (+1)
   \   000000D2   0xF851 0x602C      LDR      R6,[R1, R12, LSL #+2]
   \   000000D6   0xF840 0x602C      STR      R6,[R0, R12, LSL #+2]
   \   000000DA   0xF10C 0x0601      ADD      R6,R12,#+1
   \   000000DE   0xFA4F 0xFC86      SXTB     R12,R6
   \                     ??reset_1: (+1)
   \   000000E2   0x459C             CMP      R12,R3
   \   000000E4   0xDBF5             BLT.N    ??reset_2
   \   000000E6   0x3108             ADDS     R1,R1,#+8
   \   000000E8   0x3008             ADDS     R0,R0,#+8
   \   000000EA   0x1E52             SUBS     R2,R2,#+1
   \   000000EC   0xD1EE             BNE.N    ??reset_0
   1562            #endif
   1563          
   1564            //
   1565            // Global Leveling
   1566            //
   1567          
   1568            //#if ENABLED(ENABLE_LEVELING_FADE_HEIGHT)
   1569            if((MACHINETPYE != DELTA) && (BED_LEVELING_METHOD&HAS_FADE))
   \   000000EE   0xF105 0x0950      ADD      R9,R5,#+80
   \   000000F2   0xF205 0x0636      ADDW     R6,R5,#+54
   \   000000F6   0xF9B9 0x1008      LDRSH    R1,[R9, #+8]
   \   000000FA   0x7B30             LDRB     R0,[R6, #+12]
   \   000000FC   0x2902             CMP      R1,#+2
   \   000000FE   0xD004             BEQ.N    ??reset_3
   \   00000100   0x06C1             LSLS     R1,R0,#+27
   \   00000102   0xD502             BPL.N    ??reset_3
   1570              new_z_fade_height = 0.0;
   \   00000104   0x....             LDR.N    R2,??DataTable104_7
   \   00000106   0x2100             MOVS     R1,#+0
   \   00000108   0x6051             STR      R1,[R2, #+4]
   1571            //#endif
   1572          
   1573            //#if HAS_LEVELING
   1574            if(BED_LEVELING_METHOD&HAS_LEVELING)
   \                     ??reset_3: (+1)
   \   0000010A   0x213E             MOVS     R1,#+62
   \   0000010C   0x4208             TST      R0,R1
   \   0000010E   0xBF18             IT       NE 
   1575              reset_bed_level();
   \   00000110   0x.... 0x....      BLNE     _Z15reset_bed_levelv
   1576            //#endif
   1577          
   1578            #if HAS_BED_PROBE
   1579              zprobe_zoffset = Z_PROBE_OFFSET_FROM_EXTRUDER;
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable105_28
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable105_29  ;; 0x3f4ccccd
   \   0000011C   0x6008             STR      R0,[R1, #+0]
   1580            #endif
   1581          
   1582            //#if ENABLED(DELTA)
   1583            if(MACHINETPYE == DELTA) {
   \   0000011E   0xF9B9 0x0008      LDRSH    R0,[R9, #+8]
   \   00000122   0x2802             CMP      R0,#+2
   \   00000124   0xD124             BNE.N    ??reset_4
   1584              const float adj[ABC] = DELTA_ENDSTOP_ADJ,
   \   00000126   0xA803             ADD      R0,SP,#+12
   \   00000128   0x2100             MOVS     R1,#+0
   \   0000012A   0x2200             MOVS     R2,#+0
   \   0000012C   0x460B             MOV      R3,R1
   \   0000012E   0xC00E             STM      R0!,{R1-R3}
   1585                          dta[ABC] = DELTA_TOWER_ANGLE_TRIM;
   \   00000130   0xA800             ADD      R0,SP,#+0
   \   00000132   0xC00E             STM      R0!,{R1-R3}
   1586              delta_height = DELTA_HEIGHT;
   \   00000134   0x6D28             LDR      R0,[R5, #+80]
   \   00000136   0x.... 0x....      LDR.W    R1,??DataTable105_30
   \   0000013A   0x6008             STR      R0,[R1, #+0]
   1587              COPY(delta_endstop_adj, adj);
   \   0000013C   0x220C             MOVS     R2,#+12
   \   0000013E   0xA903             ADD      R1,SP,#+12
   \   00000140   0x.... 0x....      LDR.W    R0,??DataTable105_31
   \   00000144   0x.... 0x....      BL       __aeabi_memcpy4
   1588              delta_radius = DELTA_RADIUS;
   \   00000148   0x.... 0x....      LDR.W    R1,??DataTable105_32
   \   0000014C   0x2000             MOVS     R0,#+0
   \   0000014E   0x6008             STR      R0,[R1, #+0]
   1589              delta_diagonal_rod = DELTA_DIAGONAL_ROD;
   1590              delta_segments_per_second = DELTA_SEGMENTS_PER_SECOND;
   1591              delta_calibration_radius = DELTA_CALIBRATION_RADIUS;
   1592              COPY(delta_tower_angle_trim, dta);
   \   00000150   0x220C             MOVS     R2,#+12
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable105_33
   \   00000156   0x6008             STR      R0,[R1, #+0]
   \   00000158   0x.... 0x....      LDR.W    R1,??DataTable105_34
   \   0000015C   0x6008             STR      R0,[R1, #+0]
   \   0000015E   0x.... 0x....      LDR.W    R1,??DataTable105_35
   \   00000162   0x6008             STR      R0,[R1, #+0]
   \   00000164   0xA900             ADD      R1,SP,#+0
   \   00000166   0x.... 0x....      LDR.W    R0,??DataTable105_36
   \   0000016A   0x.... 0x....      BL       __aeabi_memcpy4
   1593            }
   \   0000016E   0xE006             B.N      ??reset_5
   1594            else
   1595            {
   1596           // #if ENABLED(X_DUAL_ENDSTOPS) || ENABLED(Y_DUAL_ENDSTOPS) || ENABLED(Z_DUAL_ENDSTOPS)
   1597          
   1598              #if ENABLED(X_DUAL_ENDSTOPS)
   1599                x_endstop_adj = (
   1600                  #ifdef X_DUAL_ENDSTOPS_ADJUSTMENT
   1601                    X_DUAL_ENDSTOPS_ADJUSTMENT
   1602                  #else
   1603                    0
   1604                  #endif
   1605                );
   1606              #endif
   1607              #if ENABLED(Y_DUAL_ENDSTOPS)
   1608                y_endstop_adj = (
   1609                  #ifdef Y_DUAL_ENDSTOPS_ADJUSTMENT
   1610                    Y_DUAL_ENDSTOPS_ADJUSTMENT
   1611                  #else
   1612                    0
   1613                  #endif
   1614                );
   1615              #endif
   1616              #if 0//ENABLED(Z_DUAL_ENDSTOPS)
   1617                z_endstop_adj = (
   1618                  #ifdef Z_DUAL_ENDSTOPS_ADJUSTMENT
   1619                    Z_DUAL_ENDSTOPS_ADJUSTMENT
   1620                  #else
   1621                    0
   1622                  #endif
   1623                );
   1624              #endif
   1625              if(Z_DUAL_ENDSTOPS==1)
   \                     ??reset_4: (+1)
   \   00000170   0x7AB8             LDRB     R0,[R7, #+10]
   \   00000172   0x2801             CMP      R0,#+1
   \   00000174   0xD103             BNE.N    ??reset_5
   1626              {
   1627                 if(Z_DUAL_ENDSTOPS_ADJUSTMENT!=0)
   1628                  z_endstop_adj =  Z_DUAL_ENDSTOPS_ADJUSTMENT;
   1629                 else
   1630                  z_endstop_adj =  0;
   \   00000176   0x.... 0x....      LDR.W    R1,??DataTable105_37
   \   0000017A   0x2000             MOVS     R0,#+0
   \   0000017C   0x6008             STR      R0,[R1, #+0]
   1631              }
   1632            //#endif
   1633            }
   1634          
   1635            #if ENABLED(ULTIPANEL)
   1636              lcd_preheat_hotend_temp[0] = PREHEAT_1_TEMP_HOTEND;
   1637              lcd_preheat_hotend_temp[1] = PREHEAT_2_TEMP_HOTEND;
   1638              lcd_preheat_bed_temp[0] = PREHEAT_1_TEMP_BED;
   1639              lcd_preheat_bed_temp[1] = PREHEAT_2_TEMP_BED;
   1640              lcd_preheat_fan_speed[0] = PREHEAT_1_FAN_SPEED;
   1641              lcd_preheat_fan_speed[1] = PREHEAT_2_FAN_SPEED;
   1642            #endif
   1643          
   1644            //#if ENABLED(PIDTEMP)
   1645            if(PIDTEMP) {
   \                     ??reset_5: (+1)
   \   0000017E   0xF895 0x0036      LDRB     R0,[R5, #+54]
   \   00000182   0xB170             CBZ.N    R0,??reset_6
   1646              #if ENABLED(PID_PARAMS_PER_HOTEND) && HOTENDS > 1
   1647                HOTEND_LOOP()
   1648              #endif
   1649              {
   1650                PID_PARAM(Kp, e) = DEFAULT_Kp;
   \   00000184   0x.... 0x....      LDR.W    R1,??DataTable105_38
   \   00000188   0x.... 0x....      LDR.W    R0,??DataTable105_39  ;; 0x41b1999a
   \   0000018C   0x6008             STR      R0,[R1, #+0]
   1651                PID_PARAM(Ki, e) = scalePID_i(DEFAULT_Ki);
   \   0000018E   0x.... 0x....      LDR.W    R1,??DataTable105_40
   \   00000192   0x.... 0x....      LDR.W    R0,??DataTable105_41  ;; 0x3e3531a6
   \   00000196   0x6008             STR      R0,[R1, #+0]
   1652                PID_PARAM(Kd, e) = scalePID_d(DEFAULT_Kd);
   \   00000198   0x.... 0x....      LDR.W    R1,??DataTable105_42
   \   0000019C   0x.... 0x....      LDR.W    R0,??DataTable105_43  ;; 0x442df340
   \   000001A0   0x6008             STR      R0,[R1, #+0]
   1653                #if ENABLED(PID_EXTRUSION_SCALING)
   1654                  PID_PARAM(Kc, e) = DEFAULT_Kc;
   1655                #endif
   1656              }
   1657              #if ENABLED(PID_EXTRUSION_SCALING)
   1658                lpq_len = 20; // default last-position-queue size
   1659              #endif
   1660            }
   1661            //#endif // PIDTEMP
   1662          
   1663            //#if ENABLED(PIDTEMPBED)
   1664            if(PIDTEMPBED) {
   \                     ??reset_6: (+1)
   \   000001A2   0x7870             LDRB     R0,[R6, #+1]
   \   000001A4   0xB148             CBZ.N    R0,??reset_7
   1665              thermalManager.bedKp = DEFAULT_bedKp;
   \   000001A6   0x....             LDR.N    R0,??DataTable104
   1666              thermalManager.bedKi = scalePID_i(DEFAULT_bedKi);
   \   000001A8   0x....             LDR.N    R1,??DataTable104_1
   \   000001AA   0x6004             STR      R4,[R0, #+0]
   \   000001AC   0x.... 0x....      LDR.W    R0,??DataTable105_44  ;; 0x3b76f5eb
   \   000001B0   0x6008             STR      R0,[R1, #+0]
   1667              thermalManager.bedKd = scalePID_d(DEFAULT_bedKd);
   \   000001B2   0x....             LDR.N    R1,??DataTable104_2
   \   000001B4   0x.... 0x....      LDR.W    R0,??DataTable105_45  ;; 0x44e90070
   \   000001B8   0x6008             STR      R0,[R1, #+0]
   1668            }
   1669            //#endif
   1670          
   1671            #if HAS_LCD_CONTRAST
   1672              lcd_contrast = DEFAULT_LCD_CONTRAST;
   1673            #endif
   1674          
   1675            #if ENABLED(FWRETRACT)
   1676              autoretract_enabled = false;
   1677              retract_length = RETRACT_LENGTH;
   1678              retract_feedrate_mm_s = RETRACT_FEEDRATE;
   1679              retract_zlift = RETRACT_ZLIFT;
   1680              retract_recover_length = RETRACT_RECOVER_LENGTH;
   1681              retract_recover_feedrate_mm_s = RETRACT_RECOVER_FEEDRATE;
   1682              swap_retract_length = RETRACT_LENGTH_SWAP;
   1683              swap_retract_recover_length = RETRACT_RECOVER_LENGTH_SWAP;
   1684              swap_retract_recover_feedrate_mm_s = RETRACT_RECOVER_FEEDRATE_SWAP;
   1685            #endif // FWRETRACT
   1686          
   1687            #if DISABLED(NO_VOLUMETRICS)
   1688          
   1689              parser.volumetric_enabled =
   1690                #if ENABLED(VOLUMETRIC_DEFAULT_ON)
   1691                  true
   1692                #else
   1693                  false
   1694                #endif
   1695              ;
   \                     ??reset_7: (+1)
   \   000001BA   0x2000             MOVS     R0,#+0
   \   000001BC   0x.... 0x....      LDR.W    R1,??DataTable105_46
   \   000001C0   0x7008             STRB     R0,[R1, #+0]
   1696              for (uint8_t q = 0; q < COUNT(planner.filament_size); q++)
   \   000001C2   0x.... 0x....      LDR.W    R1,??DataTable105_47  ;; 0x40400000
   \   000001C6   0x.... 0x....      LDR.W    R0,??DataTable105_48
   1697                planner.filament_size[q] = DEFAULT_NOMINAL_FILAMENT_DIA;
   \   000001CA   0x6001             STR      R1,[R0, #+0]
   \   000001CC   0x6041             STR      R1,[R0, #+4]
   1698          
   1699            #endif
   1700          
   1701            endstops.enable_globally(
   1702              #if ENABLED(ENDSTOPS_ALWAYS_ON_DEFAULT)
   1703                true
   1704              #else
   1705                false
   1706              #endif
   1707            );
   \   000001CE   0x2000             MOVS     R0,#+0
   \   000001D0   0x.... 0x....      LDR.W    R1,??DataTable105_49
   \   000001D4   0x7008             STRB     R0,[R1, #+0]
   \   000001D6   0x.... 0x....      LDR.W    R1,??DataTable105_50
   \   000001DA   0x7008             STRB     R0,[R1, #+0]
   1708          
   1709            #if X_IS_TRINAMIC
   1710              stepperX.setCurrent(X_CURRENT, R_SENSE, HOLD_MULTIPLIER);
   1711            #endif
   1712            #if Y_IS_TRINAMIC
   1713              stepperY.setCurrent(Y_CURRENT, R_SENSE, HOLD_MULTIPLIER);
   1714            #endif
   1715            #if Z_IS_TRINAMIC
   1716              stepperZ.setCurrent(Z_CURRENT, R_SENSE, HOLD_MULTIPLIER);
   1717            #endif
   1718            #if X2_IS_TRINAMIC
   1719              stepperX2.setCurrent(X2_CURRENT, R_SENSE, HOLD_MULTIPLIER);
   1720            #endif
   1721            #if Y2_IS_TRINAMIC
   1722              stepperY2.setCurrent(Y2_CURRENT, R_SENSE, HOLD_MULTIPLIER);
   1723            #endif
   1724            #if Z2_IS_TRINAMIC
   1725              stepperZ2.setCurrent(Z2_CURRENT, R_SENSE, HOLD_MULTIPLIER);
   1726            #endif
   1727            #if E0_IS_TRINAMIC
   1728              stepperE0.setCurrent(E0_CURRENT, R_SENSE, HOLD_MULTIPLIER);
   1729            #endif
   1730            #if E1_IS_TRINAMIC
   1731              stepperE1.setCurrent(E1_CURRENT, R_SENSE, HOLD_MULTIPLIER);
   1732            #endif
   1733            #if E2_IS_TRINAMIC
   1734              stepperE2.setCurrent(E2_CURRENT, R_SENSE, HOLD_MULTIPLIER);
   1735            #endif
   1736            #if E3_IS_TRINAMIC
   1737              stepperE3.setCurrent(E3_CURRENT, R_SENSE, HOLD_MULTIPLIER);
   1738            #endif
   1739            #if E4_IS_TRINAMIC
   1740              stepperE4.setCurrent(E4_CURRENT, R_SENSE, HOLD_MULTIPLIER);
   1741            #endif
   1742          
   1743            #if ENABLED(SENSORLESS_HOMING)
   1744              #if ENABLED(X_IS_TMC2130)
   1745                stepperX.sgt(X_HOMING_SENSITIVITY);
   1746              #endif
   1747              #if ENABLED(X2_IS_TMC2130)
   1748                stepperX2.sgt(X_HOMING_SENSITIVITY);
   1749              #endif
   1750              #if ENABLED(Y_IS_TMC2130)
   1751                stepperY.sgt(Y_HOMING_SENSITIVITY);
   1752              #endif
   1753              #if ENABLED(Y2_IS_TMC2130)
   1754                stepperY2.sgt(Y_HOMING_SENSITIVITY);
   1755              #endif
   1756            #endif
   1757          
   1758            #if ENABLED(LIN_ADVANCE)
   1759              planner.extruder_advance_k = LIN_ADVANCE_K;
   1760              planner.advance_ed_ratio = LIN_ADVANCE_E_D_RATIO;
   1761            #endif
   1762          
   1763            #if HAS_MOTOR_CURRENT_PWM
   1764              uint32_t tmp_motor_current_setting[3] = PWM_MOTOR_CURRENT;
   1765              for (uint8_t q = 3; q--;)
   1766                stepper.digipot_current(q, (stepper.motor_current_setting[q] = tmp_motor_current_setting[q]));
   1767            #endif
   1768          
   1769            #if ENABLED(SKEW_CORRECTION_GCODE)
   1770              planner.xy_skew_factor = XY_SKEW_FACTOR;
   1771              #if ENABLED(SKEW_CORRECTION_FOR_Z)
   1772                planner.xz_skew_factor = XZ_SKEW_FACTOR;
   1773                planner.yz_skew_factor = YZ_SKEW_FACTOR;
   1774              #endif
   1775            #endif
   1776          
   1777            postprocess();
   \   000001DC   0x.... 0x....      BL       _ZN14MarlinSettings11postprocessEv
   1778          
   1779            #if ENABLED(EEPROM_CHITCHAT)
   1780              SERIAL_ECHO_START();
   \   000001E0   0x....             LDR.N    R0,??DataTable104_4
   \   000001E2   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1781              SERIAL_ECHOLNPGM("Hardcoded Default Settings Loaded");
   \   000001E6   0x.... 0x....      ADR.W    R0,`?<Constant "Hardcoded Default Set...">`
   \   000001EA   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1782            #endif
   1783          }
   \   000001EE   0xB00E             ADD      SP,SP,#+56
   \   000001F0   0xE8BD 0x82F0      POP      {R4-R7,R9,PC}    ;; return

   \                                 In section .rodata, align 4, keep-with-next
   \                     ??tmp1:
   \   00000000   0x42A13333         DC32 42A13333H, 42A0CCCDH, 43C80000H, 42B40000H, 42B40000H
   \              0x42A0CCCD   
   \              0x43C80000   
   \              0x42B40000   
   \              0x42B40000   

   \                                 In section .rodata, align 4, keep-with-next
   \                     ??tmp2:
   \   00000000   0x43480000         DC32 43480000H, 43480000H, 40800000H, 428C0000H, 428C0000H
   \              0x43480000   
   \              0x40800000   
   \              0x428C0000   
   \              0x428C0000   

   \                                 In section .rodata, align 4, keep-with-next
   \                     ??tmp3:
   \   00000000   0x000003E8         DC32 1000, 1000, 100, 1000, 1000
   \              0x000003E8   
   \              0x00000064   
   \              0x000003E8   
   \              0x000003E8   
   1784          
   1785          #if DISABLED(DISABLE_M503)
   1786          
   1787            #define CONFIG_ECHO_START do{ if (!forReplay) SERIAL_ECHO_START(); }while(0)
   1788          
   1789            /**
   1790             * M503 - Report current settings in RAM
   1791             *
   1792             * Unless specifically disabled, M503 is available even without EEPROM
   1793             */

   \                                 In section .text, align 4, keep-with-next
   1794            void MarlinSettings::report(const bool forReplay) {
   \                     _ZN14MarlinSettings6reportEb: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x0004             MOVS     R4,R0
   1795          
   1796              /**
   1797               * Announce current units, in case inches are being displayed
   1798               */
   1799              CONFIG_ECHO_START;
   \   00000008   0x.... 0x....      LDR.W    R8,??DataTable105_51
   \   0000000C   0xBF04             ITT      EQ 
   \   0000000E   0x4640             MOVEQ    R0,R8
   \   00000010   0x.... 0x....      BLEQ     _Z14serialprintPGMPKc
   1800              #if ENABLED(INCH_MODE_SUPPORT)
   1801                #define LINEAR_UNIT(N) (float(N) / parser.linear_unit_factor)
   1802                #define VOLUMETRIC_UNIT(N) (float(N) / (parser.volumetric_enabled ? parser.volumetric_unit_factor : parser.linear_unit_factor))
   1803                SERIAL_ECHOPGM("  G2");
   1804                SERIAL_CHAR(parser.linear_unit_factor == 1.0 ? '1' : '0');
   1805                SERIAL_ECHOPGM(" ; Units in ");
   1806                serialprintPGM(parser.linear_unit_factor == 1.0 ? PSTR("mm\n") : PSTR("inches\n"));
   1807              #else
   1808                #define LINEAR_UNIT(N) (N)
   1809                #define VOLUMETRIC_UNIT(N) (N)
   1810                SERIAL_ECHOLNPGM("  G21    ; Units in mm");
   \   00000014   0x.... 0x....      ADR.W    R0,`?<Constant "  G21    ; Units in mm\\n">`
   \   00000018   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1811              #endif
   1812          
   1813              #if ENABLED(ULTIPANEL)
   1814          
   1815                // Temperature units - for Ultipanel temperature options
   1816          
   1817                CONFIG_ECHO_START;
   1818                #if ENABLED(TEMPERATURE_UNITS_SUPPORT)
   1819                  #define TEMP_UNIT(N) parser.to_temp_units(N)
   1820                  SERIAL_ECHOPGM("  M149 ");
   1821                  SERIAL_CHAR(parser.temp_units_code());
   1822                  SERIAL_ECHOPGM(" ; Units in ");
   1823                  serialprintPGM(parser.temp_units_name());
   1824                #else
   1825                  #define TEMP_UNIT(N) (N)
   1826                  SERIAL_ECHOLNPGM("  M149 C ; Units in Celsius");
   1827                #endif
   1828          
   1829              #endif
   1830          
   1831              SERIAL_EOL();
   \   0000001C   0x.... 0x....      LDR.W    R9,??DataTable105_52
   \   00000020   0x210A             MOVS     R1,#+10
   \   00000022   0x4648             MOV      R0,R9
   \   00000024   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1832          
   1833              #if DISABLED(NO_VOLUMETRICS)
   1834          
   1835                /**
   1836                 * Volumetric extrusion M200
   1837                 */
   1838                if (!forReplay) {
   \   00000028   0xB9B4             CBNZ.N   R4,??report_1
   1839                  CONFIG_ECHO_START;
   \   0000002A   0x4640             MOV      R0,R8
   \   0000002C   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1840                  SERIAL_ECHOPGM("Filament settings:");
   \   00000030   0x.... 0x....      ADR.W    R0,`?<Constant "Filament settings:">`
   \   00000034   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1841                  if (parser.volumetric_enabled)
   \   00000038   0xF8DF 0x0408      LDR.W    R0,??report_0+0x8
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0xB120             CBZ.N    R0,??report_2
   1842                    SERIAL_EOL();
   \   00000040   0x210A             MOVS     R1,#+10
   \   00000042   0x4648             MOV      R0,R9
   \   00000044   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   00000048   0xE003             B.N      ??report_3
   1843                  else
   1844                    SERIAL_ECHOLNPGM(" Disabled");
   \                     ??report_2: (+1)
   \   0000004A   0x.... 0x....      ADR.W    R0,`?<Constant " Disabled\\n">`
   \   0000004E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1845                }
   1846          
   1847                CONFIG_ECHO_START;
   \                     ??report_3: (+1)
   \   00000052   0x4640             MOV      R0,R8
   \   00000054   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1848                SERIAL_ECHOPAIR("  M200 D", LINEAR_UNIT(planner.filament_size[0]));
   \                     ??report_1: (+1)
   \   00000058   0xF8DF 0x73EC      LDR.W    R7,??report_0+0xC
   \   0000005C   0x.... 0x....      ADR.W    R0,`?<Constant "  M200 D">`
   \   00000060   0x6839             LDR      R1,[R7, #+0]
   \   00000062   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   1849                SERIAL_EOL();
   \   00000066   0x210A             MOVS     R1,#+10
   \   00000068   0x4648             MOV      R0,R9
   \   0000006A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1850                #if EXTRUDERS > 1
   1851                  CONFIG_ECHO_START;
   \   0000006E   0xB914             CBNZ.N   R4,??report_4
   \   00000070   0x4640             MOV      R0,R8
   \   00000072   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1852                  SERIAL_ECHOPAIR("  M200 T1 D", LINEAR_UNIT(planner.filament_size[1]));
   \                     ??report_4: (+1)
   \   00000076   0x6879             LDR      R1,[R7, #+4]
   \   00000078   0x.... 0x....      ADR.W    R0,`?<Constant "  M200 T1 D">`
   \   0000007C   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   1853                  SERIAL_EOL();
   \   00000080   0x210A             MOVS     R1,#+10
   \   00000082   0x4648             MOV      R0,R9
   \   00000084   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1854                  #if EXTRUDERS > 2
   1855                    CONFIG_ECHO_START;
   1856                    SERIAL_ECHOPAIR("  M200 T2 D", LINEAR_UNIT(planner.filament_size[2]));
   1857                    SERIAL_EOL();
   1858                    #if EXTRUDERS > 3
   1859                      CONFIG_ECHO_START;
   1860                      SERIAL_ECHOPAIR("  M200 T3 D", LINEAR_UNIT(planner.filament_size[3]));
   1861                      SERIAL_EOL();
   1862                      #if EXTRUDERS > 4
   1863                        CONFIG_ECHO_START;
   1864                        SERIAL_ECHOPAIR("  M200 T4 D", LINEAR_UNIT(planner.filament_size[4]));
   1865                        SERIAL_EOL();
   1866                      #endif // EXTRUDERS > 4
   1867                    #endif // EXTRUDERS > 3
   1868                  #endif // EXTRUDERS > 2
   1869                #endif // EXTRUDERS > 1
   1870          
   1871                if (!parser.volumetric_enabled) {
   \   00000088   0xF8DF 0x03B8      LDR.W    R0,??report_0+0x8
   \   0000008C   0x7800             LDRB     R0,[R0, #+0]
   \   0000008E   0xB938             CBNZ.N   R0,??report_5
   1872                  CONFIG_ECHO_START;
   \   00000090   0xB914             CBNZ.N   R4,??report_6
   \   00000092   0x4640             MOV      R0,R8
   \   00000094   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1873                  SERIAL_ECHOLNPGM("  M200 D0");
   \                     ??report_6: (+1)
   \   00000098   0x.... 0x....      ADR.W    R0,`?<Constant "  M200 D0\\n">`
   \   0000009C   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1874                }
   1875          
   1876              #endif // !NO_VOLUMETRICS
   1877          
   1878              if (!forReplay) {
   \                     ??report_5: (+1)
   \   000000A0   0xB94C             CBNZ.N   R4,??report_7
   1879                CONFIG_ECHO_START;
   \   000000A2   0x4640             MOV      R0,R8
   \   000000A4   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1880                SERIAL_ECHOLNPGM("Steps per unit:");
   \   000000A8   0x.... 0x....      ADR.W    R0,`?<Constant "Steps per unit:\\n">`
   \   000000AC   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1881              }
   1882              CONFIG_ECHO_START;
   \   000000B0   0x4640             MOV      R0,R8
   \   000000B2   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1883              SERIAL_ECHOPAIR("  M92 X", LINEAR_UNIT(planner.axis_steps_per_mm[X_AXIS]));
   \                     ??report_7: (+1)
   \   000000B6   0x.... 0x....      LDR.W    R5,??DataTable105_6
   \   000000BA   0x.... 0x....      ADR.W    R0,`?<Constant "  M92 X">`
   \   000000BE   0x6829             LDR      R1,[R5, #+0]
   \   000000C0   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   1884              SERIAL_ECHOPAIR(" Y", LINEAR_UNIT(planner.axis_steps_per_mm[Y_AXIS]));
   \   000000C4   0x6869             LDR      R1,[R5, #+4]
   \   000000C6   0xF20F 0x3A08      ADR.W    R10,??report_8   ;; 0x20, 0x59, 0x00, 0x00
   \   000000CA   0x4650             MOV      R0,R10
   \   000000CC   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   1885              SERIAL_ECHOPAIR(" Z", LINEAR_UNIT(planner.axis_steps_per_mm[Z_AXIS]));
   \   000000D0   0xA6DA             ADR.N    R6,??report_0    ;; 0x20, 0x5A, 0x00, 0x00
   \   000000D2   0x68A9             LDR      R1,[R5, #+8]
   \   000000D4   0x4630             MOV      R0,R6
   \   000000D6   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   1886              #if DISABLED(DISTINCT_E_FACTORS)
   1887                SERIAL_ECHOPAIR(" E", VOLUMETRIC_UNIT(planner.axis_steps_per_mm[E_AXIS]));
   1888              #endif
   1889              SERIAL_EOL();
   \   000000DA   0x210A             MOVS     R1,#+10
   \   000000DC   0x4648             MOV      R0,R9
   \   000000DE   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1890              #if ENABLED(DISTINCT_E_FACTORS)
   1891                CONFIG_ECHO_START;
   \   000000E2   0xB914             CBNZ.N   R4,??report_9
   \   000000E4   0x4640             MOV      R0,R8
   \   000000E6   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1892                for (uint8_t i = 0; i < E_STEPPERS; i++) {
   \                     ??report_9: (+1)
   \   000000EA   0x.... 0x....      ADR.W    R11,`?<Constant "  M92 T">`
   \   000000EE   0xA7D4             ADR.N    R7,??report_0+0x4  ;; 0x20, 0x45, 0x00, 0x00
   1893                  SERIAL_ECHOPAIR("  M92 T", (int)i);
   \   000000F0   0x2100             MOVS     R1,#+0
   \   000000F2   0x4658             MOV      R0,R11
   \   000000F4   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   1894                  SERIAL_ECHOLNPAIR(" E", VOLUMETRIC_UNIT(planner.axis_steps_per_mm[E_AXIS + i]));
   \   000000F8   0x68E9             LDR      R1,[R5, #+12]
   \   000000FA   0x4638             MOV      R0,R7
   \   000000FC   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   00000100   0x210A             MOVS     R1,#+10
   \   00000102   0x4648             MOV      R0,R9
   \   00000104   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   00000108   0x2101             MOVS     R1,#+1
   \   0000010A   0x4658             MOV      R0,R11
   \   0000010C   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   00000110   0x6929             LDR      R1,[R5, #+16]
   \   00000112   0x4638             MOV      R0,R7
   \   00000114   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   00000118   0x210A             MOVS     R1,#+10
   \   0000011A   0x4648             MOV      R0,R9
   \   0000011C   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1895                }
   1896              #endif
   1897          
   1898              if (!forReplay) {
   \   00000120   0xB94C             CBNZ.N   R4,??report_10
   1899                CONFIG_ECHO_START;
   \   00000122   0x4640             MOV      R0,R8
   \   00000124   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1900                SERIAL_ECHOLNPGM("Maximum feedrates (units/s):");
   \   00000128   0x.... 0x....      ADR.W    R0,`?<Constant "Maximum feedrates (un...">`
   \   0000012C   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1901              }
   1902              CONFIG_ECHO_START;
   \   00000130   0x4640             MOV      R0,R8
   \   00000132   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1903              SERIAL_ECHOPAIR("  M203 X", LINEAR_UNIT(planner.max_feedrate_mm_s[X_AXIS]));
   \                     ??report_10: (+1)
   \   00000136   0x.... 0x....      LDR.W    R5,??DataTable105_9
   \   0000013A   0x.... 0x....      ADR.W    R0,`?<Constant "  M203 X">`
   \   0000013E   0x6829             LDR      R1,[R5, #+0]
   \   00000140   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   1904              SERIAL_ECHOPAIR(" Y", LINEAR_UNIT(planner.max_feedrate_mm_s[Y_AXIS]));
   \   00000144   0x6869             LDR      R1,[R5, #+4]
   \   00000146   0x4650             MOV      R0,R10
   \   00000148   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   1905              SERIAL_ECHOPAIR(" Z", LINEAR_UNIT(planner.max_feedrate_mm_s[Z_AXIS]));
   \   0000014C   0x68A9             LDR      R1,[R5, #+8]
   \   0000014E   0x4630             MOV      R0,R6
   \   00000150   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   1906              #if DISABLED(DISTINCT_E_FACTORS)
   1907                SERIAL_ECHOPAIR(" E", VOLUMETRIC_UNIT(planner.max_feedrate_mm_s[E_AXIS]));
   1908              #endif
   1909              SERIAL_EOL();
   \   00000154   0x210A             MOVS     R1,#+10
   \   00000156   0x4648             MOV      R0,R9
   \   00000158   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1910              #if ENABLED(DISTINCT_E_FACTORS)
   1911                CONFIG_ECHO_START;
   \   0000015C   0xB914             CBNZ.N   R4,??report_11
   \   0000015E   0x4640             MOV      R0,R8
   \   00000160   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1912                for (uint8_t i = 0; i < E_STEPPERS; i++) {
   \                     ??report_11: (+1)
   \   00000164   0x.... 0x....      ADR.W    R11,`?<Constant "  M203 T">`
   1913                  SERIAL_ECHOPAIR("  M203 T", (int)i);
   \   00000168   0x2100             MOVS     R1,#+0
   \   0000016A   0x4658             MOV      R0,R11
   \   0000016C   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   1914                  SERIAL_ECHOLNPAIR(" E", VOLUMETRIC_UNIT(planner.max_feedrate_mm_s[E_AXIS + i]));
   \   00000170   0x68E9             LDR      R1,[R5, #+12]
   \   00000172   0x4638             MOV      R0,R7
   \   00000174   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   00000178   0x210A             MOVS     R1,#+10
   \   0000017A   0x4648             MOV      R0,R9
   \   0000017C   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   00000180   0x2101             MOVS     R1,#+1
   \   00000182   0x4658             MOV      R0,R11
   \   00000184   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   00000188   0x6929             LDR      R1,[R5, #+16]
   \   0000018A   0x4638             MOV      R0,R7
   \   0000018C   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   00000190   0x210A             MOVS     R1,#+10
   \   00000192   0x4648             MOV      R0,R9
   \   00000194   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1915                }
   1916              #endif
   1917          
   1918              if (!forReplay) {
   \   00000198   0xB94C             CBNZ.N   R4,??report_12
   1919                CONFIG_ECHO_START;
   \   0000019A   0x4640             MOV      R0,R8
   \   0000019C   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1920                SERIAL_ECHOLNPGM("Maximum Acceleration (units/s2):");
   \   000001A0   0x.... 0x....      ADR.W    R0,`?<Constant "Maximum Acceleration ...">`
   \   000001A4   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1921              }
   1922              CONFIG_ECHO_START;
   \   000001A8   0x4640             MOV      R0,R8
   \   000001AA   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1923              SERIAL_ECHOPAIR("  M201 X", LINEAR_UNIT(planner.max_acceleration_mm_per_s2[X_AXIS]));
   \                     ??report_12: (+1)
   \   000001AE   0x.... 0x....      LDR.W    R5,??DataTable105_8
   \   000001B2   0x.... 0x....      ADR.W    R0,`?<Constant "  M201 X">`
   \   000001B6   0x6829             LDR      R1,[R5, #+0]
   \   000001B8   0x.... 0x....      BL       _Z17serial_echopair_PPKcm
   1924              SERIAL_ECHOPAIR(" Y", LINEAR_UNIT(planner.max_acceleration_mm_per_s2[Y_AXIS]));
   \   000001BC   0x6869             LDR      R1,[R5, #+4]
   \   000001BE   0x4650             MOV      R0,R10
   \   000001C0   0x.... 0x....      BL       _Z17serial_echopair_PPKcm
   1925              SERIAL_ECHOPAIR(" Z", LINEAR_UNIT(planner.max_acceleration_mm_per_s2[Z_AXIS]));
   \   000001C4   0x68A9             LDR      R1,[R5, #+8]
   \   000001C6   0x4630             MOV      R0,R6
   \   000001C8   0x.... 0x....      BL       _Z17serial_echopair_PPKcm
   1926              #if DISABLED(DISTINCT_E_FACTORS)
   1927                SERIAL_ECHOPAIR(" E", VOLUMETRIC_UNIT(planner.max_acceleration_mm_per_s2[E_AXIS]));
   1928              #endif
   1929              SERIAL_EOL();
   \   000001CC   0x210A             MOVS     R1,#+10
   \   000001CE   0x4648             MOV      R0,R9
   \   000001D0   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1930              #if ENABLED(DISTINCT_E_FACTORS)
   1931                CONFIG_ECHO_START;
   \   000001D4   0xB914             CBNZ.N   R4,??report_13
   \   000001D6   0x4640             MOV      R0,R8
   \   000001D8   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1932                for (uint8_t i = 0; i < E_STEPPERS; i++) {
   \                     ??report_13: (+1)
   \   000001DC   0x.... 0x....      ADR.W    R11,`?<Constant "  M201 T">`
   1933                  SERIAL_ECHOPAIR("  M201 T", (int)i);
   \   000001E0   0x2100             MOVS     R1,#+0
   \   000001E2   0x4658             MOV      R0,R11
   \   000001E4   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   1934                  SERIAL_ECHOLNPAIR(" E", VOLUMETRIC_UNIT(planner.max_acceleration_mm_per_s2[E_AXIS + i]));
   \   000001E8   0x68E9             LDR      R1,[R5, #+12]
   \   000001EA   0x4638             MOV      R0,R7
   \   000001EC   0x.... 0x....      BL       _Z17serial_echopair_PPKcm
   \   000001F0   0x210A             MOVS     R1,#+10
   \   000001F2   0x4648             MOV      R0,R9
   \   000001F4   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   000001F8   0x2101             MOVS     R1,#+1
   \   000001FA   0x4658             MOV      R0,R11
   \   000001FC   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   00000200   0x6929             LDR      R1,[R5, #+16]
   \   00000202   0x4638             MOV      R0,R7
   \   00000204   0x.... 0x....      BL       _Z17serial_echopair_PPKcm
   \   00000208   0x210A             MOVS     R1,#+10
   \   0000020A   0x4648             MOV      R0,R9
   \   0000020C   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1935                }
   1936              #endif
   1937          
   1938              if (!forReplay) {
   \   00000210   0xB94C             CBNZ.N   R4,??report_14
   1939                CONFIG_ECHO_START;
   \   00000212   0x4640             MOV      R0,R8
   \   00000214   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1940                SERIAL_ECHOLNPGM("Acceleration (units/s2): P<print_accel> R<retract_accel> T<travel_accel>");
   \   00000218   0x.... 0x....      ADR.W    R0,`?<Constant "Acceleration (units/s...">`
   \   0000021C   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1941              }
   1942              CONFIG_ECHO_START;
   \   00000220   0x4640             MOV      R0,R8
   \   00000222   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1943              SERIAL_ECHOPAIR("  M204 P", LINEAR_UNIT(planner.acceleration));
   \                     ??report_14: (+1)
   \   00000226   0x.... 0x....      LDR.W    R0,??DataTable105_14
   \   0000022A   0x6801             LDR      R1,[R0, #+0]
   \   0000022C   0x.... 0x....      ADR.W    R0,`?<Constant "  M204 P">`
   \   00000230   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   00000234   0x.... 0x....      LDR.W    R0,??DataTable105_18
   \   00000238   0x6801             LDR      R1,[R0, #+0]
   \   0000023A   0xA0CD             ADR.N    R0,??report_15   ;; 0x20, 0x52, 0x00, 0x00
   1944              SERIAL_ECHOPAIR(" R", LINEAR_UNIT(planner.retract_acceleration));
   \   0000023C   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   1945              SERIAL_ECHOLNPAIR(" T", LINEAR_UNIT(planner.travel_acceleration));
   \   00000240   0x.... 0x....      LDR.W    R0,??DataTable105_19
   \   00000244   0x6801             LDR      R1,[R0, #+0]
   \   00000246   0xA5CB             ADR.N    R5,??report_15+0x4  ;; 0x20, 0x54, 0x00, 0x00
   \   00000248   0x4628             MOV      R0,R5
   \   0000024A   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   0000024E   0x210A             MOVS     R1,#+10
   \   00000250   0x4648             MOV      R0,R9
   \   00000252   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1946          
   1947              if (!forReplay) {
   \   00000256   0xB94C             CBNZ.N   R4,??report_16
   1948                CONFIG_ECHO_START;
   \   00000258   0x4640             MOV      R0,R8
   \   0000025A   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1949                SERIAL_ECHOLNPGM("Advanced: S<min_feedrate> T<min_travel_feedrate> B<min_segment_time_us> X<max_xy_jerk> Z<max_z_jerk> E<max_e_jerk>");
   \   0000025E   0x.... 0x....      ADR.W    R0,`?<Constant "Advanced: S<min_feedr...">`
   \   00000262   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1950              }
   1951              CONFIG_ECHO_START;
   \   00000266   0x4640             MOV      R0,R8
   \   00000268   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1952              SERIAL_ECHOPAIR("  M205 S", LINEAR_UNIT(planner.min_feedrate_mm_s));
   \                     ??report_16: (+1)
   \   0000026C   0x.... 0x....      LDR.W    R0,??DataTable105_20
   \   00000270   0x6801             LDR      R1,[R0, #+0]
   \   00000272   0x.... 0x....      ADR.W    R0,`?<Constant "  M205 S">`
   \   00000276   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   1953              SERIAL_ECHOPAIR(" T", LINEAR_UNIT(planner.min_travel_feedrate_mm_s));
   \   0000027A   0x.... 0x....      LDR.W    R0,??DataTable105_21
   \   0000027E   0x6801             LDR      R1,[R0, #+0]
   \   00000280   0x4628             MOV      R0,R5
   \   00000282   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   00000286   0x.... 0x....      LDR.W    R0,??DataTable105_22
   \   0000028A   0x6801             LDR      R1,[R0, #+0]
   \   0000028C   0xA0BA             ADR.N    R0,??report_15+0x8  ;; 0x20, 0x42, 0x00, 0x00
   1954              SERIAL_ECHOPAIR(" B", planner.min_segment_time_us);
   \   0000028E   0x.... 0x....      BL       _Z17serial_echopair_PPKcj
   \   00000292   0x.... 0x....      LDR.W    R5,??DataTable105_24
   \   00000296   0x6829             LDR      R1,[R5, #+0]
   \   00000298   0xA0B8             ADR.N    R0,??report_15+0xC  ;; 0x20, 0x58, 0x00, 0x00
   1955              SERIAL_ECHOPAIR(" X", LINEAR_UNIT(planner.max_jerk[X_AXIS]));
   \   0000029A   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   1956              SERIAL_ECHOPAIR(" Y", LINEAR_UNIT(planner.max_jerk[Y_AXIS]));
   \   0000029E   0x6869             LDR      R1,[R5, #+4]
   \   000002A0   0x4650             MOV      R0,R10
   \   000002A2   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   1957              SERIAL_ECHOPAIR(" Z", LINEAR_UNIT(planner.max_jerk[Z_AXIS]));
   \   000002A6   0x68A9             LDR      R1,[R5, #+8]
   \   000002A8   0x4630             MOV      R0,R6
   \   000002AA   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   1958              SERIAL_ECHOLNPAIR(" E", LINEAR_UNIT(planner.max_jerk[E_AXIS]));
   \   000002AE   0x68E9             LDR      R1,[R5, #+12]
   \   000002B0   0x4638             MOV      R0,R7
   \   000002B2   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   000002B6   0x210A             MOVS     R1,#+10
   \   000002B8   0x4648             MOV      R0,R9
   \   000002BA   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   000002BE   0x.... 0x....      LDR.W    R0,??DataTable105_53
   \   000002C2   0x9001             STR      R0,[SP, #+4]
   \   000002C4   0xF9B0 0x0022      LDRSH    R0,[R0, #+34]
   \   000002C8   0x2802             CMP      R0,#+2
   \   000002CA   0xD01D             BEQ.N    ??report_17
   1959          
   1960              //#if HAS_M206_COMMAND
   1961              if(MACHINETPYE != DELTA){
   1962                if (!forReplay) {
   \   000002CC   0xB94C             CBNZ.N   R4,??report_18
   1963                  CONFIG_ECHO_START;
   \   000002CE   0x4640             MOV      R0,R8
   \   000002D0   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1964                  SERIAL_ECHOLNPGM("Home offset:");
   \   000002D4   0x.... 0x....      ADR.W    R0,`?<Constant "Home offset:\\n">`
   \   000002D8   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1965                }
   1966                CONFIG_ECHO_START;
   \   000002DC   0x4640             MOV      R0,R8
   \   000002DE   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1967                SERIAL_ECHOPAIR("  M206 X", LINEAR_UNIT(home_offset[X_AXIS]));
   \                     ??report_18: (+1)
   \   000002E2   0x.... 0x....      LDR.W    R7,??DataTable105_26
   \   000002E6   0x.... 0x....      ADR.W    R0,`?<Constant "  M206 X">`
   \   000002EA   0x6839             LDR      R1,[R7, #+0]
   \   000002EC   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   1968                SERIAL_ECHOPAIR(" Y", LINEAR_UNIT(home_offset[Y_AXIS]));
   \   000002F0   0x6879             LDR      R1,[R7, #+4]
   \   000002F2   0x4650             MOV      R0,R10
   \   000002F4   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   1969                SERIAL_ECHOLNPAIR(" Z", LINEAR_UNIT(home_offset[Z_AXIS]));
   \   000002F8   0x68B9             LDR      R1,[R7, #+8]
   \   000002FA   0x4630             MOV      R0,R6
   \   000002FC   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   00000300   0x210A             MOVS     R1,#+10
   \   00000302   0x4648             MOV      R0,R9
   \   00000304   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   1970              }
   1971              //#endif
   1972          
   1973              #if HOTENDS > 1
   1974                if (!forReplay) {
   \                     ??report_17: (+1)
   \   00000308   0xB94C             CBNZ.N   R4,??report_19
   1975                  CONFIG_ECHO_START;
   \   0000030A   0x4640             MOV      R0,R8
   \   0000030C   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1976                  SERIAL_ECHOLNPGM("Hotend offsets:");
   \   00000310   0x.... 0x....      ADR.W    R0,`?<Constant "Hotend offsets:\\n">`
   \   00000314   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1977                }
   1978                CONFIG_ECHO_START;
   \   00000318   0x4640             MOV      R0,R8
   \   0000031A   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1979                for (uint8_t e = 1; e < HOTENDS; e++) {
   \                     ??report_19: (+1)
   \   0000031E   0x.... 0x....      LDR.W    R7,??DataTable105_27
   1980                  SERIAL_ECHOPAIR("  M218 T", (int)e);
   \   00000322   0x.... 0x....      ADR.W    R0,`?<Constant "  M218 T">`
   \   00000326   0x2101             MOVS     R1,#+1
   \   00000328   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   1981                  SERIAL_ECHOPAIR(" X", LINEAR_UNIT(hotend_offset[X_AXIS][e]));
   \   0000032C   0x6879             LDR      R1,[R7, #+4]
   \   0000032E   0xA093             ADR.N    R0,??report_15+0xC  ;; 0x20, 0x58, 0x00, 0x00
   \   00000330   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   1982                  SERIAL_ECHOPAIR(" Y", LINEAR_UNIT(hotend_offset[Y_AXIS][e]));
   \   00000334   0x68F9             LDR      R1,[R7, #+12]
   \   00000336   0x4650             MOV      R0,R10
   \   00000338   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   1983                  #if ENABLED(DUAL_X_CARRIAGE) || ENABLED(SWITCHING_NOZZLE) ||ENABLED(PARKING_EXTRUDER)
   1984                    SERIAL_ECHOPAIR(" Z", LINEAR_UNIT(hotend_offset[Z_AXIS][e]));
   1985                  #endif
   1986                  SERIAL_EOL();
   \   0000033C   0x210A             MOVS     R1,#+10
   \   0000033E   0x4648             MOV      R0,R9
   \   00000340   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   00000344   0x9801             LDR      R0,[SP, #+4]
   \   00000346   0x7B00             LDRB     R0,[R0, #+12]
   \   00000348   0x2820             CMP      R0,#+32
   \   0000034A   0xD106             BNE.N    ??report_20
   1987                }
   1988              #endif
   1989          
   1990              /**
   1991               * Bed Leveling
   1992               */
   1993              //#if HAS_LEVELING
   1994          
   1995                //#if ENABLED(MESH_BED_LEVELING)
   1996                if(BED_LEVELING_METHOD == MESH_BED_LEVELING)    {
   1997          
   1998                  if (!forReplay) {
   \   0000034C   0xB9DC             CBNZ.N   R4,??report_21
   1999                    CONFIG_ECHO_START;
   \   0000034E   0x4640             MOV      R0,R8
   \   00000350   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2000                    SERIAL_ECHOLNPGM("Mesh Bed Leveling:");
   \   00000354   0x.... 0x....      ADR.W    R0,`?<Constant "Mesh Bed Leveling:\\n">`
   \   00000358   0xE012             B.N      ??report_22
   2001                  }
   2002                }
   2003                //#elif ENABLED(AUTO_BED_LEVELING_UBL)
   2004                else if (BED_LEVELING_METHOD == AUTO_BED_LEVELING_UBL)    {
   \                     ??report_20: (+1)
   \   0000035A   0x2810             CMP      R0,#+16
   \   0000035C   0xD107             BNE.N    ??report_23
   2005          
   2006                  if (!forReplay) {
   \   0000035E   0xB994             CBNZ.N   R4,??report_21
   2007                    CONFIG_ECHO_START;
   \   00000360   0x4640             MOV      R0,R8
   \   00000362   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2008                    ubl.echo_name();
   \   00000366   0x.... 0x....      BL       _ZN20unified_bed_leveling9echo_nameEv
   2009                    SERIAL_ECHOLNPGM(":");
   \   0000036A   0xA085             ADR.N    R0,??report_15+0x10  ;; 0x3A, 0x0A, 0x00, 0x00
   \   0000036C   0xE008             B.N      ??report_22
   2010                  }
   2011                }
   2012                //#elif HAS_ABL
   2013                else if(BED_LEVELING_METHOD == HAS_ABL)
   \                     ??report_23: (+1)
   \   0000036E   0x281E             CMP      R0,#+30
   \   00000370   0xBF08             IT       EQ 
   2014                {
   2015                  if (!forReplay) {
   \   00000372   0x2C00             CMPEQ    R4,#+0
   \   00000374   0xD107             BNE.N    ??report_21
   2016                    CONFIG_ECHO_START;
   \   00000376   0x4640             MOV      R0,R8
   \   00000378   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2017                    SERIAL_ECHOLNPGM("Auto Bed Leveling:");
   \   0000037C   0x.... 0x....      ADR.W    R0,`?<Constant "Auto Bed Leveling:\\n">`
   \                     ??report_22: (+1)
   \   00000380   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   00000384   0xE000             B.N      ??report_24
   2018                  }
   2019                }
   2020                //#endif
   2021          
   2022                CONFIG_ECHO_START;
   \                     ??report_21: (+1)
   \   00000386   0xB914             CBNZ.N   R4,??report_25
   \                     ??report_24: (+1)
   \   00000388   0x4640             MOV      R0,R8
   \   0000038A   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2023                SERIAL_ECHOPAIR("  M420 S", planner.leveling_active ? 1 : 0);
   \                     ??report_25: (+1)
   \   0000038E   0x.... 0x....      LDR.W    R0,??DataTable105_54
   \   00000392   0x7801             LDRB     R1,[R0, #+0]
   \   00000394   0x.... 0x....      ADR.W    R0,`?<Constant "  M420 S">`
   \   00000398   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   2024                //#if ENABLED(ENABLE_LEVELING_FADE_HEIGHT)
   2025                if((MACHINETPYE != DELTA) && (BED_LEVELING_METHOD&HAS_FADE))	//mks_delta
   \   0000039C   0x9801             LDR      R0,[SP, #+4]
   \   0000039E   0xF9B0 0x0022      LDRSH    R0,[R0, #+34]
   \   000003A2   0x2802             CMP      R0,#+2
   \   000003A4   0xD009             BEQ.N    ??report_26
   \   000003A6   0x9801             LDR      R0,[SP, #+4]
   \   000003A8   0x7B00             LDRB     R0,[R0, #+12]
   \   000003AA   0x06C0             LSLS     R0,R0,#+27
   \   000003AC   0xD505             BPL.N    ??report_26
   2026                  SERIAL_ECHOPAIR(" Z", LINEAR_UNIT(planner.z_fade_height));
   \   000003AE   0x.... 0x....      LDR.W    R0,??DataTable105_55
   \   000003B2   0x6801             LDR      R1,[R0, #+0]
   \   000003B4   0x4630             MOV      R0,R6
   \   000003B6   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   2027                //#endif
   2028                SERIAL_EOL();
   \                     ??report_26: (+1)
   \   000003BA   0x210A             MOVS     R1,#+10
   \   000003BC   0x4648             MOV      R0,R9
   \   000003BE   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   000003C2   0x9801             LDR      R0,[SP, #+4]
   \   000003C4   0x7B00             LDRB     R0,[R0, #+12]
   \   000003C6   0x2820             CMP      R0,#+32
   \   000003C8   0xD153             BNE.N    ??report_27
   2029          
   2030                //#if ENABLED(MESH_BED_LEVELING)
   2031                if(BED_LEVELING_METHOD == MESH_BED_LEVELING)    {
   2032          
   2033                  for (uint8_t py = 0; py < GRID_MAX_POINTS_Y; py++) {
   \   000003CA   0x2500             MOVS     R5,#+0
   \   000003CC   0xE004             B.N      ??report_28
   \   000003CE   0xBF00             Nop      
   \                     ??report_8:
   \   000003D0   0x20 0x59          DC8      0x20, 0x59, 0x00, 0x00
   \              0x00 0x00    
   \                     ??report_29: (+1)
   \   000003D4   0x1C68             ADDS     R0,R5,#+1
   \   000003D6   0xB2C5             UXTB     R5,R0
   \                     ??report_28: (+1)
   \   000003D8   0x.... 0x....      LDR.W    R0,??DataTable105_56
   \   000003DC   0xF890 0x0061      LDRB     R0,[R0, #+97]
   \   000003E0   0x4285             CMP      R5,R0
   \   000003E2   0xDA70             BGE.N    ??report_30
   2034                    for (uint8_t px = 0; px < GRID_MAX_POINTS_X; px++) {
   \   000003E4   0x1C68             ADDS     R0,R5,#+1
   \   000003E6   0x2700             MOVS     R7,#+0
   \   000003E8   0x9002             STR      R0,[SP, #+8]
   \   000003EA   0xE01E             B.N      ??report_31
   \                     ??report_32: (+1)
   \   000003EC   0xB2C9             UXTB     R1,R1
   \   000003EE   0x4648             MOV      R0,R9
   \   000003F0   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??report_33: (+1)
   \   000003F4   0xF91B 0x1B01      LDRSB    R1,[R11], #+1
   \   000003F8   0x0008             MOVS     R0,R1
   \   000003FA   0xD1F7             BNE.N    ??report_32
   2035                      CONFIG_ECHO_START;
   2036                      SERIAL_ECHOPAIR("  G29 S3 X", (int)px + 1);
   2037                      SERIAL_ECHOPAIR(" Y", (int)py + 1);
   2038                      SERIAL_ECHOPGM(" Z");
   2039                      SERIAL_PROTOCOL_F(LINEAR_UNIT(mbl.z_values[px][py]), 5);
   \   000003FC   0x2005             MOVS     R0,#+5
   \   000003FE   0x9000             STR      R0,[SP, #+0]
   \   00000400   0xEB07 0x0047      ADD      R0,R7,R7, LSL #+1
   \   00000404   0x.... 0x....      LDR.W    R1,??DataTable105_57
   \   00000408   0x0100             LSLS     R0,R0,#+4
   \   0000040A   0xEB01 0x0185      ADD      R1,R1,R5, LSL #+2
   \   0000040E   0x5840             LDR      R0,[R0, R1]
   \   00000410   0x.... 0x....      BL       __aeabi_f2d
   \   00000414   0x4602             MOV      R2,R0
   \   00000416   0x460B             MOV      R3,R1
   \   00000418   0x4648             MOV      R0,R9
   \   0000041A   0x.... 0x....      BL       _ZN5Print5printEdi
   2040                      SERIAL_EOL();
   \   0000041E   0x210A             MOVS     R1,#+10
   \   00000420   0x4648             MOV      R0,R9
   \   00000422   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   00000426   0x1C7F             ADDS     R7,R7,#+1
   \   00000428   0xB2FF             UXTB     R7,R7
   \                     ??report_31: (+1)
   \   0000042A   0x.... 0x....      LDR.W    R0,??DataTable105_56
   \   0000042E   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   00000432   0x4287             CMP      R7,R0
   \   00000434   0xDACE             BGE.N    ??report_29
   \   00000436   0xB98C             CBNZ.N   R4,??report_34
   \   00000438   0x46C3             MOV      R11,R8
   \   0000043A   0xE00B             B.N      ??report_35
   \                     ??report_0:
   \   0000043C   0x20 0x5A          DC8      0x20, 0x5A, 0x00, 0x00
   \              0x00 0x00    
   \   00000440   0x20 0x45          DC8      0x20, 0x45, 0x00, 0x00
   \              0x00 0x00    
   \   00000444   0x........         DC32     _ZN11GCodeParser18volumetric_enabledE
   \   00000448   0x........         DC32     _ZN7Planner13filament_sizeE
   \                     ??report_36: (+1)
   \   0000044C   0xB2C9             UXTB     R1,R1
   \   0000044E   0x4648             MOV      R0,R9
   \   00000450   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??report_35: (+1)
   \   00000454   0xF91B 0x1B01      LDRSB    R1,[R11], #+1
   \   00000458   0x0008             MOVS     R0,R1
   \   0000045A   0xD1F7             BNE.N    ??report_36
   \                     ??report_34: (+1)
   \   0000045C   0x1C79             ADDS     R1,R7,#+1
   \   0000045E   0x.... 0x....      ADR.W    R0,`?<Constant "  G29 S3 X">`
   \   00000462   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   00000466   0x9902             LDR      R1,[SP, #+8]
   \   00000468   0x4650             MOV      R0,R10
   \   0000046A   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   0000046E   0x46B3             MOV      R11,R6
   \   00000470   0xE7C0             B.N      ??report_33
   2041                    }
   2042                  }
   2043                }
   2044                //#elif ENABLED(AUTO_BED_LEVELING_UBL)
   2045                else if(BED_LEVELING_METHOD == AUTO_BED_LEVELING_UBL)   {
   \                     ??report_27: (+1)
   \   00000472   0x2810             CMP      R0,#+16
   \   00000474   0xBF08             IT       EQ 
   2046          
   2047                  if (!forReplay) {
   \   00000476   0x2C00             CMPEQ    R4,#+0
   \   00000478   0xD125             BNE.N    ??report_30
   2048                    SERIAL_EOL();
   \   0000047A   0x210A             MOVS     R1,#+10
   \   0000047C   0x4648             MOV      R0,R9
   \   0000047E   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   2049                    ubl.report_state();
   \   00000482   0x.... 0x....      BL       _ZN20unified_bed_leveling12report_stateEv
   2050                    SERIAL_ECHOLNPAIR("\nActive Mesh Slot: ", ubl.storage_slot);
   \   00000486   0x.... 0x....      LDR.W    R0,??DataTable105_58
   \   0000048A   0x5701             LDRSB    R1,[R0, R4]
   \   0000048C   0x.... 0x....      ADR.W    R0,`?<Constant "\\nActive Mesh Slot: ">`
   \   00000490   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   \   00000494   0x210A             MOVS     R1,#+10
   \   00000496   0x4648             MOV      R0,R9
   \   00000498   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   0000049C   0x....             LDR.N    R0,??DataTable105
   \   0000049E   0xF9B0 0x0002      LDRSH    R0,[R0, #+2]
   \   000004A2   0x2801             CMP      R0,#+1
   \   000004A4   0xBFB1             ITEEE    LT 
   2051                    SERIAL_ECHOPAIR("EEPROM can hold ", calc_num_meshes());
   \   000004A6   0x2100             MOVLT    R1,#+0
   \   000004A8   0xF5C0 0x60F0      RSBGE    R0,R0,#+1920
   \   000004AC   0xF44F 0x7110      MOVGE    R1,#+576
   \   000004B0   0xFBB0 0xF1F1      UDIVGE   R1,R0,R1
   \   000004B4   0xB289             UXTH     R1,R1
   \   000004B6   0x.... 0x....      ADR.W    R0,`?<Constant "EEPROM can hold ">`
   \   000004BA   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   2052                    SERIAL_ECHOLNPGM(" meshes.\n");
   \   000004BE   0x.... 0x....      ADR.W    R0,`?<Constant " meshes.\\n\\n">`
   \   000004C2   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2053                  }
   2054                }
   2055                //#endif
   2056          
   2057              //#endif // HAS_LEVELING
   2058          
   2059              //#if ENABLED(DELTA)
   2060              if(MACHINETPYE == DELTA)	{
   \                     ??report_30: (+1)
   \   000004C6   0x9801             LDR      R0,[SP, #+4]
   \   000004C8   0xF9B0 0x0022      LDRSH    R0,[R0, #+34]
   \   000004CC   0x2802             CMP      R0,#+2
   \   000004CE   0xD159             BNE.N    ??report_37
   2061                if (!forReplay) {
   \   000004D0   0xB94C             CBNZ.N   R4,??report_38
   2062                  CONFIG_ECHO_START;
   \   000004D2   0x4640             MOV      R0,R8
   \   000004D4   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2063                  SERIAL_ECHOLNPGM("Endstop adjustment:");
   \   000004D8   0x.... 0x....      ADR.W    R0,`?<Constant "Endstop adjustment:\\n">`
   \   000004DC   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2064                }
   2065                CONFIG_ECHO_START;
   \   000004E0   0x4640             MOV      R0,R8
   \   000004E2   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2066                SERIAL_ECHOPAIR("  M666 X", LINEAR_UNIT(delta_endstop_adj[X_AXIS]));
   \                     ??report_38: (+1)
   \   000004E6   0x....             LDR.N    R7,??DataTable105_31
   \   000004E8   0x.... 0x....      ADR.W    R0,`?<Constant "  M666 X">`
   \   000004EC   0x6839             LDR      R1,[R7, #+0]
   \   000004EE   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   2067                SERIAL_ECHOPAIR(" Y", LINEAR_UNIT(delta_endstop_adj[Y_AXIS]));
   \   000004F2   0x6879             LDR      R1,[R7, #+4]
   \   000004F4   0x4650             MOV      R0,R10
   \   000004F6   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   2068                SERIAL_ECHOLNPAIR(" Z", LINEAR_UNIT(delta_endstop_adj[Z_AXIS]));
   \   000004FA   0x68B9             LDR      R1,[R7, #+8]
   \   000004FC   0x4630             MOV      R0,R6
   \   000004FE   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   00000502   0x210A             MOVS     R1,#+10
   \   00000504   0x4648             MOV      R0,R9
   \   00000506   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   2069                if (!forReplay) {
   \   0000050A   0xB94C             CBNZ.N   R4,??report_39
   2070                  CONFIG_ECHO_START;
   \   0000050C   0x4640             MOV      R0,R8
   \   0000050E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2071                  SERIAL_ECHOLNPGM("Delta settings: L<diagonal_rod> R<radius> H<height> S<segments_per_s> B<calibration radius> XYZ<tower angle corrections>");
   \   00000512   0x.... 0x....      ADR.W    R0,`?<Constant "Delta settings: L<dia...">`
   \   00000516   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2072                }
   2073                CONFIG_ECHO_START;
   \   0000051A   0x4640             MOV      R0,R8
   \   0000051C   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2074                SERIAL_ECHOPAIR("  M665 L", LINEAR_UNIT(delta_diagonal_rod));
   \                     ??report_39: (+1)
   \   00000520   0x....             LDR.N    R0,??DataTable105_33
   \   00000522   0x6801             LDR      R1,[R0, #+0]
   \   00000524   0x.... 0x....      ADR.W    R0,`?<Constant "  M665 L">`
   \   00000528   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   2075                SERIAL_ECHOPAIR(" R", LINEAR_UNIT(delta_radius));
   \   0000052C   0x....             LDR.N    R0,??DataTable105_32
   \   0000052E   0x6801             LDR      R1,[R0, #+0]
   \   00000530   0xA00F             ADR.N    R0,??report_15   ;; 0x20, 0x52, 0x00, 0x00
   \   00000532   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   2076                SERIAL_ECHOPAIR(" H", LINEAR_UNIT(delta_height));
   \   00000536   0x....             LDR.N    R0,??DataTable105_30
   \   00000538   0x6801             LDR      R1,[R0, #+0]
   \   0000053A   0x....             ADR.N    R0,??DataTable105_1  ;; 0x20, 0x48, 0x00, 0x00
   \   0000053C   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   2077                SERIAL_ECHOPAIR(" S", delta_segments_per_second);
   \   00000540   0x....             LDR.N    R0,??DataTable105_34
   \   00000542   0x6801             LDR      R1,[R0, #+0]
   \   00000544   0x....             ADR.N    R0,??DataTable105_2  ;; 0x20, 0x53, 0x00, 0x00
   \   00000546   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   2078                SERIAL_ECHOPAIR(" B", LINEAR_UNIT(delta_calibration_radius));
   \   0000054A   0x....             LDR.N    R0,??DataTable105_35
   \   0000054C   0x6801             LDR      R1,[R0, #+0]
   \   0000054E   0xA00A             ADR.N    R0,??report_15+0x8  ;; 0x20, 0x42, 0x00, 0x00
   \   00000550   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   2079                SERIAL_ECHOPAIR(" X", LINEAR_UNIT(delta_tower_angle_trim[A_AXIS]));
   \   00000554   0x....             LDR.N    R7,??DataTable105_36
   \   00000556   0x6839             LDR      R1,[R7, #+0]
   \   00000558   0xA008             ADR.N    R0,??report_15+0xC  ;; 0x20, 0x58, 0x00, 0x00
   \   0000055A   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   2080                SERIAL_ECHOPAIR(" Y", LINEAR_UNIT(delta_tower_angle_trim[B_AXIS]));
   \   0000055E   0x6879             LDR      R1,[R7, #+4]
   \   00000560   0x4650             MOV      R0,R10
   \   00000562   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   2081                SERIAL_ECHOPAIR(" Z", LINEAR_UNIT(delta_tower_angle_trim[C_AXIS]));
   \   00000566   0x68B9             LDR      R1,[R7, #+8]
   \   00000568   0x4630             MOV      R0,R6
   \   0000056A   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   2082                SERIAL_EOL();
   \   0000056E   0xE022             B.N      ??report_40
   \                     ??report_15:
   \   00000570   0x20 0x52          DC8      0x20, 0x52, 0x00, 0x00
   \              0x00 0x00    
   \   00000574   0x20 0x54          DC8      0x20, 0x54, 0x00, 0x00
   \              0x00 0x00    
   \   00000578   0x20 0x42          DC8      0x20, 0x42, 0x00, 0x00
   \              0x00 0x00    
   \   0000057C   0x20 0x58          DC8      0x20, 0x58, 0x00, 0x00
   \              0x00 0x00    
   \   00000580   0x3A 0x0A          DC8      0x3A, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   2083              }
   2084              else
   2085              {
   2086              //#if ENABLED(X_DUAL_ENDSTOPS) || ENABLED(Y_DUAL_ENDSTOPS) || ENABLED(Z_DUAL_ENDSTOPS)
   2087                if (!forReplay) {
   \                     ??report_37: (+1)
   \   00000584   0xB94C             CBNZ.N   R4,??report_41
   2088                  CONFIG_ECHO_START;
   \   00000586   0x4640             MOV      R0,R8
   \   00000588   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2089                  SERIAL_ECHOLNPGM("Endstop adjustment:");
   \   0000058C   0x.... 0x....      ADR.W    R0,`?<Constant "Endstop adjustment:\\n">`
   \   00000590   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2090                }
   2091                CONFIG_ECHO_START;
   \   00000594   0x4640             MOV      R0,R8
   \   00000596   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2092                SERIAL_ECHOPGM("  M666");
   \                     ??report_41: (+1)
   \   0000059A   0x.... 0x....      ADR.W    R0,`?<Constant "  M666">`
   \   0000059E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2093                #if ENABLED(X_DUAL_ENDSTOPS)
   2094                  SERIAL_ECHOPAIR(" X", LINEAR_UNIT(x_endstop_adj));
   2095                #endif
   2096                #if ENABLED(Y_DUAL_ENDSTOPS)
   2097                  SERIAL_ECHOPAIR(" Y", LINEAR_UNIT(y_endstop_adj));
   2098                #endif
   2099                //#if ENABLED(Z_DUAL_ENDSTOPS)
   2100                if(Z_DUAL_ENDSTOPS==1)
   \   000005A2   0x....             LDR.N    R0,??DataTable105_56
   \   000005A4   0xF890 0x0102      LDRB     R0,[R0, #+258]
   \   000005A8   0x2801             CMP      R0,#+1
   \   000005AA   0xD104             BNE.N    ??report_40
   2101                  SERIAL_ECHOPAIR(" Z", LINEAR_UNIT(z_endstop_adj));
   \   000005AC   0x....             LDR.N    R0,??DataTable105_37
   \   000005AE   0x6801             LDR      R1,[R0, #+0]
   \   000005B0   0x4630             MOV      R0,R6
   \   000005B2   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   2102                //#endif
   2103                SERIAL_EOL();
   \                     ??report_40: (+1)
   \   000005B6   0x210A             MOVS     R1,#+10
   \   000005B8   0x4648             MOV      R0,R9
   \   000005BA   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   2104              
   2105              //#endif // DELTA
   2106              }
   2107          
   2108              #if ENABLED(ULTIPANEL)
   2109                if (!forReplay) {
   2110                  CONFIG_ECHO_START;
   2111                  SERIAL_ECHOLNPGM("Material heatup parameters:");
   2112                }
   2113                for (uint8_t i = 0; i < COUNT(lcd_preheat_hotend_temp); i++) {
   2114                  CONFIG_ECHO_START;
   2115                  SERIAL_ECHOPAIR("  M145 S", (int)i);
   2116                  SERIAL_ECHOPAIR(" H", TEMP_UNIT(lcd_preheat_hotend_temp[i]));
   2117                  SERIAL_ECHOPAIR(" B", TEMP_UNIT(lcd_preheat_bed_temp[i]));
   2118                  SERIAL_ECHOLNPAIR(" F", lcd_preheat_fan_speed[i]);
   2119                }
   2120              #endif // ULTIPANEL
   2121          
   2122              //#if HAS_PID_HEATING
   2123              if(HAS_PID_HEATING) {
   \   000005BE   0x....             LDR.N    R0,??DataTable105_56
   \   000005C0   0xF890 0x0036      LDRB     R0,[R0, #+54]
   \   000005C4   0x2800             CMP      R0,#+0
   \   000005C6   0xBF02             ITTT     EQ 
   \   000005C8   0x9801             LDREQ    R0,[SP, #+4]
   \   000005CA   0x7840             LDRBEQ   R0,[R0, #+1]
   \   000005CC   0x2800             CMPEQ    R0,#+0
   \   000005CE   0xF000 0x80B6      BEQ.W    ??report_42
   2124          
   2125                if (!forReplay) {
   \   000005D2   0xB934             CBNZ.N   R4,??report_43
   2126                  CONFIG_ECHO_START;
   \   000005D4   0x4640             MOV      R0,R8
   \   000005D6   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2127                  SERIAL_ECHOLNPGM("PID settings:");
   \   000005DA   0x.... 0x....      ADR.W    R0,`?<Constant "PID settings:\\n">`
   \   000005DE   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2128                }
   2129                //#if ENABLED(PIDTEMP)
   2130                if(PIDTEMP){
   \                     ??report_43: (+1)
   \   000005E2   0x....             LDR.N    R0,??DataTable105_56
   \   000005E4   0xF890 0x0036      LDRB     R0,[R0, #+54]
   \   000005E8   0x2800             CMP      R0,#+0
   \   000005EA   0xD05F             BEQ.N    ??report_44
   2131                  #if HOTENDS > 1
   2132                    if (forReplay) {
   \   000005EC   0x2C00             CMP      R4,#+0
   \   000005EE   0xD036             BEQ.N    ??report_45
   2133                      HOTEND_LOOP() {
   \   000005F0   0x2700             MOVS     R7,#+0
   \   000005F2   0x....             LDR.N    R5,??DataTable105_59  ;; 0x88e368f1
   \   000005F4   0x....             LDR.N    R6,??DataTable105_60  ;; 0x3fc4f8b5
   \   000005F6   0x.... 0x....      LDR.W    R11,??DataTable105_38
   \   000005FA   0x.... 0x....      ADR.W    R10,`?<Constant "  M301 E">`
   \                     ??report_46: (+1)
   \   000005FE   0x....             LDR.N    R1,??DataTable105_56
   \   00000600   0xF891 0x10F7      LDRB     R1,[R1, #+247]
   \   00000604   0xB278             SXTB     R0,R7
   \   00000606   0x4288             CMP      R0,R1
   \   00000608   0xDA50             BGE.N    ??report_44
   2134                        CONFIG_ECHO_START;
   2135                        SERIAL_ECHOPAIR("  M301 E", e);
   \   0000060A   0xB27F             SXTB     R7,R7
   \   0000060C   0x4639             MOV      R1,R7
   \   0000060E   0x4650             MOV      R0,R10
   \   00000610   0x.... 0x....      BL       _Z17serial_echopair_PPKci
   2136                        SERIAL_ECHOPAIR(" P", PID_PARAM(Kp, e));
   \   00000614   0xF8DB 0x1000      LDR      R1,[R11, #+0]
   \   00000618   0x....             ADR.N    R0,??DataTable105_3  ;; 0x20, 0x50, 0x00, 0x00
   \   0000061A   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   2137                        SERIAL_ECHOPAIR(" I", unscalePID_i(PID_PARAM(Ki, e)));
   \   0000061E   0x....             LDR.N    R0,??DataTable105_40
   \   00000620   0x6800             LDR      R0,[R0, #+0]
   \   00000622   0x.... 0x....      BL       __aeabi_f2d
   \   00000626   0x462A             MOV      R2,R5
   \   00000628   0x4633             MOV      R3,R6
   \   0000062A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000062E   0x4602             MOV      R2,R0
   \   00000630   0x460B             MOV      R3,R1
   \   00000632   0x....             ADR.N    R0,??DataTable105_4  ;; 0x20, 0x49, 0x00, 0x00
   \   00000634   0x.... 0x....      BL       _Z17serial_echopair_PPKcd
   2138                        SERIAL_ECHOPAIR(" D", unscalePID_d(PID_PARAM(Kd, e)));
   \   00000638   0x....             LDR.N    R0,??DataTable105_42
   \   0000063A   0x6800             LDR      R0,[R0, #+0]
   \   0000063C   0x.... 0x....      BL       __aeabi_f2d
   \   00000640   0x462A             MOV      R2,R5
   \   00000642   0x4633             MOV      R3,R6
   \   00000644   0x.... 0x....      BL       __aeabi_dmul
   \   00000648   0x4602             MOV      R2,R0
   \   0000064A   0x460B             MOV      R3,R1
   \   0000064C   0x....             ADR.N    R0,??DataTable105_5  ;; 0x20, 0x44, 0x00, 0x00
   \   0000064E   0x.... 0x....      BL       _Z17serial_echopair_PPKcd
   2139                        #if ENABLED(PID_EXTRUSION_SCALING)
   2140                          SERIAL_ECHOPAIR(" C", PID_PARAM(Kc, e));
   2141                          if (e == 0) SERIAL_ECHOPAIR(" L", lpq_len);
   2142                        #endif
   2143                        SERIAL_EOL();
   \   00000652   0x210A             MOVS     R1,#+10
   \   00000654   0x4648             MOV      R0,R9
   \   00000656   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   2144                      }
   \   0000065A   0x1C7F             ADDS     R7,R7,#+1
   \   0000065C   0xE7CF             B.N      ??report_46
   2145                    }
   2146                    else
   2147                  #endif // HOTENDS > 1
   2148                  // !forReplay || HOTENDS == 1
   2149                  {
   2150                    CONFIG_ECHO_START;
   \                     ??report_45: (+1)
   \   0000065E   0x4640             MOV      R0,R8
   \   00000660   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2151                    SERIAL_ECHOPAIR("  M301 P", PID_PARAM(Kp, 0)); // for compatibility with hosts, only echo values for E0
   \   00000664   0x....             LDR.N    R0,??DataTable105_38
   \   00000666   0x6801             LDR      R1,[R0, #+0]
   \   00000668   0x.... 0x....      ADR.W    R0,`?<Constant "  M301 P">`
   \   0000066C   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   2152                    SERIAL_ECHOPAIR(" I", unscalePID_i(PID_PARAM(Ki, 0)));
   \   00000670   0x....             LDR.N    R0,??DataTable105_40
   \   00000672   0x6800             LDR      R0,[R0, #+0]
   \   00000674   0x.... 0x....      BL       __aeabi_f2d
   \   00000678   0x....             LDR.N    R2,??DataTable105_59  ;; 0x88e368f1
   \   0000067A   0x....             LDR.N    R3,??DataTable105_60  ;; 0x3fc4f8b5
   \   0000067C   0x.... 0x....      BL       __aeabi_ddiv
   \   00000680   0x4602             MOV      R2,R0
   \   00000682   0x460B             MOV      R3,R1
   \   00000684   0x....             ADR.N    R0,??DataTable105_4  ;; 0x20, 0x49, 0x00, 0x00
   \   00000686   0x.... 0x....      BL       _Z17serial_echopair_PPKcd
   2153                    SERIAL_ECHOPAIR(" D", unscalePID_d(PID_PARAM(Kd, 0)));
   \   0000068A   0x....             LDR.N    R0,??DataTable105_42
   \   0000068C   0x6800             LDR      R0,[R0, #+0]
   \   0000068E   0x.... 0x....      BL       __aeabi_f2d
   \   00000692   0x....             LDR.N    R2,??DataTable105_59  ;; 0x88e368f1
   \   00000694   0x....             LDR.N    R3,??DataTable105_60  ;; 0x3fc4f8b5
   \   00000696   0x.... 0x....      BL       __aeabi_dmul
   \   0000069A   0x4602             MOV      R2,R0
   \   0000069C   0x460B             MOV      R3,R1
   \   0000069E   0x....             ADR.N    R0,??DataTable105_5  ;; 0x20, 0x44, 0x00, 0x00
   \   000006A0   0x.... 0x....      BL       _Z17serial_echopair_PPKcd
   2154                    #if ENABLED(PID_EXTRUSION_SCALING)
   2155                      SERIAL_ECHOPAIR(" C", PID_PARAM(Kc, 0));
   2156                      SERIAL_ECHOPAIR(" L", lpq_len);
   2157                    #endif
   2158                    SERIAL_EOL();
   \   000006A4   0x210A             MOVS     R1,#+10
   \   000006A6   0x4648             MOV      R0,R9
   \   000006A8   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   2159                  }
   2160                }
   2161                //#endif // PIDTEMP
   2162          
   2163                //#if ENABLED(PIDTEMPBED)
   2164                if(PIDTEMPBED) {
   \                     ??report_44: (+1)
   \   000006AC   0x9801             LDR      R0,[SP, #+4]
   \   000006AE   0x7840             LDRB     R0,[R0, #+1]
   \   000006B0   0xB338             CBZ.N    R0,??report_47
   2165                  CONFIG_ECHO_START;
   \   000006B2   0xB914             CBNZ.N   R4,??report_48
   \   000006B4   0x4640             MOV      R0,R8
   \   000006B6   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2166                  SERIAL_ECHOPAIR("  M304 P", thermalManager.bedKp);
   \                     ??report_48: (+1)
   \   000006BA   0x....             LDR.N    R0,??DataTable105_61
   \   000006BC   0x6801             LDR      R1,[R0, #+0]
   \   000006BE   0x.... 0x....      ADR.W    R0,`?<Constant "  M304 P">`
   \   000006C2   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   2167                  SERIAL_ECHOPAIR(" I", unscalePID_i(thermalManager.bedKi));
   \   000006C6   0x....             LDR.N    R0,??DataTable105_62
   \   000006C8   0x6800             LDR      R0,[R0, #+0]
   \   000006CA   0x.... 0x....      BL       __aeabi_f2d
   \   000006CE   0x....             LDR.N    R2,??DataTable105_59  ;; 0x88e368f1
   \   000006D0   0x....             LDR.N    R3,??DataTable105_60  ;; 0x3fc4f8b5
   \   000006D2   0x.... 0x....      BL       __aeabi_ddiv
   \   000006D6   0x4602             MOV      R2,R0
   \   000006D8   0x460B             MOV      R3,R1
   \   000006DA   0x....             ADR.N    R0,??DataTable105_4  ;; 0x20, 0x49, 0x00, 0x00
   \   000006DC   0x.... 0x....      BL       _Z17serial_echopair_PPKcd
   2168                  SERIAL_ECHOPAIR(" D", unscalePID_d(thermalManager.bedKd));
   \   000006E0   0x....             LDR.N    R0,??DataTable105_63
   \   000006E2   0x6800             LDR      R0,[R0, #+0]
   \   000006E4   0x.... 0x....      BL       __aeabi_f2d
   \   000006E8   0x....             LDR.N    R2,??DataTable105_59  ;; 0x88e368f1
   \   000006EA   0x....             LDR.N    R3,??DataTable105_60  ;; 0x3fc4f8b5
   \   000006EC   0x.... 0x....      BL       __aeabi_dmul
   \   000006F0   0x4602             MOV      R2,R0
   \   000006F2   0x460B             MOV      R3,R1
   \   000006F4   0x....             ADR.N    R0,??DataTable105_5  ;; 0x20, 0x44, 0x00, 0x00
   \   000006F6   0x.... 0x....      BL       _Z17serial_echopair_PPKcd
   2169                  SERIAL_EOL();
   \   000006FA   0x210A             MOVS     R1,#+10
   \   000006FC   0x4648             MOV      R0,R9
   \   000006FE   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   2170                }
   2171                //#endif
   2172          
   2173              //#endif // PIDTEMP || PIDTEMPBED
   2174          
   2175              #if HAS_LCD_CONTRAST
   2176                if (!forReplay) {
   2177                  CONFIG_ECHO_START;
   2178                  SERIAL_ECHOLNPGM("LCD Contrast:");
   2179                }
   2180                CONFIG_ECHO_START;
   2181                SERIAL_ECHOLNPAIR("  M250 C", lcd_contrast);
   2182              #endif
   2183          
   2184              #if ENABLED(FWRETRACT)
   2185          
   2186                if (!forReplay) {
   2187                  CONFIG_ECHO_START;
   2188                  SERIAL_ECHOLNPGM("Retract: S<length> F<units/m> Z<lift>");
   2189                }
   2190                CONFIG_ECHO_START;
   2191                SERIAL_ECHOPAIR("  M207 S", LINEAR_UNIT(retract_length));
   2192                SERIAL_ECHOPAIR(" W", LINEAR_UNIT(swap_retract_length));
   2193                SERIAL_ECHOPAIR(" F", MMS_TO_MMM(LINEAR_UNIT(retract_feedrate_mm_s)));
   2194                SERIAL_ECHOLNPAIR(" Z", LINEAR_UNIT(retract_zlift));
   2195          
   2196                if (!forReplay) {
   2197                  CONFIG_ECHO_START;
   2198                  SERIAL_ECHOLNPGM("Recover: S<length> F<units/m>");
   2199                }
   2200                CONFIG_ECHO_START;
   2201                SERIAL_ECHOPAIR("  M208 S", LINEAR_UNIT(retract_recover_length));
   2202                SERIAL_ECHOPAIR(" W", LINEAR_UNIT(swap_retract_recover_length));
   2203                SERIAL_ECHOLNPAIR(" F", MMS_TO_MMM(LINEAR_UNIT(retract_recover_feedrate_mm_s)));
   2204          
   2205                if (!forReplay) {
   2206                  CONFIG_ECHO_START;
   2207                  SERIAL_ECHOLNPGM("Auto-Retract: S=0 to disable, 1 to interpret E-only moves as retract/recover");
   2208                }
   2209                CONFIG_ECHO_START;
   2210                SERIAL_ECHOLNPAIR("  M209 S", autoretract_enabled ? 1 : 0);
   2211          
   2212              #endif // FWRETRACT
   2213          
   2214              /**
   2215               * Probe Offset
   2216               */
   2217              #if HAS_BED_PROBE
   2218                if (!forReplay) {
   \                     ??report_47: (+1)
   \   00000702   0xB97C             CBNZ.N   R4,??report_49
   2219                  CONFIG_ECHO_START;
   \   00000704   0x4640             MOV      R0,R8
   \   00000706   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2220                  SERIAL_ECHOLNPGM("Z-Probe Offset (mm):");
   \   0000070A   0x.... 0x....      ADR.W    R0,`?<Constant "Z-Probe Offset (mm):\\n">`
   \   0000070E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   2221                }
   2222                CONFIG_ECHO_START;
   \   00000712   0xE003             B.N      ??report_50
   \                     ??report_51: (+1)
   \   00000714   0xB2C9             UXTB     R1,R1
   \   00000716   0x4648             MOV      R0,R9
   \   00000718   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??report_50: (+1)
   \   0000071C   0xF918 0x1B01      LDRSB    R1,[R8], #+1
   \   00000720   0x0008             MOVS     R0,R1
   \   00000722   0xD1F7             BNE.N    ??report_51
   2223                SERIAL_ECHOLNPAIR("  M851 Z", LINEAR_UNIT(zprobe_zoffset));
   \                     ??report_49: (+1)
   \   00000724   0x....             LDR.N    R0,??DataTable105_28
   \   00000726   0x6801             LDR      R1,[R0, #+0]
   \   00000728   0x.... 0x....      ADR.W    R0,`?<Constant "  M851 Z">`
   \   0000072C   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   00000730   0x4648             MOV      R0,R9
   \   00000732   0xB003             ADD      SP,SP,#+12
   \   00000734   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   00000738   0x210A             MOVS     R1,#+10
   \   0000073A   0x.... 0x....      B.W      _ZN10USARTClass5writeEh
   2224              #endif
   2225          
   2226              /**
   2227               * Bed Skew Correction
   2228               */
   2229              #if ENABLED(SKEW_CORRECTION_GCODE)
   2230                if (!forReplay) {
   2231                  CONFIG_ECHO_START;
   2232                  SERIAL_ECHOLNPGM("Skew Factor: ");
   2233                }
   2234                CONFIG_ECHO_START;
   2235                #if ENABLED(SKEW_CORRECTION_FOR_Z)
   2236                  SERIAL_ECHOPAIR("  M852 I", LINEAR_UNIT(planner.xy_skew_factor));
   2237                  SERIAL_ECHOPAIR(" J", LINEAR_UNIT(planner.xz_skew_factor));
   2238                  SERIAL_ECHOLNPAIR(" K", LINEAR_UNIT(planner.yz_skew_factor));
   2239                #else
   2240                  SERIAL_ECHOLNPAIR("  M852 S", LINEAR_UNIT(planner.xy_skew_factor));
   2241                #endif
   2242              #endif
   2243          
   2244              /**
   2245               * TMC2130 stepper driver current
   2246               */
   2247              #if HAS_TRINAMIC
   2248                if (!forReplay) {
   2249                  CONFIG_ECHO_START;
   2250                  SERIAL_ECHOLNPGM("Stepper driver current:");
   2251                }
   2252                CONFIG_ECHO_START;
   2253                SERIAL_ECHO("  M906");
   2254                #if ENABLED(X_IS_TMC2130) || ENABLED(X_IS_TMC2208)
   2255                  SERIAL_ECHOPAIR(" X ", stepperX.getCurrent());
   2256                #endif
   2257                #if ENABLED(Y_IS_TMC2130) || ENABLED(Y_IS_TMC2208)
   2258                  SERIAL_ECHOPAIR(" Y ", stepperY.getCurrent());
   2259                #endif
   2260                #if ENABLED(Z_IS_TMC2130) || ENABLED(Z_IS_TMC2208)
   2261                  SERIAL_ECHOPAIR(" Z ", stepperZ.getCurrent());
   2262                #endif
   2263                #if ENABLED(X2_IS_TMC2130) || ENABLED(X2_IS_TMC2208)
   2264                  SERIAL_ECHOPAIR(" X2 ", stepperX2.getCurrent());
   2265                #endif
   2266                #if ENABLED(Y2_IS_TMC2130) || ENABLED(Y2_IS_TMC2208)
   2267                  SERIAL_ECHOPAIR(" Y2 ", stepperY2.getCurrent());
   2268                #endif
   2269                #if ENABLED(Z2_IS_TMC2130) || ENABLED(Z2_IS_TMC2208)
   2270                  SERIAL_ECHOPAIR(" Z2 ", stepperZ2.getCurrent());
   2271                #endif
   2272                #if ENABLED(E0_IS_TMC2130) || ENABLED(E0_IS_TMC2208)
   2273                  SERIAL_ECHOPAIR(" E0 ", stepperE0.getCurrent());
   2274                #endif
   2275                #if ENABLED(E1_IS_TMC2130) || ENABLED(E1_IS_TMC2208)
   2276                  SERIAL_ECHOPAIR(" E1 ", stepperE1.getCurrent());
   2277                #endif
   2278                #if ENABLED(E2_IS_TMC2130) || ENABLED(E2_IS_TMC2208)
   2279                  SERIAL_ECHOPAIR(" E2 ", stepperE2.getCurrent());
   2280                #endif
   2281                #if ENABLED(E3_IS_TMC2130) || ENABLED(E3_IS_TMC2208)
   2282                  SERIAL_ECHOPAIR(" E3 ", stepperE3.getCurrent());
   2283                #endif
   2284                #if ENABLED(E4_IS_TMC2130) || ENABLED(E4_IS_TMC2208)
   2285                  SERIAL_ECHOPAIR(" E4 ", stepperE4.getCurrent());
   2286                #endif
   2287                SERIAL_EOL();
   2288              #endif
   2289          
   2290              /**
   2291               * TMC2130 Sensorless homing thresholds
   2292               */
   2293              #if ENABLED(SENSORLESS_HOMING)
   2294                if (!forReplay) {
   2295                  CONFIG_ECHO_START;
   2296                  SERIAL_ECHOLNPGM("Sensorless homing threshold:");
   2297                }
   2298                CONFIG_ECHO_START;
   2299                SERIAL_ECHO("  M914");
   2300                #if ENABLED(X_IS_TMC2130)
   2301                  SERIAL_ECHOPAIR(" X", stepperX.sgt());
   2302                #endif
   2303                #if ENABLED(X2_IS_TMC2130)
   2304                  SERIAL_ECHOPAIR(" X2 ", stepperX2.sgt());
   2305                #endif
   2306                #if ENABLED(Y_IS_TMC2130)
   2307                  SERIAL_ECHOPAIR(" Y", stepperY.sgt());
   2308                #endif
   2309                #if ENABLED(X2_IS_TMC2130)
   2310                  SERIAL_ECHOPAIR(" Y2 ", stepperY2.sgt());
   2311                #endif
   2312                SERIAL_EOL();
   2313              #endif
   2314          
   2315              /**
   2316               * Linear Advance
   2317               */
   2318              #if ENABLED(LIN_ADVANCE)
   2319                if (!forReplay) {
   2320                  CONFIG_ECHO_START;
   2321                  SERIAL_ECHOLNPGM("Linear Advance:");
   2322                }
   2323                CONFIG_ECHO_START;
   2324                SERIAL_ECHOPAIR("  M900 K", planner.extruder_advance_k);
   2325                SERIAL_ECHOLNPAIR(" R", planner.advance_ed_ratio);
   2326              #endif
   2327          
   2328              #if HAS_MOTOR_CURRENT_PWM
   2329                CONFIG_ECHO_START;
   2330                if (!forReplay) {
   2331                  SERIAL_ECHOLNPGM("Stepper motor currents:");
   2332                  CONFIG_ECHO_START;
   2333                }
   2334                SERIAL_ECHOPAIR("  M907 X", stepper.motor_current_setting[0]);
   2335                SERIAL_ECHOPAIR(" Z", stepper.motor_current_setting[1]);
   2336                SERIAL_ECHOPAIR(" E", stepper.motor_current_setting[2]);
   2337                SERIAL_EOL();
   2338              #endif
   2339            }
   2340              }
   \                     ??report_42: (+1)
   \   0000073E   0xB003             ADD      SP,SP,#+12
   \   00000740   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98:
   \   00000000   0x29 0x0A          DC8      0x29, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_1:
   \   00000000   0x........         DC32     current_position

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_2:
   \   00000000   0x........         DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_3:
   \   00000000   0x........         DC32     _ZN14MarlinSettings12eeprom_errorE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_4:
   \   00000000   0x........         DC32     echomagic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_5:
   \   00000000   0x........         DC32     `?<Constant "Error writing to EEPR...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_6:
   \   00000000   0x........         DC32     _ZN7Planner17axis_steps_per_mmE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_7:
   \   00000000   0x........         DC32     _ZN7Planner17max_feedrate_mm_sE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_8:
   \   00000000   0x........         DC32     _ZN7Planner26max_acceleration_mm_per_s2E

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_9:
   \   00000000   0x........         DC32     _ZN7Planner12accelerationE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_10:
   \   00000000   0x........         DC32     _ZN7Planner20retract_accelerationE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_11:
   \   00000000   0x........         DC32     _ZN7Planner19travel_accelerationE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_12:
   \   00000000   0x........         DC32     _ZN7Planner17min_feedrate_mm_sE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_13:
   \   00000000   0x........         DC32     _ZN7Planner24min_travel_feedrate_mm_sE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_14:
   \   00000000   0x........         DC32     _ZN7Planner19min_segment_time_usE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_15:
   \   00000000   0x........         DC32     _ZN7Planner8max_jerkE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_16:
   \   00000000   0x........         DC32     home_offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_17:
   \   00000000   0x........         DC32     hotend_offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_18:
   \   00000000   0x........         DC32     _ZN7Planner13z_fade_heightE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_19:
   \   00000000   0x........         DC32     _ZN17mesh_bed_leveling8has_meshE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_20:
   \   00000000   0x........         DC32     _ZN17mesh_bed_leveling8z_offsetE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_21:
   \   00000000   0x........         DC32     _ZN17mesh_bed_leveling8z_valuesE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_22:
   \   00000000   0x........         DC32     zprobe_zoffset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_23:
   \   00000000   0x........         DC32     _ZN7Planner16bed_level_matrixE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_24:
   \   00000000   0x........         DC32     bilinear_grid_spacing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_25:
   \   00000000   0x........         DC32     bilinear_start

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_26:
   \   00000000   0x........         DC32     z_values

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_27:
   \   00000000   0x........         DC32     _ZN7Planner15leveling_activeE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_28:
   \   00000000   0x........         DC32     _ZN20unified_bed_leveling12storage_slotE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_29:
   \   00000000   0x........         DC32     delta_height

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_30:
   \   00000000   0x........         DC32     delta_endstop_adj

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_31:
   \   00000000   0x........         DC32     delta_radius

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_32:
   \   00000000   0x........         DC32     delta_diagonal_rod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_33:
   \   00000000   0x........         DC32     delta_segments_per_second

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_34:
   \   00000000   0x........         DC32     delta_calibration_radius

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_35:
   \   00000000   0x........         DC32     delta_tower_angle_trim

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_36:
   \   00000000   0x........         DC32     z_endstop_adj

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_37:
   \   00000000   0x453B8000         DC32     0x453b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_38:
   \   00000000   0x........         DC32     _ZN11Temperature2KdE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_39:
   \   00000000   0x........         DC32     _ZN11Temperature2KiE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_40:
   \   00000000   0x........         DC32     _ZN11Temperature2KpE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_41:
   \   00000000   0x........         DC32     _ZN11Temperature5bedKpE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_42:
   \   00000000   0x........         DC32     _ZN11Temperature5bedKiE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_43:
   \   00000000   0x........         DC32     _ZN11Temperature5bedKdE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_44:
   \   00000000   0x40400000         DC32     0x40400000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_45:
   \   00000000   0x42340000         DC32     0x42340000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_46:
   \   00000000   0x41500000         DC32     0x41500000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_47:
   \   00000000   0x........         DC32     _ZN11GCodeParser18volumetric_enabledE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_48:
   \   00000000   0x........         DC32     _ZN7Planner13filament_sizeE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_49:
   \   00000000   0x........         DC32     version

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_50:
   \   00000000   0x........         DC32     `?<Constant " bytes; crc ">`

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "000">`:
   \   00000000   0x30 0x30          DC8 "000"
   \              0x30 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {180, 240}>`:
   \   00000000   0x000000B4         DC32 180, 240
   \              0x000000F0   

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {70, 110}>`:
   \   00000000   0x00000046         DC32 70, 110
   \              0x0000006E   

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Settings Stored (">`:
   \   00000000   0x53 0x65          DC8 "Settings Stored ("
   \              0x74 0x74    
   \              0x69 0x6E    
   \              0x67 0x73    
   \              0x20 0x53    
   \              0x74 0x6F    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x28 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99:
   \   00000000   0x........         DC32     bilinear_grid_spacing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_1:
   \   00000000   0x........         DC32     bilinear_start

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_2:
   \   00000000   0x........         DC32     z_values

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " stored settings retr...">`:
   \   00000000   0x20 0x73          DC8 " stored settings retrieved ("
   \              0x74 0x6F    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x73 0x65    
   \              0x74 0x74    
   \              0x69 0x6E    
   \              0x67 0x73    
   \              0x20 0x72    
   \              0x65 0x74    
   \              0x72 0x69    
   \              0x65 0x76    
   \              0x65 0x64    
   \              0x20 0x28    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " bytes; crc ">`:
   \   00000000   0x20 0x62          DC8 " bytes; crc "
   \              0x79 0x74    
   \              0x65 0x73    
   \              0x3B 0x20    
   \              0x63 0x72    
   \              0x63 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EEPROM CRC mismatch -...">`:
   \   00000000   0x45 0x45          DC8 "EEPROM CRC mismatch - (stored) "
   \              0x50 0x52    
   \              0x4F 0x4D    
   \              0x20 0x43    
   \              0x52 0x43    
   \              0x20 0x6D    
   \              0x69 0x73    
   \              0x6D 0x61    
   \              0x74 0x63    
   \              0x68 0x20    
   \              0x2D 0x20    
   \              0x28 0x73    
   \              0x74 0x6F    
   \              0x72 0x65    
   \              0x64 0x29    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " != ">`:
   \   00000000   0x20 0x21          DC8 " != "
   \              0x3D 0x20    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " (calculated)!\\n">`:
   \   00000000   0x20 0x28          DC8 " (calculated)!\012"
   \              0x63 0x61    
   \              0x6C 0x63    
   \              0x75 0x6C    
   \              0x61 0x74    
   \              0x65 0x64    
   \              0x29 0x21    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " initialized.\\n\\n">`:
   \   00000000   0x20 0x69          DC8 " initialized.\012\012"
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?Can\\'t enable ">`:
   \   00000000   0x3F 0x43          DC8 "?Can't enable "
   \              0x61 0x6E    
   \              0x27 0x74    
   \              0x20 0x65    
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Mesh ">`:
   \   00000000   0x4D 0x65          DC8 "Mesh "
   \              0x73 0x68    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " loaded from storage.\\n">`:
   \   00000000   0x20 0x6C          DC8 " loaded from storage.\012"
   \              0x6F 0x61    
   \              0x64 0x65    
   \              0x64 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x20 0x73    
   \              0x74 0x6F    
   \              0x72 0x61    
   \              0x67 0x65    
   \              0x2E 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "UBL System reset()\\n">`:
   \   00000000   0x55 0x42          DC8 "UBL System reset()\012"
   \              0x4C 0x20    
   \              0x53 0x79    
   \              0x73 0x74    
   \              0x65 0x6D    
   \              0x20 0x72    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x28 0x29    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?Invalid slot.\\n">`:
   \   00000000   0x3F 0x49          DC8 "?Invalid slot.\012"
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x73    
   \              0x6C 0x6F    
   \              0x74 0x2E    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " mesh slots available.\\n">`:
   \   00000000   0x20 0x6D          DC8 " mesh slots available.\012"
   \              0x65 0x73    
   \              0x68 0x20    
   \              0x73 0x6C    
   \              0x6F 0x74    
   \              0x73 0x20    
   \              0x61 0x76    
   \              0x61 0x69    
   \              0x6C 0x61    
   \              0x62 0x6C    
   \              0x65 0x2E    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101:
   \   00000000   0x........         DC32     _ZN7Planner15leveling_activeE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_1:
   \   00000000   0x........         DC32     _ZN20unified_bed_leveling12storage_slotE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_2:
   \   00000000   0x........         DC32     delta_height

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_3:
   \   00000000   0x........         DC32     delta_endstop_adj

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_4:
   \   00000000   0x........         DC32     delta_radius

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_5:
   \   00000000   0x........         DC32     delta_diagonal_rod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_6:
   \   00000000   0x........         DC32     delta_segments_per_second

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_7:
   \   00000000   0x........         DC32     delta_calibration_radius

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable101_8:
   \   00000000   0x........         DC32     delta_tower_angle_trim

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102:
   \   00000000   0x29 0x0A          DC8      0x29, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_1:
   \   00000000   0x........         DC32     z_endstop_adj

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_2:
   \   00000000   0x2E 0x0A          DC8      0x2E, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "E2END=">`:
   \   00000000   0x45 0x32          DC8 "E2END="
   \              0x45 0x4E    
   \              0x44 0x3D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " meshes_end=">`:
   \   00000000   0x20 0x6D          DC8 " meshes_end="
   \              0x65 0x73    
   \              0x68 0x65    
   \              0x73 0x5F    
   \              0x65 0x6E    
   \              0x64 0x3D    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " slot=">`:
   \   00000000   0x20 0x73          DC8 " slot="
   \              0x6C 0x6F    
   \              0x74 0x3D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Error writing to EEPR...">`:
   \   00000000   0x45 0x72          DC8 "Error writing to EEPROM!\012"
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x77 0x72    
   \              0x69 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x6F    
   \              0x20 0x45    
   \              0x45 0x50    
   \              0x52 0x4F    
   \              0x4D 0x21    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Mesh saved in slot ">`:
   \   00000000   0x4D 0x65          DC8 "Mesh saved in slot "
   \              0x73 0x68    
   \              0x20 0x73    
   \              0x61 0x76    
   \              0x65 0x64    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x73 0x6C    
   \              0x6F 0x74    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103:
   \   00000000   0x........         DC32     _ZN11Temperature2KpE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_1:
   \   00000000   0x453B8000         DC32     0x453b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_2:
   \   00000000   0x........         DC32     _ZN11Temperature2KiE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_3:
   \   00000000   0x........         DC32     _ZN11Temperature2KdE

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Mesh loaded from slot ">`:
   \   00000000   0x4D 0x65          DC8 "Mesh loaded from slot "
   \              0x73 0x68    
   \              0x20 0x6C    
   \              0x6F 0x61    
   \              0x64 0x65    
   \              0x64 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x20 0x73    
   \              0x6C 0x6F    
   \              0x74 0x20    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104:
   \   00000000   0x........         DC32     _ZN11Temperature5bedKpE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_1:
   \   00000000   0x........         DC32     _ZN11Temperature5bedKiE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_2:
   \   00000000   0x........         DC32     _ZN11Temperature5bedKdE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_3:
   \   00000000   0x........         DC32     Serial3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_4:
   \   00000000   0x........         DC32     echomagic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_5:
   \   00000000   0x........         DC32     errormagic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_6:
   \   00000000   0x........         DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_7:
   \   00000000   0x........         DC32     _ZN14MarlinSettings12eeprom_errorE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104_8:
   \   00000000   0x........         DC32     _ZN20unified_bed_leveling8z_valuesE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105:
   \   00000000   0x........         DC32     _ZN14MarlinSettings12eeprom_errorE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_1:
   \   00000000   0x20 0x48          DC8      0x20, 0x48, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_2:
   \   00000000   0x20 0x53          DC8      0x20, 0x53, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_3:
   \   00000000   0x20 0x50          DC8      0x20, 0x50, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_4:
   \   00000000   0x20 0x49          DC8      0x20, 0x49, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_5:
   \   00000000   0x20 0x44          DC8      0x20, 0x44, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_6:
   \   00000000   0x........         DC32     _ZN7Planner17axis_steps_per_mmE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_7:
   \   00000000   0x42A13333         DC32     0x42a13333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_8:
   \   00000000   0x........         DC32     _ZN7Planner26max_acceleration_mm_per_s2E

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_9:
   \   00000000   0x........         DC32     _ZN7Planner17max_feedrate_mm_sE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_10:
   \   00000000   0x42A0CCCD         DC32     0x42a0cccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_11:
   \   00000000   0x43480000         DC32     0x43480000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_12:
   \   00000000   0x43C80000         DC32     0x43c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_13:
   \   00000000   0x428C0000         DC32     0x428c0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_14:
   \   00000000   0x........         DC32     _ZN7Planner12accelerationE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_15:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_16:
   \   00000000   0x42B40000         DC32     0x42b40000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_17:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_18:
   \   00000000   0x........         DC32     _ZN7Planner20retract_accelerationE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_19:
   \   00000000   0x........         DC32     _ZN7Planner19travel_accelerationE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_20:
   \   00000000   0x........         DC32     _ZN7Planner17min_feedrate_mm_sE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_21:
   \   00000000   0x........         DC32     _ZN7Planner24min_travel_feedrate_mm_sE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_22:
   \   00000000   0x........         DC32     _ZN7Planner19min_segment_time_usE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_23:
   \   00000000   0x3E99999A         DC32     0x3e99999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_24:
   \   00000000   0x........         DC32     _ZN7Planner8max_jerkE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_25:
   \   00000000   0x40A00000         DC32     0x40a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_26:
   \   00000000   0x........         DC32     home_offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_27:
   \   00000000   0x........         DC32     hotend_offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_28:
   \   00000000   0x........         DC32     zprobe_zoffset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_29:
   \   00000000   0x3F4CCCCD         DC32     0x3f4ccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_30:
   \   00000000   0x........         DC32     delta_height

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_31:
   \   00000000   0x........         DC32     delta_endstop_adj

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_32:
   \   00000000   0x........         DC32     delta_radius

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_33:
   \   00000000   0x........         DC32     delta_diagonal_rod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_34:
   \   00000000   0x........         DC32     delta_segments_per_second

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_35:
   \   00000000   0x........         DC32     delta_calibration_radius

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_36:
   \   00000000   0x........         DC32     delta_tower_angle_trim

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_37:
   \   00000000   0x........         DC32     z_endstop_adj

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_38:
   \   00000000   0x........         DC32     _ZN11Temperature2KpE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_39:
   \   00000000   0x41B1999A         DC32     0x41b1999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_40:
   \   00000000   0x........         DC32     _ZN11Temperature2KiE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_41:
   \   00000000   0x3E3531A6         DC32     0x3e3531a6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_42:
   \   00000000   0x........         DC32     _ZN11Temperature2KdE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_43:
   \   00000000   0x442DF340         DC32     0x442df340

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_44:
   \   00000000   0x3B76F5EB         DC32     0x3b76f5eb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_45:
   \   00000000   0x44E90070         DC32     0x44e90070

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_46:
   \   00000000   0x........         DC32     _ZN11GCodeParser18volumetric_enabledE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_47:
   \   00000000   0x40400000         DC32     0x40400000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_48:
   \   00000000   0x........         DC32     _ZN7Planner13filament_sizeE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_49:
   \   00000000   0x........         DC32     _ZN8Endstops7enabledE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_50:
   \   00000000   0x........         DC32     _ZN8Endstops16enabled_globallyE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_51:
   \   00000000   0x........         DC32     echomagic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_52:
   \   00000000   0x........         DC32     Serial3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_53:
   \   00000000   0x........         DC32     mksCfg+0x36

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_54:
   \   00000000   0x........         DC32     _ZN7Planner15leveling_activeE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_55:
   \   00000000   0x........         DC32     _ZN7Planner13z_fade_heightE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_56:
   \   00000000   0x........         DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_57:
   \   00000000   0x........         DC32     _ZN17mesh_bed_leveling8z_valuesE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_58:
   \   00000000   0x........         DC32     _ZN20unified_bed_leveling12storage_slotE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_59:
   \   00000000   0x88E368F1         DC32     0x88e368f1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_60:
   \   00000000   0x3FC4F8B5         DC32     0x3fc4f8b5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_61:
   \   00000000   0x........         DC32     _ZN11Temperature5bedKpE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_62:
   \   00000000   0x........         DC32     _ZN11Temperature5bedKiE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_63:
   \   00000000   0x........         DC32     _ZN11Temperature5bedKdE

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Hardcoded Default Set...">`:
   \   00000000   0x48 0x61          DC8 "Hardcoded Default Settings Loaded\012"
   \              0x72 0x64    
   \              0x63 0x6F    
   \              0x64 0x65    
   \              0x64 0x20    
   \              0x44 0x65    
   \              0x66 0x61    
   \              0x75 0x6C    
   \              0x74 0x20    
   \              0x53 0x65    
   \              0x74 0x74    
   \              0x69 0x6E    
   \              0x67 0x73    
   \              0x20 0x4C    
   \              0x6F 0x61    
   \              0x64 0x65    
   \              0x64 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  G21    ; Units in mm\\n">`:
   \   00000000   0x20 0x20          DC8 "  G21    ; Units in mm\012"
   \              0x47 0x32    
   \              0x31 0x20    
   \              0x20 0x20    
   \              0x20 0x3B    
   \              0x20 0x55    
   \              0x6E 0x69    
   \              0x74 0x73    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x6D 0x6D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Filament settings:">`:
   \   00000000   0x46 0x69          DC8 "Filament settings:"
   \              0x6C 0x61    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x73 0x3A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Disabled\\n">`:
   \   00000000   0x20 0x44          DC8 " Disabled\012"
   \              0x69 0x73    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x0A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M200 D">`:
   \   00000000   0x20 0x20          DC8 "  M200 D"
   \              0x4D 0x32    
   \              0x30 0x30    
   \              0x20 0x44    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M200 T1 D">`:
   \   00000000   0x20 0x20          DC8 "  M200 T1 D"
   \              0x4D 0x32    
   \              0x30 0x30    
   \              0x20 0x54    
   \              0x31 0x20    
   \              0x44 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M200 D0\\n">`:
   \   00000000   0x20 0x20          DC8 "  M200 D0\012"
   \              0x4D 0x32    
   \              0x30 0x30    
   \              0x20 0x44    
   \              0x30 0x0A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Steps per unit:\\n">`:
   \   00000000   0x53 0x74          DC8 "Steps per unit:\012"
   \              0x65 0x70    
   \              0x73 0x20    
   \              0x70 0x65    
   \              0x72 0x20    
   \              0x75 0x6E    
   \              0x69 0x74    
   \              0x3A 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M92 X">`:
   \   00000000   0x20 0x20          DC8 "  M92 X"
   \              0x4D 0x39    
   \              0x32 0x20    
   \              0x58 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M92 T">`:
   \   00000000   0x20 0x20          DC8 "  M92 T"
   \              0x4D 0x39    
   \              0x32 0x20    
   \              0x54 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Maximum feedrates (un...">`:
   \   00000000   0x4D 0x61          DC8 "Maximum feedrates (units/s):\012"
   \              0x78 0x69    
   \              0x6D 0x75    
   \              0x6D 0x20    
   \              0x66 0x65    
   \              0x65 0x64    
   \              0x72 0x61    
   \              0x74 0x65    
   \              0x73 0x20    
   \              0x28 0x75    
   \              0x6E 0x69    
   \              0x74 0x73    
   \              0x2F 0x73    
   \              0x29 0x3A    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M203 X">`:
   \   00000000   0x20 0x20          DC8 "  M203 X"
   \              0x4D 0x32    
   \              0x30 0x33    
   \              0x20 0x58    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M203 T">`:
   \   00000000   0x20 0x20          DC8 "  M203 T"
   \              0x4D 0x32    
   \              0x30 0x33    
   \              0x20 0x54    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Maximum Acceleration ...">`:
   \   00000000   0x4D 0x61          DC8 "Maximum Acceleration (units/s2):\012"
   \              0x78 0x69    
   \              0x6D 0x75    
   \              0x6D 0x20    
   \              0x41 0x63    
   \              0x63 0x65    
   \              0x6C 0x65    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x28    
   \              0x75 0x6E    
   \              0x69 0x74    
   \              0x73 0x2F    
   \              0x73 0x32    
   \              0x29 0x3A    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M201 X">`:
   \   00000000   0x20 0x20          DC8 "  M201 X"
   \              0x4D 0x32    
   \              0x30 0x31    
   \              0x20 0x58    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M201 T">`:
   \   00000000   0x20 0x20          DC8 "  M201 T"
   \              0x4D 0x32    
   \              0x30 0x31    
   \              0x20 0x54    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Acceleration (units/s...">`:
   \   00000000   0x41 0x63          DC8 41H, 63H, 63H, 65H, 6CH, 65H, 72H, 61H
   \              0x63 0x65    
   \              0x6C 0x65    
   \              0x72 0x61    
   \   00000008   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 20H, 28H, 75H, 6EH
   \              0x6F 0x6E    
   \              0x20 0x28    
   \              0x75 0x6E    
   \   00000010   0x69 0x74          DC8 69H, 74H, 73H, 2FH, 73H, 32H, 29H, 3AH
   \              0x73 0x2F    
   \              0x73 0x32    
   \              0x29 0x3A    
   \   00000018   0x20 0x50          DC8 20H, 50H, 3CH, 70H, 72H, 69H, 6EH, 74H
   \              0x3C 0x70    
   \              0x72 0x69    
   \              0x6E 0x74    
   \   00000020   0x5F 0x61          DC8 5FH, 61H, 63H, 63H, 65H, 6CH, 3EH, 20H
   \              0x63 0x63    
   \              0x65 0x6C    
   \              0x3E 0x20    
   \   00000028   0x52 0x3C          DC8 52H, 3CH, 72H, 65H, 74H, 72H, 61H, 63H
   \              0x72 0x65    
   \              0x74 0x72    
   \              0x61 0x63    
   \   00000030   0x74 0x5F          DC8 74H, 5FH, 61H, 63H, 63H, 65H, 6CH, 3EH
   \              0x61 0x63    
   \              0x63 0x65    
   \              0x6C 0x3E    
   \   00000038   0x20 0x54          DC8 20H, 54H, 3CH, 74H, 72H, 61H, 76H, 65H
   \              0x3C 0x74    
   \              0x72 0x61    
   \              0x76 0x65    
   \   00000040   0x6C 0x5F          DC8 6CH, 5FH, 61H, 63H, 63H, 65H, 6CH, 3EH
   \              0x61 0x63    
   \              0x63 0x65    
   \              0x6C 0x3E    
   \   00000048   0x0A 0x00          DC8 0AH, 0
   \   0000004A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M204 P">`:
   \   00000000   0x20 0x20          DC8 "  M204 P"
   \              0x4D 0x32    
   \              0x30 0x34    
   \              0x20 0x50    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Advanced: S<min_feedr...">`:
   \   00000000   0x41 0x64          DC8 41H, 64H, 76H, 61H, 6EH, 63H, 65H, 64H
   \              0x76 0x61    
   \              0x6E 0x63    
   \              0x65 0x64    
   \   00000008   0x3A 0x20          DC8 3AH, 20H, 53H, 3CH, 6DH, 69H, 6EH, 5FH
   \              0x53 0x3C    
   \              0x6D 0x69    
   \              0x6E 0x5F    
   \   00000010   0x66 0x65          DC8 66H, 65H, 65H, 64H, 72H, 61H, 74H, 65H
   \              0x65 0x64    
   \              0x72 0x61    
   \              0x74 0x65    
   \   00000018   0x3E 0x20          DC8 3EH, 20H, 54H, 3CH, 6DH, 69H, 6EH, 5FH
   \              0x54 0x3C    
   \              0x6D 0x69    
   \              0x6E 0x5F    
   \   00000020   0x74 0x72          DC8 74H, 72H, 61H, 76H, 65H, 6CH, 5FH, 66H
   \              0x61 0x76    
   \              0x65 0x6C    
   \              0x5F 0x66    
   \   00000028   0x65 0x65          DC8 65H, 65H, 64H, 72H, 61H, 74H, 65H, 3EH
   \              0x64 0x72    
   \              0x61 0x74    
   \              0x65 0x3E    
   \   00000030   0x20 0x42          DC8 20H, 42H, 3CH, 6DH, 69H, 6EH, 5FH, 73H
   \              0x3C 0x6D    
   \              0x69 0x6E    
   \              0x5F 0x73    
   \   00000038   0x65 0x67          DC8 65H, 67H, 6DH, 65H, 6EH, 74H, 5FH, 74H
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x5F 0x74    
   \   00000040   0x69 0x6D          DC8 69H, 6DH, 65H, 5FH, 75H, 73H, 3EH, 20H
   \              0x65 0x5F    
   \              0x75 0x73    
   \              0x3E 0x20    
   \   00000048   0x58 0x3C          DC8 58H, 3CH, 6DH, 61H, 78H, 5FH, 78H, 79H
   \              0x6D 0x61    
   \              0x78 0x5F    
   \              0x78 0x79    
   \   00000050   0x5F 0x6A          DC8 5FH, 6AH, 65H, 72H, 6BH, 3EH, 20H, 5AH
   \              0x65 0x72    
   \              0x6B 0x3E    
   \              0x20 0x5A    
   \   00000058   0x3C 0x6D          DC8 3CH, 6DH, 61H, 78H, 5FH, 7AH, 5FH, 6AH
   \              0x61 0x78    
   \              0x5F 0x7A    
   \              0x5F 0x6A    
   \   00000060   0x65 0x72          DC8 65H, 72H, 6BH, 3EH, 20H, 45H, 3CH, 6DH
   \              0x6B 0x3E    
   \              0x20 0x45    
   \              0x3C 0x6D    
   \   00000068   0x61 0x78          DC8 61H, 78H, 5FH, 65H, 5FH, 6AH, 65H, 72H
   \              0x5F 0x65    
   \              0x5F 0x6A    
   \              0x65 0x72    
   \   00000070   0x6B 0x3E          DC8 6BH, 3EH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M205 S">`:
   \   00000000   0x20 0x20          DC8 "  M205 S"
   \              0x4D 0x32    
   \              0x30 0x35    
   \              0x20 0x53    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Home offset:\\n">`:
   \   00000000   0x48 0x6F          DC8 "Home offset:\012"
   \              0x6D 0x65    
   \              0x20 0x6F    
   \              0x66 0x66    
   \              0x73 0x65    
   \              0x74 0x3A    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M206 X">`:
   \   00000000   0x20 0x20          DC8 "  M206 X"
   \              0x4D 0x32    
   \              0x30 0x36    
   \              0x20 0x58    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Hotend offsets:\\n">`:
   \   00000000   0x48 0x6F          DC8 "Hotend offsets:\012"
   \              0x74 0x65    
   \              0x6E 0x64    
   \              0x20 0x6F    
   \              0x66 0x66    
   \              0x73 0x65    
   \              0x74 0x73    
   \              0x3A 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M218 T">`:
   \   00000000   0x20 0x20          DC8 "  M218 T"
   \              0x4D 0x32    
   \              0x31 0x38    
   \              0x20 0x54    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Mesh Bed Leveling:\\n">`:
   \   00000000   0x4D 0x65          DC8 "Mesh Bed Leveling:\012"
   \              0x73 0x68    
   \              0x20 0x42    
   \              0x65 0x64    
   \              0x20 0x4C    
   \              0x65 0x76    
   \              0x65 0x6C    
   \              0x69 0x6E    
   \              0x67 0x3A    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Auto Bed Leveling:\\n">`:
   \   00000000   0x41 0x75          DC8 "Auto Bed Leveling:\012"
   \              0x74 0x6F    
   \              0x20 0x42    
   \              0x65 0x64    
   \              0x20 0x4C    
   \              0x65 0x76    
   \              0x65 0x6C    
   \              0x69 0x6E    
   \              0x67 0x3A    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M420 S">`:
   \   00000000   0x20 0x20          DC8 "  M420 S"
   \              0x4D 0x34    
   \              0x32 0x30    
   \              0x20 0x53    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  G29 S3 X">`:
   \   00000000   0x20 0x20          DC8 "  G29 S3 X"
   \              0x47 0x32    
   \              0x39 0x20    
   \              0x53 0x33    
   \              0x20 0x58    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nActive Mesh Slot: ">`:
   \   00000000   0x0A 0x41          DC8 "\012Active Mesh Slot: "
   \              0x63 0x74    
   \              0x69 0x76    
   \              0x65 0x20    
   \              0x4D 0x65    
   \              0x73 0x68    
   \              0x20 0x53    
   \              0x6C 0x6F    
   \              0x74 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EEPROM can hold ">`:
   \   00000000   0x45 0x45          DC8 "EEPROM can hold "
   \              0x50 0x52    
   \              0x4F 0x4D    
   \              0x20 0x63    
   \              0x61 0x6E    
   \              0x20 0x68    
   \              0x6F 0x6C    
   \              0x64 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " meshes.\\n\\n">`:
   \   00000000   0x20 0x6D          DC8 " meshes.\012\012"
   \              0x65 0x73    
   \              0x68 0x65    
   \              0x73 0x2E    
   \              0x0A 0x0A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Endstop adjustment:\\n">`:
   \   00000000   0x45 0x6E          DC8 "Endstop adjustment:\012"
   \              0x64 0x73    
   \              0x74 0x6F    
   \              0x70 0x20    
   \              0x61 0x64    
   \              0x6A 0x75    
   \              0x73 0x74    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x3A 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M666 X">`:
   \   00000000   0x20 0x20          DC8 "  M666 X"
   \              0x4D 0x36    
   \              0x36 0x36    
   \              0x20 0x58    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Delta settings: L<dia...">`:
   \   00000000   0x44 0x65          DC8 44H, 65H, 6CH, 74H, 61H, 20H, 73H, 65H
   \              0x6C 0x74    
   \              0x61 0x20    
   \              0x73 0x65    
   \   00000008   0x74 0x74          DC8 74H, 74H, 69H, 6EH, 67H, 73H, 3AH, 20H
   \              0x69 0x6E    
   \              0x67 0x73    
   \              0x3A 0x20    
   \   00000010   0x4C 0x3C          DC8 4CH, 3CH, 64H, 69H, 61H, 67H, 6FH, 6EH
   \              0x64 0x69    
   \              0x61 0x67    
   \              0x6F 0x6E    
   \   00000018   0x61 0x6C          DC8 61H, 6CH, 5FH, 72H, 6FH, 64H, 3EH, 20H
   \              0x5F 0x72    
   \              0x6F 0x64    
   \              0x3E 0x20    
   \   00000020   0x52 0x3C          DC8 52H, 3CH, 72H, 61H, 64H, 69H, 75H, 73H
   \              0x72 0x61    
   \              0x64 0x69    
   \              0x75 0x73    
   \   00000028   0x3E 0x20          DC8 3EH, 20H, 48H, 3CH, 68H, 65H, 69H, 67H
   \              0x48 0x3C    
   \              0x68 0x65    
   \              0x69 0x67    
   \   00000030   0x68 0x74          DC8 68H, 74H, 3EH, 20H, 53H, 3CH, 73H, 65H
   \              0x3E 0x20    
   \              0x53 0x3C    
   \              0x73 0x65    
   \   00000038   0x67 0x6D          DC8 67H, 6DH, 65H, 6EH, 74H, 73H, 5FH, 70H
   \              0x65 0x6E    
   \              0x74 0x73    
   \              0x5F 0x70    
   \   00000040   0x65 0x72          DC8 65H, 72H, 5FH, 73H, 3EH, 20H, 42H, 3CH
   \              0x5F 0x73    
   \              0x3E 0x20    
   \              0x42 0x3C    
   \   00000048   0x63 0x61          DC8 63H, 61H, 6CH, 69H, 62H, 72H, 61H, 74H
   \              0x6C 0x69    
   \              0x62 0x72    
   \              0x61 0x74    
   \   00000050   0x69 0x6F          DC8 69H, 6FH, 6EH, 20H, 72H, 61H, 64H, 69H
   \              0x6E 0x20    
   \              0x72 0x61    
   \              0x64 0x69    
   \   00000058   0x75 0x73          DC8 75H, 73H, 3EH, 20H, 58H, 59H, 5AH, 3CH
   \              0x3E 0x20    
   \              0x58 0x59    
   \              0x5A 0x3C    
   \   00000060   0x74 0x6F          DC8 74H, 6FH, 77H, 65H, 72H, 20H, 61H, 6EH
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x61 0x6E    
   \   00000068   0x67 0x6C          DC8 67H, 6CH, 65H, 20H, 63H, 6FH, 72H, 72H
   \              0x65 0x20    
   \              0x63 0x6F    
   \              0x72 0x72    
   \   00000070   0x65 0x63          DC8 65H, 63H, 74H, 69H, 6FH, 6EH, 73H, 3EH
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x73 0x3E    
   \   00000078   0x0A 0x00          DC8 0AH, 0
   \   0000007A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M665 L">`:
   \   00000000   0x20 0x20          DC8 "  M665 L"
   \              0x4D 0x36    
   \              0x36 0x35    
   \              0x20 0x4C    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M666">`:
   \   00000000   0x20 0x20          DC8 "  M666"
   \              0x4D 0x36    
   \              0x36 0x36    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "PID settings:\\n">`:
   \   00000000   0x50 0x49          DC8 "PID settings:\012"
   \              0x44 0x20    
   \              0x73 0x65    
   \              0x74 0x74    
   \              0x69 0x6E    
   \              0x67 0x73    
   \              0x3A 0x0A    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M301 E">`:
   \   00000000   0x20 0x20          DC8 "  M301 E"
   \              0x4D 0x33    
   \              0x30 0x31    
   \              0x20 0x45    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M301 P">`:
   \   00000000   0x20 0x20          DC8 "  M301 P"
   \              0x4D 0x33    
   \              0x30 0x31    
   \              0x20 0x50    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M304 P">`:
   \   00000000   0x20 0x20          DC8 "  M304 P"
   \              0x4D 0x33    
   \              0x30 0x34    
   \              0x20 0x50    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Z-Probe Offset (mm):\\n">`:
   \   00000000   0x5A 0x2D          DC8 "Z-Probe Offset (mm):\012"
   \              0x50 0x72    
   \              0x6F 0x62    
   \              0x65 0x20    
   \              0x4F 0x66    
   \              0x66 0x73    
   \              0x65 0x74    
   \              0x20 0x28    
   \              0x6D 0x6D    
   \              0x29 0x3A    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  M851 Z">`:
   \   00000000   0x20 0x20          DC8 "  M851 Z"
   \              0x4D 0x38    
   \              0x35 0x31    
   \              0x20 0x5A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {{(0.0F), (0.0F)}, {(0.0F), (0.0F)}`:
   \   00000000   0x00000000         DC32 0H, 0H, 0H, 0H, 0H
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {(0.0F), (0.0F), (0.0F)}>`:
   \   00000000   0x00000000         DC32 0H, 0H, 0H
   \              0x00000000   
   \              0x00000000   

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {(0.0F), (0.0F), (0.0F)}>_1`:
   \   00000000   0x00000000         DC32 0H, 0H, 0H
   \              0x00000000   
   \              0x00000000   

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>_1`:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0, 0}>`:
   \   00000000   0x00000000         DC32 0, 0
   \              0x00000000   

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant ")\\n">`:
   \   00000000   0x29 0x0A          DC8 ")\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "EEPROM version mismatch ">`:
   \   00000000   0x45 0x45          DC8 "EEPROM version mismatch "
   \              0x50 0x52    
   \              0x4F 0x4D    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x20 0x6D    
   \              0x69 0x73    
   \              0x6D 0x61    
   \              0x74 0x63    
   \              0x68 0x20    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "(EEPROM=">`:
   \   00000000   0x28 0x45          DC8 "(EEPROM="
   \              0x45 0x50    
   \              0x52 0x4F    
   \              0x4D 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " Marlin=V47)\\n">`:
   \   00000000   0x20 0x4D          DC8 " Marlin=V47)\012"
   \              0x61 0x72    
   \              0x6C 0x69    
   \              0x6E 0x3D    
   \              0x56 0x34    
   \              0x37 0x29    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {(8.05999984E+1F), (8.0400001522E+1`:
   \   00000000   0x42A13333         DC32 42A13333H, 42A0CCCDH, 43C80000H, 42B40000H, 42B40000H
   \              0x42A0CCCD   
   \              0x43C80000   
   \              0x42B40000   
   \              0x42B40000   

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {(200.0F), (200.0F), (4.0F), (70.0F`:
   \   00000000   0x43480000         DC32 43480000H, 43480000H, 40800000H, 428C0000H, 428C0000H
   \              0x43480000   
   \              0x40800000   
   \              0x428C0000   
   \              0x428C0000   

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {1000, 1000, 100, 1000, 1000}>`:
   \   00000000   0x000003E8         DC32 1000, 1000, 100, 1000, 1000
   \              0x000003E8   
   \              0x00000064   
   \              0x000003E8   
   \              0x000003E8   

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant ".\\n">`:
   \   00000000   0x2E 0x0A          DC8 ".\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " Y">`:
   \   00000000   0x20 0x59          DC8 " Y"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " Z">`:
   \   00000000   0x20 0x5A          DC8 " Z"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " E">`:
   \   00000000   0x20 0x45          DC8 " E"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " R">`:
   \   00000000   0x20 0x52          DC8 " R"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " T">`:
   \   00000000   0x20 0x54          DC8 " T"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " B">`:
   \   00000000   0x20 0x42          DC8 " B"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " X">`:
   \   00000000   0x20 0x58          DC8 " X"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant ":\\n">`:
   \   00000000   0x3A 0x0A          DC8 ":\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " H">`:
   \   00000000   0x20 0x48          DC8 " H"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " S">`:
   \   00000000   0x20 0x53          DC8 " S"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " P">`:
   \   00000000   0x20 0x50          DC8 " P"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " I">`:
   \   00000000   0x20 0x49          DC8 " I"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " D">`:
   \   00000000   0x20 0x44          DC8 " D"
   \              0x00         
   \   00000003   0x00               DC8 0
   2341          #endif // !DISABLE_M503

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   MarlinSettings::calc_num_meshes()
     176   MarlinSettings::load()
       176   -> AT24CXX_Read
       176   -> CardReader::mksLoad()
       176   -> CardReader::mksReset()
       176   -> MarlinSettings::load_mesh(int8_t, void *)
       176   -> MarlinSettings::postprocess()
       176   -> MarlinSettings::read_data(int &, uint8_t *, uint16_t, uint16_t *)
       176   -> MarlinSettings::report(bool)
       176   -> MarlinSettings::reset()
       176   -> Print::print(char const *)
       176   -> Print::print(int, int)
       176   -> USARTClass::write(uint8_t)
       176   -> __aeabi_cfcmpeq
       176   -> crc16(uint16_t *, void const *, uint16_t)
       176   -> free
       176   -> malloc
       176   -> mesh_bed_leveling::reset()
       176   -> serial_echopair_P(char const *, char const *)
       176   -> serial_echopair_P(char const *, int)
       176   -> serial_echopair_P(char const *, unsigned int)
       176   -> serialprintPGM(char const *)
       176   -> set_bed_leveling_enabled(bool)
       176   -> strncmp
       176   -> unified_bed_leveling::echo_name()
       176   -> unified_bed_leveling::report_state()
       176   -> unified_bed_leveling::reset()
       176   -> unified_bed_leveling::sanity_check()
      24   MarlinSettings::load_mesh(int8_t, void *)
        24   -> AT24CXX_Read
        24   -> USARTClass::write(uint8_t)
        24   -> crc16(uint16_t *, void const *, uint16_t)
        24   -> serial_echopair_P(char const *, int)
        24   -> ubl_invalid_slot(int)
      32   MarlinSettings::postprocess()
        32   -> Planner::calculate_volumetric_multipliers()
        32   -> Planner::refresh_positioning()
        32   -> Planner::reset_acceleration_rates()
        32   -> memcmp
        32   -> recalc_delta_settings()
        32   -> refresh_bed_level()
        32   -> report_current_position()
        32   -> set_z_fade_height(float, bool)
        32   -> update_software_endstops(AxisEnum)
      24   MarlinSettings::read_data(int &, uint8_t *, uint16_t, uint16_t *)
        24   -> AT24CXX_Read
        24   -> crc16(uint16_t *, void const *, uint16_t)
      48   MarlinSettings::report(bool)
        48   -> Print::print(double, int)
         0   -> USARTClass::write(uint8_t)
        48   -> USARTClass::write(uint8_t)
        48   -> __aeabi_ddiv
        48   -> __aeabi_dmul
        48   -> __aeabi_f2d
        48   -> serial_echopair_P(char const *, double)
        48   -> serial_echopair_P(char const *, float)
        48   -> serial_echopair_P(char const *, int)
        48   -> serial_echopair_P(char const *, unsigned int)
        48   -> serial_echopair_P(char const *, unsigned long)
        48   -> serialprintPGM(char const *)
        48   -> unified_bed_leveling::echo_name()
        48   -> unified_bed_leveling::report_state()
      80   MarlinSettings::reset()
        80   -> MarlinSettings::postprocess()
        80   -> __aeabi_memclr4
        80   -> __aeabi_memcpy4
        80   -> reset_bed_level()
        80   -> serialprintPGM(char const *)
     136   MarlinSettings::save()
       136   -> MarlinSettings::write_data(int &, uint8_t const *, uint16_t, uint16_t *)
       136   -> serial_echopair_P(char const *, int)
       136   -> serial_echopair_P(char const *, unsigned int)
       136   -> serialprintPGM(char const *)
      32   MarlinSettings::store_mesh(int8_t)
        32   -> AT24CXX_Read
        32   -> AT24CXX_Write
        32   -> USARTClass::write(uint8_t)
        32   -> crc16(uint16_t *, void const *, uint16_t)
        32   -> serial_echopair_P(char const *, int)
        32   -> serialprintPGM(char const *)
        32   -> ubl_invalid_slot(int)
      32   MarlinSettings::write_data(int &, uint8_t const *, uint16_t, uint16_t *)
        32   -> AT24CXX_Read
        32   -> AT24CXX_Write
        32   -> crc16(uint16_t *, void const *, uint16_t)
        32   -> serialprintPGM(char const *)
      16   serialprintPGM(char const *)
        16   -> USARTClass::write(uint8_t)
       8   ubl_invalid_slot(int)
         8   -> Print::print(int, int)
         0   -> serialprintPGM(char const *)
         8   -> serialprintPGM(char const *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "  G21    ; Units in mm\n">
      12  ?<Constant "  G29 S3 X">
      12  ?<Constant "  M200 D">
      12  ?<Constant "  M200 D0\n">
      12  ?<Constant "  M200 T1 D">
      12  ?<Constant "  M201 T">
      12  ?<Constant "  M201 X">
      12  ?<Constant "  M203 T">
      12  ?<Constant "  M203 X">
      12  ?<Constant "  M204 P">
      12  ?<Constant "  M205 S">
      12  ?<Constant "  M206 X">
      12  ?<Constant "  M218 T">
      12  ?<Constant "  M301 E">
      12  ?<Constant "  M301 P">
      12  ?<Constant "  M304 P">
      12  ?<Constant "  M420 S">
      12  ?<Constant "  M665 L">
      12  ?<Constant "  M666 X">
       8  ?<Constant "  M666">
      12  ?<Constant "  M851 Z">
       8  ?<Constant "  M92 T">
       8  ?<Constant "  M92 X">
       8  ?<Constant " != ">
      16  ?<Constant " (calculated)!\n">
       4  ?<Constant " B">
       4  ?<Constant " D">
      12  ?<Constant " Disabled\n">
       4  ?<Constant " E">
       4  ?<Constant " H">
       4  ?<Constant " I">
      16  ?<Constant " Marlin=V47)\n">
       4  ?<Constant " P">
       4  ?<Constant " R">
       4  ?<Constant " S">
       4  ?<Constant " T">
       4  ?<Constant " X">
       4  ?<Constant " Y">
       4  ?<Constant " Z">
      16  ?<Constant " bytes; crc ">
      16  ?<Constant " initialized.\n\n">
      24  ?<Constant " loaded from storage.\n">
      24  ?<Constant " mesh slots available.\n">
      12  ?<Constant " meshes.\n\n">
      16  ?<Constant " meshes_end=">
       8  ?<Constant " slot=">
      32  ?<Constant " stored settings retr...">
      12  ?<Constant "(EEPROM=">
       4  ?<Constant ")\n">
       4  ?<Constant ".\n">
       4  ?<Constant "000">
       4  ?<Constant ":\n">
      16  ?<Constant "?Can\'t enable ">
      16  ?<Constant "?Invalid slot.\n">
      76  ?<Constant "Acceleration (units/s...">
     116  ?<Constant "Advanced: S<min_feedr...">
      20  ?<Constant "Auto Bed Leveling:\n">
     124  ?<Constant "Delta settings: L<dia...">
       8  ?<Constant "E2END=">
      32  ?<Constant "EEPROM CRC mismatch -...">
      20  ?<Constant "EEPROM can hold ">
      28  ?<Constant "EEPROM version mismatch ">
      24  ?<Constant "Endstop adjustment:\n">
      28  ?<Constant "Error writing to EEPR...">
      20  ?<Constant "Filament settings:">
      36  ?<Constant "Hardcoded Default Set...">
      16  ?<Constant "Home offset:\n">
      20  ?<Constant "Hotend offsets:\n">
      36  ?<Constant "Maximum Acceleration ...">
      32  ?<Constant "Maximum feedrates (un...">
       8  ?<Constant "Mesh ">
      20  ?<Constant "Mesh Bed Leveling:\n">
      24  ?<Constant "Mesh loaded from slot ">
      20  ?<Constant "Mesh saved in slot ">
      16  ?<Constant "PID settings:\n">
      20  ?<Constant "Settings Stored (">
      20  ?<Constant "Steps per unit:\n">
      20  ?<Constant "UBL System reset()\n">
      24  ?<Constant "Z-Probe Offset (mm):\n">
      20  ?<Constant "\nActive Mesh Slot: ">
      12  ?<Constant {(0.0F), (0.0F), (0.0F)}>
      12  ?<Constant {(0.0F), (0.0F), (0.0F)}>_1
      20  ?<Constant {(200.0F), (200.0F), (4.0F), (70.0F
      20  ?<Constant {(8.05999984E+1F), (8.0400001522E+1
       8  ?<Constant {0, 0}>
       8  ?<Constant {0}>
       8  ?<Constant {0}>_1
      20  ?<Constant {1000, 1000, 100, 1000, 1000}>
       8  ?<Constant {180, 240}>
       8  ?<Constant {70, 110}>
      24  ?<Constant {{(0.0F), (0.0F)}, {(0.0F), (0.0F)}
       4  ??DataTable101
       4  ??DataTable101_1
       4  ??DataTable101_2
       4  ??DataTable101_3
       4  ??DataTable101_4
       4  ??DataTable101_5
       4  ??DataTable101_6
       4  ??DataTable101_7
       4  ??DataTable101_8
       4  ??DataTable102
       4  ??DataTable102_1
       4  ??DataTable102_2
       4  ??DataTable103
       4  ??DataTable103_1
       4  ??DataTable103_2
       4  ??DataTable103_3
       4  ??DataTable104
       4  ??DataTable104_1
       4  ??DataTable104_2
       4  ??DataTable104_3
       4  ??DataTable104_4
       4  ??DataTable104_5
       4  ??DataTable104_6
       4  ??DataTable104_7
       4  ??DataTable104_8
       4  ??DataTable105
       4  ??DataTable105_1
       4  ??DataTable105_10
       4  ??DataTable105_11
       4  ??DataTable105_12
       4  ??DataTable105_13
       4  ??DataTable105_14
       4  ??DataTable105_15
       4  ??DataTable105_16
       4  ??DataTable105_17
       4  ??DataTable105_18
       4  ??DataTable105_19
       4  ??DataTable105_2
       4  ??DataTable105_20
       4  ??DataTable105_21
       4  ??DataTable105_22
       4  ??DataTable105_23
       4  ??DataTable105_24
       4  ??DataTable105_25
       4  ??DataTable105_26
       4  ??DataTable105_27
       4  ??DataTable105_28
       4  ??DataTable105_29
       4  ??DataTable105_3
       4  ??DataTable105_30
       4  ??DataTable105_31
       4  ??DataTable105_32
       4  ??DataTable105_33
       4  ??DataTable105_34
       4  ??DataTable105_35
       4  ??DataTable105_36
       4  ??DataTable105_37
       4  ??DataTable105_38
       4  ??DataTable105_39
       4  ??DataTable105_4
       4  ??DataTable105_40
       4  ??DataTable105_41
       4  ??DataTable105_42
       4  ??DataTable105_43
       4  ??DataTable105_44
       4  ??DataTable105_45
       4  ??DataTable105_46
       4  ??DataTable105_47
       4  ??DataTable105_48
       4  ??DataTable105_49
       4  ??DataTable105_5
       4  ??DataTable105_50
       4  ??DataTable105_51
       4  ??DataTable105_52
       4  ??DataTable105_53
       4  ??DataTable105_54
       4  ??DataTable105_55
       4  ??DataTable105_56
       4  ??DataTable105_57
       4  ??DataTable105_58
       4  ??DataTable105_59
       4  ??DataTable105_6
       4  ??DataTable105_60
       4  ??DataTable105_61
       4  ??DataTable105_62
       4  ??DataTable105_63
       4  ??DataTable105_7
       4  ??DataTable105_8
       4  ??DataTable105_9
       4  ??DataTable98
       4  ??DataTable98_1
       4  ??DataTable98_10
       4  ??DataTable98_11
       4  ??DataTable98_12
       4  ??DataTable98_13
       4  ??DataTable98_14
       4  ??DataTable98_15
       4  ??DataTable98_16
       4  ??DataTable98_17
       4  ??DataTable98_18
       4  ??DataTable98_19
       4  ??DataTable98_2
       4  ??DataTable98_20
       4  ??DataTable98_21
       4  ??DataTable98_22
       4  ??DataTable98_23
       4  ??DataTable98_24
       4  ??DataTable98_25
       4  ??DataTable98_26
       4  ??DataTable98_27
       4  ??DataTable98_28
       4  ??DataTable98_29
       4  ??DataTable98_3
       4  ??DataTable98_30
       4  ??DataTable98_31
       4  ??DataTable98_32
       4  ??DataTable98_33
       4  ??DataTable98_34
       4  ??DataTable98_35
       4  ??DataTable98_36
       4  ??DataTable98_37
       4  ??DataTable98_38
       4  ??DataTable98_39
       4  ??DataTable98_4
       4  ??DataTable98_40
       4  ??DataTable98_41
       4  ??DataTable98_42
       4  ??DataTable98_43
       4  ??DataTable98_44
       4  ??DataTable98_45
       4  ??DataTable98_46
       4  ??DataTable98_47
       4  ??DataTable98_48
       4  ??DataTable98_49
       4  ??DataTable98_5
       4  ??DataTable98_50
       4  ??DataTable98_6
       4  ??DataTable98_7
       4  ??DataTable98_8
       4  ??DataTable98_9
       4  ??DataTable99
       4  ??DataTable99_1
       4  ??DataTable99_2
      32  MarlinSettings::calc_num_meshes()
       8  MarlinSettings::eeprom_error
          MarlinSettings::meshes_begin
          new_z_fade_height
    5292  MarlinSettings::load()
     144  MarlinSettings::load_mesh(int8_t, void *)
     124  MarlinSettings::postprocess()
      64  MarlinSettings::read_data(int &, uint8_t *, uint16_t, uint16_t *)
    1860  MarlinSettings::report(bool)
     500  MarlinSettings::reset()
    1876  MarlinSettings::save()
     280  MarlinSettings::store_mesh(int8_t)
     144  MarlinSettings::write_data(int &, uint8_t const *, uint16_t, uint16_t *)
      32  serialprintPGM(char const *)
       4  settings
      20  tmp1
      20  tmp2
      20  tmp3
      36  ubl_invalid_slot(int)
       4  version
       1  -- Other

 
     12 bytes in section .bss
    309 bytes in section .rodata
 12 272 bytes in section .text
 
 12 240 bytes of CODE  memory (+ 32 bytes shared)
    308 bytes of CONST memory (+  1 byte  shared)
     12 bytes of DATA  memory

Errors: none
Warnings: 38
