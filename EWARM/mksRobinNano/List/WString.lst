###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        13/Apr/2020  09:25:32
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\WString.cpp
#    Command line =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\WString.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\
#        -lA
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/Obj\
#        --debug --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Src\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/variant\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/libstmf4/include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui/Multi_language\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui/QRENCODE\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\..\Middlewares\GUI\
#        -Oh --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\WString.lst
#    Object file  =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/Obj\WString.o
#
###############################################################################

D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\WString.cpp
      1          /*
      2            WString.cpp - String library for Wiring & Arduino
      3            ...mostly rewritten by Paul Stoffregen...
      4            Copyright (c) 2009-10 Hernando Barragan.  All rights reserved.
      5            Copyright 2011, Paul Stoffregen, paul@pjrc.com
      6          
      7            This library is free software; you can redistribute it and/or
      8            modify it under the terms of the GNU Lesser General Public
      9            License as published by the Free Software Foundation; either
     10            version 2.1 of the License, or (at your option) any later version.
     11          
     12            This library is distributed in the hope that it will be useful,
     13            but WITHOUT ANY WARRANTY; without even the implied warranty of
     14            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     15            Lesser General Public License for more details.
     16          
     17            You should have received a copy of the GNU Lesser General Public
     18            License along with this library; if not, write to the Free Software
     19            Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
     20          */
     21          
     22          #include "WString.h"
     23          #include "itoa.h"
     24          #include "avr/dtostrf.h"
     25          
     26          /*********************************************/
     27          /*  Constructors                             */
     28          /*********************************************/
     29          

   \                                 In section .text, align 2, keep-with-next
     30          String::String(const char *cstr)
     31          {
   \                     _ZN6StringC1EPKc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
     32          	init();
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x6020             STR      R0,[R4, #+0]
   \   00000008   0x6060             STR      R0,[R4, #+4]
   \   0000000A   0x460D             MOV      R5,R1
   \   0000000C   0x60A0             STR      R0,[R4, #+8]
     33          	if (cstr) copy(cstr, strlen(cstr));
   \   0000000E   0xB13D             CBZ.N    R5,??String_0
   \   00000010   0x4628             MOV      R0,R5
   \   00000012   0x.... 0x....      BL       strlen
   \   00000016   0x4602             MOV      R2,R0
   \   00000018   0x4629             MOV      R1,R5
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       _ZN6String4copyEPKcj
     34          }
   \                     ??String_0: (+1)
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     35          

   \                                 In section .text, align 2, keep-with-next
     36          String::String(const String &value)
   \                     _ZN6StringC1ERKS_: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002                      REQUIRE ?Subroutine1
   \   00000002                      ;; // Fall through to label ?Subroutine1

   \                                 In section .text, align 2, keep-with-next
     37          {
   \                     ?Subroutine1: (+1)
   \   00000000   0x4604             MOV      R4,R0
     38          	init();
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x6020             STR      R0,[R4, #+0]
   \   00000006   0x6060             STR      R0,[R4, #+4]
   \   00000008   0x60A0             STR      R0,[R4, #+8]
     39          	*this = value;
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN6StringaSERKS_
     40          }
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     41          

   \                                 In section .text, align 2, keep-with-next
     42          String::String(const __FlashStringHelper *pstr)
   \                     _ZN6StringC1EPK19__FlashStringHelper: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002                      REQUIRE ?Subroutine2
   \   00000002                      ;; // Fall through to label ?Subroutine2

   \                                 In section .text, align 2, keep-with-next
     43          {
   \                     ?Subroutine2: (+1)
   \   00000000   0x4604             MOV      R4,R0
     44          	init();
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x6020             STR      R0,[R4, #+0]
   \   00000006   0x6060             STR      R0,[R4, #+4]
   \   00000008   0x60A0             STR      R0,[R4, #+8]
     45          	*this = pstr;
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN6StringaSEPK19__FlashStringHelper
     46          }
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     47          
     48          #ifdef __GXX_EXPERIMENTAL_CXX0X__
     49          String::String(String &&rval)
     50          {
     51          	init();
     52          	move(rval);
     53          }
     54          String::String(StringSumHelper &&rval)
     55          {
     56          	init();
     57          	move(rval);
     58          }
     59          #endif
     60          

   \                                 In section .text, align 2, keep-with-next
     61          String::String(char c)
     62          {
   \                     _ZN6StringC1Ec: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB082             SUB      SP,SP,#+8
     63          	init();
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x6020             STR      R0,[R4, #+0]
   \   0000000A   0x6060             STR      R0,[R4, #+4]
   \   0000000C   0x60A0             STR      R0,[R4, #+8]
     64          	char buf[2];
     65          	buf[0] = c;
   \   0000000E   0xF88D 0x1000      STRB     R1,[SP, #+0]
     66          	buf[1] = 0;
   \   00000012   0xF88D 0x0001      STRB     R0,[SP, #+1]
     67          	*this = buf;
   \   00000016   0xA900             ADD      R1,SP,#+0
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       _ZN6StringaSEPKc
     68          }
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0xBD16             POP      {R1,R2,R4,PC}    ;; return
     69          

   \                                 In section .text, align 2, keep-with-next
     70          String::String(unsigned char value, unsigned char base)
     71          {
   \                     _ZN6StringC1Ehh: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4608             MOV      R0,R1
   \   00000006   0xB084             SUB      SP,SP,#+16
     72          	init();
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6021             STR      R1,[R4, #+0]
   \   0000000C   0x6061             STR      R1,[R4, #+4]
   \   0000000E   0x60A1             STR      R1,[R4, #+8]
     73          	char buf[9];
     74          	utoa(value, buf, base);
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x.... 0x....      BL       utoa
     75          	*this = buf;
   \   00000016   0xA900             ADD      R1,SP,#+0
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       _ZN6StringaSEPKc
     76          }
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0xB004             ADD      SP,SP,#+16
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
     77          

   \                                 In section .text, align 2, keep-with-next
     78          String::String(int value, unsigned char base)
     79          {
   \                     _ZN6StringC1Eih: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4608             MOV      R0,R1
   \   00000006   0xB086             SUB      SP,SP,#+24
     80          	init();
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6021             STR      R1,[R4, #+0]
   \   0000000C   0x6061             STR      R1,[R4, #+4]
   \   0000000E   0x60A1             STR      R1,[R4, #+8]
     81          	char buf[18];
     82          	itoa(value, buf, base);
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x.... 0x....      BL       itoa
     83          	*this = buf;
   \   00000016   0x....             B.N      ?Subroutine4
     84          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0xA900             ADD      R1,SP,#+0
   \   00000002   0x4620             MOV      R0,R4
   \   00000004   0x.... 0x....      BL       _ZN6StringaSEPKc
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0xB006             ADD      SP,SP,#+24
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
     85          

   \                                 In section .text, align 2, keep-with-next
     86          String::String(unsigned int value, unsigned char base)
     87          {
   \                     _ZN6StringC1Ejh: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4608             MOV      R0,R1
   \   00000006   0xB086             SUB      SP,SP,#+24
     88          	init();
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6021             STR      R1,[R4, #+0]
   \   0000000C   0x6061             STR      R1,[R4, #+4]
   \   0000000E   0x60A1             STR      R1,[R4, #+8]
     89          	char buf[17];
     90          	utoa(value, buf, base);
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x.... 0x....      BL       utoa
     91          	*this = buf;
   \   00000016                      REQUIRE ?Subroutine4
   \   00000016                      ;; // Fall through to label ?Subroutine4
     92          }
     93          

   \                                 In section .text, align 2, keep-with-next
     94          String::String(long value, unsigned char base)
     95          {
   \                     _ZN6StringC1Elh: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4608             MOV      R0,R1
   \   00000006   0xB08A             SUB      SP,SP,#+40
     96          	init();
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6021             STR      R1,[R4, #+0]
   \   0000000C   0x6061             STR      R1,[R4, #+4]
   \   0000000E   0x60A1             STR      R1,[R4, #+8]
     97          	char buf[34];
     98          	ltoa(value, buf, base);
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x.... 0x....      BL       ltoa
     99          	*this = buf;
   \   00000016   0x....             B.N      ?Subroutine5
    100          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \   00000000   0xA900             ADD      R1,SP,#+0
   \   00000002   0x4620             MOV      R0,R4
   \   00000004   0x.... 0x....      BL       _ZN6StringaSEPKc
   \   00000008                      REQUIRE ??Subroutine13_0
   \   00000008                      ;; // Fall through to label ??Subroutine13_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine13_0: (+1)
   \   00000000   0x4620             MOV      R0,R4
   \   00000002   0xB00A             ADD      SP,SP,#+40
   \   00000004   0xBD10             POP      {R4,PC}          ;; return
    101          

   \                                 In section .text, align 2, keep-with-next
    102          String::String(unsigned long value, unsigned char base)
    103          {
   \                     _ZN6StringC1Emh: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4608             MOV      R0,R1
   \   00000006   0xB08A             SUB      SP,SP,#+40
    104          	init();
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6021             STR      R1,[R4, #+0]
   \   0000000C   0x6061             STR      R1,[R4, #+4]
   \   0000000E   0x60A1             STR      R1,[R4, #+8]
    105          	char buf[33];
    106          	ultoa(value, buf, base);
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x.... 0x....      BL       ultoa
    107          	*this = buf;
   \   00000016                      REQUIRE ?Subroutine5
   \   00000016                      ;; // Fall through to label ?Subroutine5
    108          }
    109          

   \                                 In section .text, align 2, keep-with-next
    110          String::String(float value, unsigned char decimalPlaces)
    111          {
   \                     _ZN6StringC1Efh: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4608             MOV      R0,R1
   \   00000006   0xB08A             SUB      SP,SP,#+40
    112          	init();
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6021             STR      R1,[R4, #+0]
   \   0000000C   0x6061             STR      R1,[R4, #+4]
   \   0000000E   0x60A1             STR      R1,[R4, #+8]
    113          	char buf[33];
    114          	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
   \   00000010   0x4616             MOV      R6,R2
   \   00000012   0xA901             ADD      R1,SP,#+4
   \   00000014   0x1C92             ADDS     R2,R2,#+2
   \   00000016   0x9100             STR      R1,[SP, #+0]
   \   00000018   0xB255             SXTB     R5,R2
   \   0000001A   0x.... 0x....      BL       __aeabi_f2d
   \   0000001E   0x4633             MOV      R3,R6
   \   00000020   0x462A             MOV      R2,R5
   \   00000022   0x.... 0x....      BL       dtostrf
   \   00000026   0x4601             MOV      R1,R0
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       _ZN6StringaSEPKc
    115          }
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0xB00A             ADD      SP,SP,#+40
   \   00000032   0xBD70             POP      {R4-R6,PC}       ;; return
    116          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(double, unsigned char)
   \                     _ZN6StringC2Edh: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x9902             LDR      R1,[SP, #+8]
   \   00000004   0x9100             STR      R1,[SP, #+0]
   \   00000006   0x.... 0x....      BL       _ZN6StringC1Edh
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    117          String::String(double value, unsigned char decimalPlaces)
    118          {
   \                     _ZN6StringC1Edh: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4610             MOV      R0,R2
   \   00000006   0xB08A             SUB      SP,SP,#+40
    119          	init();
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x6022             STR      R2,[R4, #+0]
   \   0000000C   0x6062             STR      R2,[R4, #+4]
   \   0000000E   0x60A2             STR      R2,[R4, #+8]
   \   00000010   0x4619             MOV      R1,R3
    120          	char buf[33];
    121          	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
   \   00000012   0xAA01             ADD      R2,SP,#+4
   \   00000014   0x9B0C             LDR      R3,[SP, #+48]
   \   00000016   0x9200             STR      R2,[SP, #+0]
   \   00000018   0x1C9A             ADDS     R2,R3,#+2
   \   0000001A   0xB252             SXTB     R2,R2
   \   0000001C   0x.... 0x....      BL       dtostrf
   \   00000020   0x4601             MOV      R1,R0
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x.... 0x....      BL       _ZN6StringaSEPKc
    122          }
   \   00000028   0x....             B.N      ??Subroutine13_0
    123          

   \                                 In section .text, align 2, keep-with-next
    124          String::~String()
   \                     _ZN6StringD1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002                      REQUIRE ?Subroutine6
   \   00000002                      ;; // Fall through to label ?Subroutine6

   \                                 In section .text, align 2, keep-with-next
    125          {
   \                     ?Subroutine6: (+1)
   \   00000000   0x4604             MOV      R4,R0
    126          	free(buffer);
   \   00000002   0x6820             LDR      R0,[R4, #+0]
   \   00000004   0x.... 0x....      BL       free
    127          }
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
    128          
    129          /*********************************************/
    130          /*  Memory Management                        */
    131          /*********************************************/
    132          
    133          inline void String::init(void)
    134          {
    135          	buffer = NULL;
    136          	capacity = 0;
    137          	len = 0;
    138          }
    139          

   \                                 In section .text, align 2, keep-with-next
    140          void String::invalidate(void)
    141          {
   \                     _ZN6String10invalidateEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    142          	if (buffer) free(buffer);
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0xB108             CBZ.N    R0,??invalidate_0
   \   00000008   0x.... 0x....      BL       free
    143          	buffer = NULL;
   \                     ??invalidate_0: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x6020             STR      R0,[R4, #+0]
    144          	capacity = len = 0;
   \   00000010   0x60A0             STR      R0,[R4, #+8]
   \   00000012   0x6060             STR      R0,[R4, #+4]
    145          }
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    146          

   \                                 In section .text, align 2, keep-with-next
    147          unsigned char String::reserve(unsigned int size)
    148          {
   \                     _ZN6String7reserveEj: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    149          	if (buffer && capacity >= size) return 1;
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0xB110             CBZ.N    R0,??reserve_0
   \   0000000A   0x6861             LDR      R1,[R4, #+4]
   \   0000000C   0x42A9             CMP      R1,R5
   \   0000000E   0xD209             BCS.N    ??reserve_1
    150          	if (changeBuffer(size)) {
   \                     ??reserve_0: (+1)
   \   00000010   0x1C69             ADDS     R1,R5,#+1
   \   00000012   0x.... 0x....      BL       realloc
   \   00000016   0xB130             CBZ.N    R0,??reserve_2
   \   00000018   0x6020             STR      R0,[R4, #+0]
   \   0000001A   0x6065             STR      R5,[R4, #+4]
    151          		if (len == 0) buffer[0] = 0;
   \   0000001C   0x68A0             LDR      R0,[R4, #+8]
   \   0000001E   0xB908             CBNZ.N   R0,??reserve_1
   \   00000020   0x6821             LDR      R1,[R4, #+0]
   \   00000022   0x7008             STRB     R0,[R1, #+0]
    152          		return 1;
   \                     ??reserve_1: (+1)
   \   00000024   0x2001             MOVS     R0,#+1
   \                     ??reserve_2: (+1)
   \   00000026   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    153          	}
    154          	return 0;
    155          }
    156          

   \                                 In section .text, align 2, keep-with-next
    157          unsigned char String::changeBuffer(unsigned int maxStrLen)
    158          {
   \                     _ZN6String12changeBufferEj: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    159          	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x1C69             ADDS     R1,R5,#+1
   \   0000000A   0x.... 0x....      BL       realloc
    160          	if (newbuffer) {
   \   0000000E   0xB110             CBZ.N    R0,??changeBuffer_0
    161          		buffer = newbuffer;
   \   00000010   0x6020             STR      R0,[R4, #+0]
    162          		capacity = maxStrLen;
   \   00000012   0x6065             STR      R5,[R4, #+4]
    163          		return 1;
   \   00000014   0x2001             MOVS     R0,#+1
    164          	}
    165          	return 0;
   \                     ??changeBuffer_0: (+1)
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    166          }
    167          
    168          /*********************************************/
    169          /*  Copy and Move                            */
    170          /*********************************************/
    171          

   \                                 In section .text, align 2, keep-with-next
    172          String & String::copy(const char *cstr, unsigned int length)
    173          {
   \                     _ZN6String4copyEPKcj: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    174          	if (!reserve(length)) {
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0xB110             CBZ.N    R0,??copy_0
   \   0000000C   0x6861             LDR      R1,[R4, #+4]
   \   0000000E   0x42B1             CMP      R1,R6
   \   00000010   0xD209             BCS.N    ??copy_1
   \                     ??copy_0: (+1)
   \   00000012   0x1C71             ADDS     R1,R6,#+1
   \   00000014   0x.... 0x....      BL       realloc
   \   00000018   0xB160             CBZ.N    R0,??copy_2
   \   0000001A   0x6020             STR      R0,[R4, #+0]
   \   0000001C   0x6066             STR      R6,[R4, #+4]
   \   0000001E   0x68A0             LDR      R0,[R4, #+8]
   \   00000020   0xB908             CBNZ.N   R0,??copy_1
   \   00000022   0x6821             LDR      R1,[R4, #+0]
   \   00000024   0x7008             STRB     R0,[R1, #+0]
    175          		invalidate();
    176          		return *this;
    177          	}
    178          	len = length;
   \                     ??copy_1: (+1)
   \   00000026   0x60A6             STR      R6,[R4, #+8]
    179          	strcpy(buffer, cstr);
   \   00000028   0x4629             MOV      R1,R5
   \   0000002A   0x6820             LDR      R0,[R4, #+0]
   \   0000002C   0x.... 0x....      BL       strcpy
    180          	return *this;
   \                     ??copy_3: (+1)
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??copy_2: (+1)
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       _ZN6String10invalidateEv
   \   0000003A   0xE7F9             B.N      ??copy_3
    181          }
    182          

   \                                 In section .text, align 2, keep-with-next
    183          String & String::copy(const __FlashStringHelper *pstr, unsigned int length)
    184          {
   \                     _ZN6String4copyEPK19__FlashStringHelperj: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    185          	if (!reserve(length)) {
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0xB110             CBZ.N    R0,??copy_4
   \   0000000C   0x6861             LDR      R1,[R4, #+4]
   \   0000000E   0x42B1             CMP      R1,R6
   \   00000010   0xD209             BCS.N    ??copy_5
   \                     ??copy_4: (+1)
   \   00000012   0x1C71             ADDS     R1,R6,#+1
   \   00000014   0x.... 0x....      BL       realloc
   \   00000018   0xB160             CBZ.N    R0,??copy_6
   \   0000001A   0x6020             STR      R0,[R4, #+0]
   \   0000001C   0x6066             STR      R6,[R4, #+4]
   \   0000001E   0x68A0             LDR      R0,[R4, #+8]
   \   00000020   0xB908             CBNZ.N   R0,??copy_5
   \   00000022   0x6821             LDR      R1,[R4, #+0]
   \   00000024   0x7008             STRB     R0,[R1, #+0]
    186          		invalidate();
    187          		return *this;
    188          	}
    189          	len = length;
   \                     ??copy_5: (+1)
   \   00000026   0x60A6             STR      R6,[R4, #+8]
    190          	strcpy_P(buffer, (const prog_char *)pstr);
   \   00000028   0x4629             MOV      R1,R5
   \   0000002A   0x6820             LDR      R0,[R4, #+0]
   \   0000002C   0x.... 0x....      BL       strcpy
    191          	return *this;
   \                     ??copy_7: (+1)
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??copy_6: (+1)
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       _ZN6String10invalidateEv
   \   0000003A   0xE7F9             B.N      ??copy_7
    192          }
    193          
    194          #ifdef __GXX_EXPERIMENTAL_CXX0X__
    195          void String::move(String &rhs)
    196          {
    197          	if (buffer) {
    198          		if (capacity >= rhs.len) {
    199          			strcpy(buffer, rhs.buffer);
    200          			len = rhs.len;
    201          			rhs.len = 0;
    202          			return;
    203          		} else {
    204          			free(buffer);
    205          		}
    206          	}
    207          	buffer = rhs.buffer;
    208          	capacity = rhs.capacity;
    209          	len = rhs.len;
    210          	rhs.buffer = NULL;
    211          	rhs.capacity = 0;
    212          	rhs.len = 0;
    213          }
    214          #endif
    215          

   \                                 In section .text, align 2, keep-with-next
    216          String & String::operator = (const String &rhs)
    217          {
   \                     _ZN6StringaSERKS_: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    218          	if (this == &rhs) return *this;
   \   00000004   0x428C             CMP      R4,R1
   \   00000006   0xD00A             BEQ.N    `??operator=_0`
    219          	
    220          	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   \   00000008   0x6808             LDR      R0,[R1, #+0]
   \   0000000A   0xB128             CBZ.N    R0,`??operator=_1`
   \   0000000C   0x688A             LDR      R2,[R1, #+8]
   \   0000000E   0x4601             MOV      R1,R0
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       _ZN6String4copyEPKcj
   \   00000016   0xE002             B.N      `??operator=_0`
    221          	else invalidate();
   \                     `??operator=_1`: (+1)
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       _ZN6String10invalidateEv
    222          	
    223          	return *this;
   \                     `??operator=_0`: (+1)
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    224          }
    225          
    226          #ifdef __GXX_EXPERIMENTAL_CXX0X__
    227          String & String::operator = (String &&rval)
    228          {
    229          	if (this != &rval) move(rval);
    230          	return *this;
    231          }
    232          
    233          String & String::operator = (StringSumHelper &&rval)
    234          {
    235          	if (this != &rval) move(rval);
    236          	return *this;
    237          }
    238          #endif
    239          

   \                                 In section .text, align 2, keep-with-next
    240          String & String::operator = (const char *cstr)
    241          {
   \                     _ZN6StringaSEPKc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    242          	if (cstr) copy(cstr, strlen(cstr));
   \   00000006   0xD008             BEQ.N    `??operator=_2`
   \   00000008   0x4628             MOV      R0,R5
   \   0000000A   0x.... 0x....      BL       strlen
   \   0000000E   0x4602             MOV      R2,R0
   \   00000010   0x4629             MOV      R1,R5
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       _ZN6String4copyEPKcj
   \   00000018   0xE001             B.N      `??operator=_3`
    243          	else invalidate();
   \                     `??operator=_2`: (+1)
   \   0000001A   0x.... 0x....      BL       _ZN6String10invalidateEv
    244          	
    245          	return *this;
   \                     `??operator=_3`: (+1)
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    246          }
    247          

   \                                 In section .text, align 2, keep-with-next
    248          String & String::operator = (const __FlashStringHelper *pstr)
    249          {
   \                     _ZN6StringaSEPK19__FlashStringHelper: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    250          	if (pstr) copy(pstr, strlen_P((const prog_char *)pstr));
   \   00000006   0xD008             BEQ.N    `??operator=_4`
   \   00000008   0x4628             MOV      R0,R5
   \   0000000A   0x.... 0x....      BL       strlen
   \   0000000E   0x4602             MOV      R2,R0
   \   00000010   0x4629             MOV      R1,R5
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       _ZN6String4copyEPK19__FlashStringHelperj
   \   00000018   0xE001             B.N      `??operator=_5`
    251          	else invalidate();
   \                     `??operator=_4`: (+1)
   \   0000001A   0x.... 0x....      BL       _ZN6String10invalidateEv
    252          
    253          	return *this;
   \                     `??operator=_5`: (+1)
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    254          }
    255          
    256          /*********************************************/
    257          /*  concat                                   */
    258          /*********************************************/
    259          

   \                                 In section .text, align 2, keep-with-next
    260          unsigned char String::concat(const String &s)
    261          {
   \                     _ZN6String6concatERKS_: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    262          	return concat(s.buffer, s.len);
   \   00000004   0x6888             LDR      R0,[R1, #+8]
   \   00000006   0x680D             LDR      R5,[R1, #+0]
   \   00000008   0x68A1             LDR      R1,[R4, #+8]
   \   0000000A   0x1846             ADDS     R6,R0,R1
   \   0000000C   0xB90D             CBNZ.N   R5,??concat_0
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD70             POP      {R4-R6,PC}
   \                     ??concat_0: (+1)
   \   00000012   0x....             B.N      ?Subroutine11
    263          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11: (+1)
   \   00000000   0xB1A8             CBZ.N    R0,??Subroutine11_0
   \   00000002   0x6820             LDR      R0,[R4, #+0]
   \   00000004   0xB110             CBZ.N    R0,??Subroutine11_1
   \   00000006   0x6861             LDR      R1,[R4, #+4]
   \   00000008   0x42B1             CMP      R1,R6
   \   0000000A   0xD209             BCS.N    ??Subroutine11_2
   \                     ??Subroutine11_1: (+1)
   \   0000000C   0x1C71             ADDS     R1,R6,#+1
   \   0000000E   0x.... 0x....      BL       realloc
   \   00000012   0xB168             CBZ.N    R0,??Subroutine11_3
   \   00000014   0x6020             STR      R0,[R4, #+0]
   \   00000016   0x6066             STR      R6,[R4, #+4]
   \   00000018   0x68A0             LDR      R0,[R4, #+8]
   \   0000001A   0xB908             CBNZ.N   R0,??Subroutine11_2
   \   0000001C   0x6821             LDR      R1,[R4, #+0]
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
   \                     ??Subroutine11_2: (+1)
   \   00000020   0x68A0             LDR      R0,[R4, #+8]
   \   00000022   0x6822             LDR      R2,[R4, #+0]
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x1880             ADDS     R0,R0,R2
   \   00000028   0x.... 0x....      BL       strcpy
   \   0000002C   0x60A6             STR      R6,[R4, #+8]
   \                     ??Subroutine11_0: (+1)
   \   0000002E   0x2001             MOVS     R0,#+1
   \                     ??Subroutine11_3: (+1)
   \   00000030   0xBD70             POP      {R4-R6,PC}       ;; return
    264          

   \                                 In section .text, align 2, keep-with-next
    265          unsigned char String::concat(const char *cstr, unsigned int length)
    266          {
   \                     _ZN6String6concatEPKcj: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    267          	unsigned int newlen = len + length;
   \   00000006   0x68A0             LDR      R0,[R4, #+8]
   \   00000008   0x1816             ADDS     R6,R2,R0
    268          	if (!cstr) return 0;
   \   0000000A   0xB90D             CBNZ.N   R5,??concat_1
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xBD70             POP      {R4-R6,PC}
    269          	if (length == 0) return 1;
   \                     ??concat_1: (+1)
   \   00000010   0xB1AA             CBZ.N    R2,??concat_2
    270          	if (!reserve(newlen)) return 0;
   \   00000012   0x6820             LDR      R0,[R4, #+0]
   \   00000014   0xB110             CBZ.N    R0,??concat_3
   \   00000016   0x6861             LDR      R1,[R4, #+4]
   \   00000018   0x42B1             CMP      R1,R6
   \   0000001A   0xD209             BCS.N    ??concat_4
   \                     ??concat_3: (+1)
   \   0000001C   0x1C71             ADDS     R1,R6,#+1
   \   0000001E   0x.... 0x....      BL       realloc
   \   00000022   0xB168             CBZ.N    R0,??concat_5
   \   00000024   0x6020             STR      R0,[R4, #+0]
   \   00000026   0x6066             STR      R6,[R4, #+4]
   \   00000028   0x68A0             LDR      R0,[R4, #+8]
   \   0000002A   0xB908             CBNZ.N   R0,??concat_4
   \   0000002C   0x6821             LDR      R1,[R4, #+0]
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
    271          	strcpy(buffer + len, cstr);
   \                     ??concat_4: (+1)
   \   00000030   0x68A0             LDR      R0,[R4, #+8]
   \   00000032   0x6822             LDR      R2,[R4, #+0]
   \   00000034   0x4629             MOV      R1,R5
   \   00000036   0x1880             ADDS     R0,R0,R2
   \   00000038   0x.... 0x....      BL       strcpy
    272          	len = newlen;
   \   0000003C   0x60A6             STR      R6,[R4, #+8]
    273          	return 1;
   \                     ??concat_2: (+1)
   \   0000003E   0x2001             MOVS     R0,#+1
   \                     ??concat_5: (+1)
   \   00000040   0xBD70             POP      {R4-R6,PC}       ;; return
    274          }
    275          

   \                                 In section .text, align 2, keep-with-next
    276          unsigned char String::concat(const char *cstr)
    277          {
   \                     _ZN6String6concatEPKc: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    278          	if (!cstr) return 0;
   \   00000006   0xD101             BNE.N    ??concat_6
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xBD70             POP      {R4-R6,PC}
    279          	return concat(cstr, strlen(cstr));
   \                     ??concat_6: (+1)
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x.... 0x....      BL       strlen
   \   00000012   0x68A1             LDR      R1,[R4, #+8]
   \   00000014   0x1846             ADDS     R6,R0,R1
   \   00000016                      REQUIRE ?Subroutine11
   \   00000016                      ;; // Fall through to label ?Subroutine11
    280          }
    281          

   \                                 In section .text, align 2, keep-with-next
    282          unsigned char String::concat(char c)
    283          {
   \                     _ZN6String6concatEc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    284          	char buf[2];
    285          	buf[0] = c;
    286          	buf[1] = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   0000000A   0xF88D 0x1000      STRB     R1,[SP, #+0]
    287          	return concat(buf, 1);
   \   0000000E   0x68A0             LDR      R0,[R4, #+8]
   \   00000010   0x1C45             ADDS     R5,R0,#+1
   \   00000012   0x4629             MOV      R1,R5
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       _ZN6String7reserveEj
   \   0000001A   0xB138             CBZ.N    R0,??concat_7
   \   0000001C   0x68A0             LDR      R0,[R4, #+8]
   \   0000001E   0x6822             LDR      R2,[R4, #+0]
   \   00000020   0xA900             ADD      R1,SP,#+0
   \   00000022   0x1880             ADDS     R0,R0,R2
   \   00000024   0x.... 0x....      BL       strcpy
   \   00000028   0x60A5             STR      R5,[R4, #+8]
   \   0000002A   0x2001             MOVS     R0,#+1
   \                     ??concat_7: (+1)
   \   0000002C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    288          }
    289          

   \                                 In section .text, align 2, keep-with-next
    290          unsigned char String::concat(unsigned char num)
    291          {
   \                     _ZN6String6concatEh: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x4608             MOV      R0,R1
    292          	char buf[4];
    293          	itoa(num, buf, 10);
   \   00000008   0x220A             MOVS     R2,#+10
   \   0000000A   0xA900             ADD      R1,SP,#+0
   \   0000000C   0x.... 0x....      BL       itoa
    294          	return concat(buf, strlen(buf));
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x.... 0x....      BL       strlen
   \   00000016   0x4602             MOV      R2,R0
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       _ZN6String6concatEPKcj
   \   00000020   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    295          }
    296          

   \                                 In section .text, align 2, keep-with-next
    297          unsigned char String::concat(int num)
    298          {
   \                     _ZN6String6concatEi: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4608             MOV      R0,R1
    299          	char buf[12];
    300          	itoa(num, buf, 10);
   \   00000008   0x220A             MOVS     R2,#+10
   \   0000000A   0xA900             ADD      R1,SP,#+0
   \   0000000C   0x.... 0x....      BL       itoa
    301          	return concat(buf, strlen(buf));
   \   00000010   0x....             B.N      ?Subroutine3
    302          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0xA800             ADD      R0,SP,#+0
   \   00000002   0x.... 0x....      BL       strlen
   \   00000006   0x4602             MOV      R2,R0
   \   00000008   0xA900             ADD      R1,SP,#+0
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN6String6concatEPKcj
   \   00000010   0xB004             ADD      SP,SP,#+16
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    303          

   \                                 In section .text, align 2, keep-with-next
    304          unsigned char String::concat(unsigned int num)
    305          {
   \                     _ZN6String6concatEj: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4608             MOV      R0,R1
    306          	char buf[11];
    307          	utoa(num, buf, 10);
   \   00000008   0x220A             MOVS     R2,#+10
   \   0000000A   0xA900             ADD      R1,SP,#+0
   \   0000000C   0x.... 0x....      BL       utoa
    308          	return concat(buf, strlen(buf));
   \   00000010                      REQUIRE ?Subroutine3
   \   00000010                      ;; // Fall through to label ?Subroutine3
    309          }
    310          

   \                                 In section .text, align 2, keep-with-next
    311          unsigned char String::concat(long num)
    312          {
   \                     _ZN6String6concatEl: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4608             MOV      R0,R1
    313          	char buf[12];
    314          	ltoa(num, buf, 10);
   \   00000008   0x220A             MOVS     R2,#+10
   \   0000000A   0xA900             ADD      R1,SP,#+0
   \   0000000C   0x.... 0x....      BL       ltoa
    315          	return concat(buf, strlen(buf));
   \   00000010   0x....             B.N      ?Subroutine3
    316          }
    317          

   \                                 In section .text, align 2, keep-with-next
    318          unsigned char String::concat(unsigned long num)
    319          {
   \                     _ZN6String6concatEm: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4608             MOV      R0,R1
    320          	char buf[11];
    321          	ultoa(num, buf, 10);
   \   00000008   0x220A             MOVS     R2,#+10
   \   0000000A   0xA900             ADD      R1,SP,#+0
   \   0000000C   0x.... 0x....      BL       ultoa
    322          	return concat(buf, strlen(buf));
   \   00000010   0x....             B.N      ?Subroutine3
    323          }
    324          

   \                                 In section .text, align 2, keep-with-next
    325          unsigned char String::concat(float num)
    326          {
   \                     _ZN6String6concatEf: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB087             SUB      SP,SP,#+28
   \   00000006   0x4608             MOV      R0,R1
    327          	char buf[20];
    328          	char* string = dtostrf(num, 4, 2, buf);
   \   00000008   0xA901             ADD      R1,SP,#+4
   \   0000000A   0x9100             STR      R1,[SP, #+0]
   \   0000000C   0x.... 0x....      BL       __aeabi_f2d
   \   00000010   0x....             B.N      ?Subroutine12
    329          	return concat(string, strlen(string));
    330          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12: (+1)
   \   00000000   0x2302             MOVS     R3,#+2
   \   00000002   0x2204             MOVS     R2,#+4
   \   00000004   0x.... 0x....      BL       dtostrf
   \   00000008   0x4605             MOV      R5,R0
   \   0000000A   0x.... 0x....      BL       strlen
   \   0000000E   0x4602             MOV      R2,R0
   \   00000010   0x4629             MOV      R1,R5
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       _ZN6String6concatEPKcj
   \   00000018   0xB007             ADD      SP,SP,#+28
   \   0000001A   0xBD30             POP      {R4,R5,PC}       ;; return
    331          

   \                                 In section .text, align 2, keep-with-next
    332          unsigned char String::concat(double num)
    333          {
   \                     _ZN6String6concatEd: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB087             SUB      SP,SP,#+28
   \   00000006   0x4610             MOV      R0,R2
    334          	char buf[20];
    335          	char* string = dtostrf(num, 4, 2, buf);
   \   00000008   0xAA01             ADD      R2,SP,#+4
   \   0000000A   0x9200             STR      R2,[SP, #+0]
   \   0000000C   0x4619             MOV      R1,R3
   \   0000000E                      REQUIRE ?Subroutine12
   \   0000000E                      ;; // Fall through to label ?Subroutine12
    336          	return concat(string, strlen(string));
    337          }
    338          

   \                                 In section .text, align 2, keep-with-next
    339          unsigned char String::concat(const __FlashStringHelper * str)
    340          {
   \                     _ZN6String6concatEPK19__FlashStringHelper: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    341          	if (!str) return 0;
   \   00000006   0xD101             BNE.N    ??concat_8
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xBD70             POP      {R4-R6,PC}
    342          	int length = strlen_P((const char *) str);
   \                     ??concat_8: (+1)
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x.... 0x....      BL       strlen
    343          	if (length == 0) return 1;
   \   00000012   0xB1B8             CBZ.N    R0,??concat_9
    344          	unsigned int newlen = len + length;
   \   00000014   0x68A1             LDR      R1,[R4, #+8]
   \   00000016   0x1846             ADDS     R6,R0,R1
    345          	if (!reserve(newlen)) return 0;
   \   00000018   0x6820             LDR      R0,[R4, #+0]
   \   0000001A   0xB110             CBZ.N    R0,??concat_10
   \   0000001C   0x6861             LDR      R1,[R4, #+4]
   \   0000001E   0x42B1             CMP      R1,R6
   \   00000020   0xD209             BCS.N    ??concat_11
   \                     ??concat_10: (+1)
   \   00000022   0x1C71             ADDS     R1,R6,#+1
   \   00000024   0x.... 0x....      BL       realloc
   \   00000028   0xB168             CBZ.N    R0,??concat_12
   \   0000002A   0x6020             STR      R0,[R4, #+0]
   \   0000002C   0x6066             STR      R6,[R4, #+4]
   \   0000002E   0x68A0             LDR      R0,[R4, #+8]
   \   00000030   0xB908             CBNZ.N   R0,??concat_11
   \   00000032   0x6821             LDR      R1,[R4, #+0]
   \   00000034   0x7008             STRB     R0,[R1, #+0]
    346          	strcpy_P(buffer + len, (const char *) str);
   \                     ??concat_11: (+1)
   \   00000036   0x68A0             LDR      R0,[R4, #+8]
   \   00000038   0x6822             LDR      R2,[R4, #+0]
   \   0000003A   0x4629             MOV      R1,R5
   \   0000003C   0x1880             ADDS     R0,R0,R2
   \   0000003E   0x.... 0x....      BL       strcpy
    347          	len = newlen;
   \   00000042   0x60A6             STR      R6,[R4, #+8]
    348          	return 1;
   \                     ??concat_9: (+1)
   \   00000044   0x2001             MOVS     R0,#+1
   \                     ??concat_12: (+1)
   \   00000046   0xBD70             POP      {R4-R6,PC}       ;; return
    349          }
    350          
    351          /*********************************************/
    352          /*  Concatenate                              */
    353          /*********************************************/
    354          

   \                                 In section .text, align 2, keep-with-next
    355          StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
    356          {
   \                     _ZplRK15StringSumHelperRK6String: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    357          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    358          	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   \   00000002   0x688A             LDR      R2,[R1, #+8]
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x.... 0x....      BL       _ZN6String6concatEPKcj
   \   0000000C   0x....             B.N      ?Subroutine7
    359          	return a;
    360          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \   00000000   0xB910             CBNZ.N   R0,??Subroutine7_0
   \   00000002   0x4620             MOV      R0,R4
   \   00000004   0x.... 0x....      BL       _ZN6String10invalidateEv
   \                     ??Subroutine7_0: (+1)
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
    361          

   \                                 In section .text, align 2, keep-with-next
    362          StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
    363          {
   \                     _ZplRK15StringSumHelperPKc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    364          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    365          	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   \   00000006   0xD008             BEQ.N    `??operator+_0`
   \   00000008   0x4628             MOV      R0,R5
   \   0000000A   0x.... 0x....      BL       strlen
   \   0000000E   0x4602             MOV      R2,R0
   \   00000010   0x4629             MOV      R1,R5
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       _ZN6String6concatEPKcj
   \   00000018   0xB910             CBNZ.N   R0,`??operator+_1`
   \                     `??operator+_0`: (+1)
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       _ZN6String10invalidateEv
    366          	return a;
   \                     `??operator+_1`: (+1)
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    367          }
    368          

   \                                 In section .text, align 2, keep-with-next
    369          StringSumHelper & operator + (const StringSumHelper &lhs, char c)
    370          {
   \                     _ZplRK15StringSumHelperc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    371          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    372          	if (!a.concat(c)) a.invalidate();
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   0000000A   0xF88D 0x1000      STRB     R1,[SP, #+0]
   \   0000000E   0x68A0             LDR      R0,[R4, #+8]
   \   00000010   0x1C45             ADDS     R5,R0,#+1
   \   00000012   0x4629             MOV      R1,R5
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       _ZN6String7reserveEj
   \   0000001A   0xB918             CBNZ.N   R0,`??operator+_2`
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       _ZN6String10invalidateEv
   \   00000022   0xE006             B.N      `??operator+_3`
   \                     `??operator+_2`: (+1)
   \   00000024   0x68A0             LDR      R0,[R4, #+8]
   \   00000026   0x6822             LDR      R2,[R4, #+0]
   \   00000028   0xA900             ADD      R1,SP,#+0
   \   0000002A   0x1880             ADDS     R0,R0,R2
   \   0000002C   0x.... 0x....      BL       strcpy
   \   00000030   0x60A5             STR      R5,[R4, #+8]
    373          	return a;
   \                     `??operator+_3`: (+1)
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    374          }
    375          

   \                                 In section .text, align 2, keep-with-next
    376          StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
    377          {
   \                     _ZplRK15StringSumHelperh: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    378          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    379          	if (!a.concat(num)) a.invalidate();
   \   00000004   0x.... 0x....      BL       _ZN6String6concatEh
   \   00000008                      REQUIRE ?Subroutine7
   \   00000008                      ;; // Fall through to label ?Subroutine7
    380          	return a;
    381          }
    382          

   \                                 In section .text, align 2, keep-with-next
    383          StringSumHelper & operator + (const StringSumHelper &lhs, int num)
    384          {
   \                     _ZplRK15StringSumHelperi: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    385          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    386          	if (!a.concat(num)) a.invalidate();
   \   00000004   0x.... 0x....      BL       _ZN6String6concatEi
   \   00000008   0x....             B.N      ?Subroutine7
    387          	return a;
    388          }
    389          

   \                                 In section .text, align 2, keep-with-next
    390          StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
    391          {
   \                     _ZplRK15StringSumHelperj: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    392          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    393          	if (!a.concat(num)) a.invalidate();
   \   00000004   0x.... 0x....      BL       _ZN6String6concatEj
   \   00000008   0x....             B.N      ?Subroutine7
    394          	return a;
    395          }
    396          

   \                                 In section .text, align 2, keep-with-next
    397          StringSumHelper & operator + (const StringSumHelper &lhs, long num)
    398          {
   \                     _ZplRK15StringSumHelperl: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    399          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    400          	if (!a.concat(num)) a.invalidate();
   \   00000004   0x.... 0x....      BL       _ZN6String6concatEl
   \   00000008   0x....             B.N      ?Subroutine7
    401          	return a;
    402          }
    403          

   \                                 In section .text, align 2, keep-with-next
    404          StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
    405          {
   \                     _ZplRK15StringSumHelperm: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    406          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    407          	if (!a.concat(num)) a.invalidate();
   \   00000004   0x.... 0x....      BL       _ZN6String6concatEm
   \   00000008   0x....             B.N      ?Subroutine7
    408          	return a;
    409          }
    410          

   \                                 In section .text, align 2, keep-with-next
    411          StringSumHelper & operator + (const StringSumHelper &lhs, float num)
    412          {
   \                     _ZplRK15StringSumHelperf: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    413          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    414          	if (!a.concat(num)) a.invalidate();
   \   00000004   0x.... 0x....      BL       _ZN6String6concatEf
   \   00000008   0x....             B.N      ?Subroutine0
    415          	return a;
    416          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xB938             CBNZ.N   R0,??Subroutine0_0
   \   00000002   0x6820             LDR      R0,[R4, #+0]
   \   00000004   0xB108             CBZ.N    R0,??Subroutine0_1
   \   00000006   0x.... 0x....      BL       free
   \                     ??Subroutine0_1: (+1)
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x6020             STR      R0,[R4, #+0]
   \   0000000E   0x60A0             STR      R0,[R4, #+8]
   \   00000010   0x6060             STR      R0,[R4, #+4]
   \                     ??Subroutine0_0: (+1)
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    417          

   \                                 In section .text, align 2, keep-with-next
    418          StringSumHelper & operator + (const StringSumHelper &lhs, double num)
    419          {
   \                     _ZplRK15StringSumHelperd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    420          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    421          	if (!a.concat(num)) a.invalidate();
   \   00000004   0x.... 0x....      BL       _ZN6String6concatEd
   \   00000008                      REQUIRE ?Subroutine0
   \   00000008                      ;; // Fall through to label ?Subroutine0
    422          	return a;
    423          }
    424          

   \                                 In section .text, align 2, keep-with-next
    425          StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs)
    426          {
   \                     _ZplRK15StringSumHelperPK19__FlashStringHelper: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    427          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    428          	if (!a.concat(rhs))	a.invalidate();
   \   00000004   0x.... 0x....      BL       _ZN6String6concatEPK19__FlashStringHelper
   \   00000008   0x....             B.N      ?Subroutine0
    429          	return a;
    430          }
    431          
    432          /*********************************************/
    433          /*  Comparison                               */
    434          /*********************************************/
    435          

   \                                 In section .text, align 2, keep-with-next
    436          int String::compareTo(const String &s) const
    437          {
    438          	if (!buffer || !s.buffer) {
   \                     _ZNK6String9compareToERKS_: (+1)
   \   00000000   0x680B             LDR      R3,[R1, #+0]
   \   00000002   0x6802             LDR      R2,[R0, #+0]
   \   00000004   0xB122             CBZ.N    R2,??compareTo_0
   \   00000006   0xB96B             CBNZ.N   R3,??compareTo_1
   \   00000008   0x6880             LDR      R0,[R0, #+8]
   \   0000000A   0xB148             CBZ.N    R0,??compareTo_2
    439          		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    440          		if (buffer && len > 0) return *(unsigned char *)buffer;
   \   0000000C   0x7810             LDRB     R0,[R2, #+0]
   \   0000000E   0x4770             BX       LR
   \                     ??compareTo_0: (+1)
   \   00000010   0x2B00             CMP      R3,#+0
   \   00000012   0xBF1C             ITT      NE 
   \   00000014   0x6888             LDRNE    R0,[R1, #+8]
   \   00000016   0x2800             CMPNE    R0,#+0
   \   00000018   0xD002             BEQ.N    ??compareTo_2
   \   0000001A   0x7818             LDRB     R0,[R3, #+0]
   \   0000001C   0x4240             RSBS     R0,R0,#+0
   \   0000001E   0x4770             BX       LR
    441          		return 0;
   \                     ??compareTo_2: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x4770             BX       LR
    442          	}
    443          	return strcmp(buffer, s.buffer);
   \                     ??compareTo_1: (+1)
   \   00000024   0x4619             MOV      R1,R3
   \   00000026   0x4610             MOV      R0,R2
   \   00000028   0x.... 0x....      B.W      strcmp
    444          }
    445          

   \                                 In section .text, align 2, keep-with-next
    446          unsigned char String::equals(const String &s2) const
    447          {
   \                     _ZNK6String6equalsERKS_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    448          	return (len == s2.len && compareTo(s2) == 0);
   \   00000002   0x6882             LDR      R2,[R0, #+8]
   \   00000004   0x688B             LDR      R3,[R1, #+8]
   \   00000006   0x429A             CMP      R2,R3
   \   00000008   0xD102             BNE.N    ??equals_0
   \   0000000A   0x.... 0x....      BL       _ZNK6String9compareToERKS_
   \   0000000E   0x....             B.N      ?Subroutine10
   \                     ??equals_0: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xBD02             POP      {R1,PC}          ;; return
    449          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10: (+1)
   \   00000000   0x1E40             SUBS     R0,R0,#+1
   \                     ??Subroutine10_0: (+1)
   \   00000002   0x4180             SBCS     R0,R0,R0
   \   00000004   0x0FC0             LSRS     R0,R0,#+31
   \   00000006   0xBD02             POP      {R1,PC}
    450          

   \                                 In section .text, align 2, keep-with-next
    451          unsigned char String::equals(const char *cstr) const
    452          {
   \                     _ZNK6String6equalsEPKc: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    453          	if (len == 0) return (cstr == NULL || *cstr == 0);
   \   00000002   0x6882             LDR      R2,[R0, #+8]
   \   00000004   0xB92A             CBNZ.N   R2,??equals_1
   \   00000006   0xB111             CBZ.N    R1,??equals_2
   \   00000008   0x5689             LDRSB    R1,[R1, R2]
   \   0000000A   0x1E48             SUBS     R0,R1,#+1
   \   0000000C   0xE009             B.N      ??equals_3
   \                     ??equals_2: (+1)
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xBD02             POP      {R1,PC}
    454          	if (cstr == NULL) return buffer[0] == 0;
   \                     ??equals_1: (+1)
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xB911             CBNZ.N   R1,??equals_4
   \   00000016   0x5641             LDRSB    R1,[R0, R1]
   \   00000018   0x1E48             SUBS     R0,R1,#+1
   \   0000001A   0xE002             B.N      ??equals_3
    455          	return strcmp(buffer, cstr) == 0;
   \                     ??equals_4: (+1)
   \   0000001C   0x.... 0x....      BL       strcmp
   \   00000020   0x1E40             SUBS     R0,R0,#+1
   \                     ??equals_3: (+1)
   \   00000022   0x....             B.N      ??Subroutine10_0
    456          }
    457          

   \                                 In section .text, align 2, keep-with-next
    458          unsigned char String::operator<(const String &rhs) const
    459          {
   \                     _ZNK6StringltERKS_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    460          	return compareTo(rhs) < 0;
   \   00000002   0x.... 0x....      BL       _ZNK6String9compareToERKS_
   \   00000006   0x0FC0             LSRS     R0,R0,#+31
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
    461          }
    462          

   \                                 In section .text, align 2, keep-with-next
    463          unsigned char String::operator>(const String &rhs) const
    464          {
   \                     _ZNK6StringgtERKS_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    465          	return compareTo(rhs) > 0;
   \   00000002   0x.... 0x....      BL       _ZNK6String9compareToERKS_
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xDB01             BLT.N    `??operator>_0`
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xBD02             POP      {R1,PC}
   \                     `??operator>_0`: (+1)
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
    466          }
    467          

   \                                 In section .text, align 2, keep-with-next
    468          unsigned char String::operator<=(const String &rhs) const
    469          {
   \                     _ZNK6StringleERKS_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    470          	return compareTo(rhs) <= 0;
   \   00000002   0x.... 0x....      BL       _ZNK6String9compareToERKS_
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xDA01             BGE.N    `??operator<=_0`
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xBD02             POP      {R1,PC}
   \                     `??operator<=_0`: (+1)
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
    471          }
    472          

   \                                 In section .text, align 2, keep-with-next
    473          unsigned char String::operator>=(const String &rhs) const
    474          {
   \                     _ZNK6StringgeERKS_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    475          	return compareTo(rhs) >= 0;
   \   00000002   0x.... 0x....      BL       _ZNK6String9compareToERKS_
   \   00000006   0x43C0             MVNS     R0,R0
   \   00000008   0x0FC0             LSRS     R0,R0,#+31
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
    476          }
    477          

   \                                 In section .text, align 2, keep-with-next
    478          unsigned char String::equalsIgnoreCase( const String &s2 ) const
    479          {
   \                     _ZNK6String16equalsIgnoreCaseERKS_: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    480          	if (this == &s2) return 1;
   \   00000002   0x4288             CMP      R0,R1
   \   00000004   0xD016             BEQ.N    ??equalsIgnoreCase_0
    481          	if (len != s2.len) return 0;
   \   00000006   0x6882             LDR      R2,[R0, #+8]
   \   00000008   0x688B             LDR      R3,[R1, #+8]
   \   0000000A   0x429A             CMP      R2,R3
   \   0000000C   0xD110             BNE.N    ??equalsIgnoreCase_1
    482          	if (len == 0) return 1;
   \   0000000E   0xB18A             CBZ.N    R2,??equalsIgnoreCase_0
    483          	const char *p1 = buffer;
   \   00000010   0x6804             LDR      R4,[R0, #+0]
    484          	const char *p2 = s2.buffer;
   \   00000012   0x680D             LDR      R5,[R1, #+0]
    485          	while (*p1) {
   \                     ??equalsIgnoreCase_2: (+1)
   \   00000014   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   00000018   0xB160             CBZ.N    R0,??equalsIgnoreCase_0
    486          		if (tolower(*p1++) != tolower(*p2++)) return 0;
   \   0000001A   0xF914 0x0B01      LDRSB    R0,[R4], #+1
   \   0000001E   0x.... 0x....      BL       tolower
   \   00000022   0x4606             MOV      R6,R0
   \   00000024   0xF915 0x0B01      LDRSB    R0,[R5], #+1
   \   00000028   0x.... 0x....      BL       tolower
   \   0000002C   0x4286             CMP      R6,R0
   \   0000002E   0xD0F1             BEQ.N    ??equalsIgnoreCase_2
   \                     ??equalsIgnoreCase_1: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xBD70             POP      {R4-R6,PC}
    487          	} 
    488          	return 1;
   \                     ??equalsIgnoreCase_0: (+1)
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0xBD70             POP      {R4-R6,PC}       ;; return
    489          }
    490          

   \                                 In section .text, align 2, keep-with-next
    491          unsigned char String::startsWith( const String &s2 ) const
    492          {
   \                     _ZNK6String10startsWithERKS_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    493          	if (len < s2.len) return 0;
   \   00000002   0x688A             LDR      R2,[R1, #+8]
   \   00000004   0x6883             LDR      R3,[R0, #+8]
   \   00000006   0x4293             CMP      R3,R2
   \   00000008   0xD308             BCC.N    ??startsWith_0
    494          	return startsWith(s2, 0);
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xBF1C             ITT      NE 
   \   00000010   0x6809             LDRNE    R1,[R1, #+0]
   \   00000012   0x2900             CMPNE    R1,#+0
   \   00000014   0xD002             BEQ.N    ??startsWith_0
   \   00000016   0x.... 0x....      BL       strncmp
   \   0000001A   0x....             B.N      ?Subroutine10
   \                     ??startsWith_0: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xBD02             POP      {R1,PC}          ;; return
    495          }
    496          

   \                                 In section .text, align 2, keep-with-next
    497          unsigned char String::startsWith( const String &s2, unsigned int offset ) const
    498          {
   \                     _ZNK6String10startsWithERKS_j: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4613             MOV      R3,R2
    499          	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   \   00000004   0x688A             LDR      R2,[R1, #+8]
   \   00000006   0x6884             LDR      R4,[R0, #+8]
   \   00000008   0x1AA4             SUBS     R4,R4,R2
   \   0000000A   0x429C             CMP      R4,R3
   \   0000000C   0xD305             BCC.N    ??startsWith_1
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xBF1C             ITT      NE 
   \   00000014   0x6809             LDRNE    R1,[R1, #+0]
   \   00000016   0x2900             CMPNE    R1,#+0
   \   00000018   0xD101             BNE.N    ??startsWith_2
   \                     ??startsWith_1: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xBD10             POP      {R4,PC}
    500          	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
   \                     ??startsWith_2: (+1)
   \   0000001E   0x1818             ADDS     R0,R3,R0
   \   00000020   0x.... 0x....      BL       strncmp
   \   00000024   0x1E40             SUBS     R0,R0,#+1
   \   00000026   0x4180             SBCS     R0,R0,R0
   \   00000028   0x0FC0             LSRS     R0,R0,#+31
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
    501          }
    502          

   \                                 In section .text, align 2, keep-with-next
    503          unsigned char String::endsWith( const String &s2 ) const
    504          {
   \                     _ZNK6String8endsWithERKS_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    505          	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   \   00000002   0x688A             LDR      R2,[R1, #+8]
   \   00000004   0x6883             LDR      R3,[R0, #+8]
   \   00000006   0x4293             CMP      R3,R2
   \   00000008   0xD305             BCC.N    ??endsWith_0
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xBF1C             ITT      NE 
   \   00000010   0x6809             LDRNE    R1,[R1, #+0]
   \   00000012   0x2900             CMPNE    R1,#+0
   \   00000014   0xD101             BNE.N    ??endsWith_1
   \                     ??endsWith_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xBD02             POP      {R1,PC}
    506          	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   \                     ??endsWith_1: (+1)
   \   0000001A   0x1A9A             SUBS     R2,R3,R2
   \   0000001C   0x1810             ADDS     R0,R2,R0
   \   0000001E   0x.... 0x....      BL       strcmp
   \   00000022                      REQUIRE ?Subroutine10
   \   00000022                      ;; // Fall through to label ?Subroutine10
    507          }
    508          
    509          /*********************************************/
    510          /*  Character Access                         */
    511          /*********************************************/
    512          

   \                                 In section .text, align 2, keep-with-next
    513          char String::charAt(unsigned int loc) const
    514          {
    515          	return operator[](loc);
   \                     _ZNK6String6charAtEj: (+1)
   \   00000000   0x6882             LDR      R2,[R0, #+8]
   \   00000002   0x4291             CMP      R1,R2
   \   00000004   0xD203             BCS.N    ??charAt_0
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xB108             CBZ.N    R0,??charAt_0
   \   0000000A   0x5608             LDRSB    R0,[R1, R0]
   \   0000000C   0x4770             BX       LR
   \                     ??charAt_0: (+1)
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x4770             BX       LR               ;; return
    516          }
    517          

   \                                 In section .text, align 2, keep-with-next
    518          void String::setCharAt(unsigned int loc, char c) 
    519          {
    520          	if (loc < len) buffer[loc] = c;
   \                     _ZN6String9setCharAtEjc: (+1)
   \   00000000   0x6883             LDR      R3,[R0, #+8]
   \   00000002   0x4299             CMP      R1,R3
   \   00000004   0xBF3C             ITT      CC 
   \   00000006   0x6800             LDRCC    R0,[R0, #+0]
   \   00000008   0x540A             STRBCC   R2,[R1, R0]
    521          }
   \   0000000A   0x4770             BX       LR               ;; return
    522          

   \                                 In section .text, align 2, keep-with-next
    523          char & String::operator[](unsigned int index)
    524          {
    525          	static char dummy_writable_char;
    526          	if (index >= len || !buffer) {
   \                     _ZN6StringixEj: (+1)
   \   00000000   0x6882             LDR      R2,[R0, #+8]
   \   00000002   0x4291             CMP      R1,R2
   \   00000004   0xD201             BCS.N    `??operator[]_0`
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xB918             CBNZ.N   R0,`??operator[]_1`
    527          		dummy_writable_char = 0;
   \                     `??operator[]_0`: (+1)
   \   0000000A   0x....             LDR.N    R0,??DataTable2_1
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x7001             STRB     R1,[R0, #+0]
    528          		return dummy_writable_char;
   \   00000010   0x4770             BX       LR
    529          	}
    530          	return buffer[index];
   \                     `??operator[]_1`: (+1)
   \   00000012   0x1808             ADDS     R0,R1,R0
   \   00000014   0x4770             BX       LR               ;; return
    531          }

   \                                 In section .bss, align 1
   \                     ??dummy_writable_char:
   \   00000000                      DS8 1
    532          

   \                                 In section .text, align 2, keep-with-next
    533          char String::operator[]( unsigned int index ) const
    534          {
    535          	if (index >= len || !buffer) return 0;
   \                     _ZNK6StringixEj: (+1)
   \   00000000   0x6882             LDR      R2,[R0, #+8]
   \   00000002   0x4291             CMP      R1,R2
   \   00000004   0xD201             BCS.N    `??operator[]_2`
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xB908             CBNZ.N   R0,`??operator[]_3`
   \                     `??operator[]_2`: (+1)
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x4770             BX       LR
    536          	return buffer[index];
   \                     `??operator[]_3`: (+1)
   \   0000000E   0x5608             LDRSB    R0,[R1, R0]
   \   00000010   0x4770             BX       LR               ;; return
    537          }
    538          

   \                                 In section .text, align 2, keep-with-next
    539          void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
    540          {
   \                     _ZNK6String8getBytesEPhjj: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x460C             MOV      R4,R1
    541          	if (!bufsize || !buf) return;
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xBF18             IT       NE 
   \   00000008   0x2C00             CMPNE    R4,#+0
   \   0000000A   0xD012             BEQ.N    ??getBytes_0
    542          	if (index >= len) {
   \   0000000C   0x6881             LDR      R1,[R0, #+8]
   \   0000000E   0x428B             CMP      R3,R1
   \   00000010   0xD302             BCC.N    ??getBytes_1
    543          		buf[0] = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x7020             STRB     R0,[R4, #+0]
    544          		return;
   \   00000016   0xBD31             POP      {R0,R4,R5,PC}
    545          	}
    546          	unsigned int n = bufsize - 1;
   \                     ??getBytes_1: (+1)
   \   00000018   0x1E55             SUBS     R5,R2,#+1
    547          	if (n > len - index) n = len - index;
   \   0000001A   0x1AC9             SUBS     R1,R1,R3
   \   0000001C   0x42A9             CMP      R1,R5
   \   0000001E   0xBF38             IT       CC 
   \   00000020   0x460D             MOVCC    R5,R1
    548          	strncpy((char *)buf, buffer + index, n);
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x1819             ADDS     R1,R3,R0
   \   00000026   0x462A             MOV      R2,R5
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       strncpy
    549          	buf[n] = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x5528             STRB     R0,[R5, R4]
    550          }
   \                     ??getBytes_0: (+1)
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    551          
    552          /*********************************************/
    553          /*  Search                                   */
    554          /*********************************************/
    555          

   \                                 In section .text, align 2, keep-with-next
    556          int String::indexOf(char c) const
    557          {
   \                     _ZNK6String7indexOfEc: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    558          	return indexOf(c, 0);
   \   00000004   0x68A0             LDR      R0,[R4, #+8]
   \   00000006   0xB118             CBZ.N    R0,??indexOf_0
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0x.... 0x....      BL       __iar_Strchr
   \   0000000E   0xB900             CBNZ.N   R0,??indexOf_1
   \                     ??indexOf_0: (+1)
   \   00000010   0x....             B.N      ?Subroutine9
   \                     ??indexOf_1: (+1)
   \   00000012   0x....             B.N      ?Subroutine8
    559          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8: (+1)
   \   00000000   0x6821             LDR      R1,[R4, #+0]
   \   00000002   0x1A40             SUBS     R0,R0,R1
   \   00000004   0xBD10             POP      {R4,PC}          ;; return
    560          

   \                                 In section .text, align 2, keep-with-next
    561          int String::indexOf( char ch, unsigned int fromIndex ) const
    562          {
   \                     _ZNK6String7indexOfEcj: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    563          	if (fromIndex >= len) return -1;
   \   00000004   0x68A0             LDR      R0,[R4, #+8]
   \   00000006   0x4282             CMP      R2,R0
   \   00000008   0xD204             BCS.N    ??indexOf_2
    564          	const char* temp = strchr(buffer + fromIndex, ch);
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x1810             ADDS     R0,R2,R0
   \   0000000E   0x.... 0x....      BL       __iar_Strchr
    565          	if (temp == NULL) return -1;
   \   00000012   0xB900             CBNZ.N   R0,??indexOf_3
   \                     ??indexOf_2: (+1)
   \   00000014   0x....             B.N      ?Subroutine9
    566          	return temp - buffer;
   \                     ??indexOf_3: (+1)
   \   00000016   0x....             B.N      ?Subroutine8
    567          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9: (+1)
   \   00000000   0xF04F 0x30FF      MOV      R0,#-1
   \   00000004   0xBD10             POP      {R4,PC}
    568          

   \                                 In section .text, align 2, keep-with-next
    569          int String::indexOf(const String &s2) const
    570          {
   \                     _ZNK6String7indexOfERKS_: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    571          	return indexOf(s2, 0);
   \   00000002   0x6882             LDR      R2,[R0, #+8]
   \   00000004   0xB12A             CBZ.N    R2,??indexOf_4
   \   00000006   0x6804             LDR      R4,[R0, #+0]
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       __iar_Strstr
   \   00000010   0xB900             CBNZ.N   R0,??indexOf_5
   \                     ??indexOf_4: (+1)
   \   00000012   0x....             B.N      ?Subroutine9
   \                     ??indexOf_5: (+1)
   \   00000014   0x1B00             SUBS     R0,R0,R4
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    572          }
    573          

   \                                 In section .text, align 2, keep-with-next
    574          int String::indexOf(const String &s2, unsigned int fromIndex) const
    575          {
   \                     _ZNK6String7indexOfERKS_j: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    576          	if (fromIndex >= len) return -1;
   \   00000002   0x6883             LDR      R3,[R0, #+8]
   \   00000004   0x429A             CMP      R2,R3
   \   00000006   0xD205             BCS.N    ??indexOf_6
    577          	const char *found = strstr(buffer + fromIndex, s2.buffer);
   \   00000008   0x6804             LDR      R4,[R0, #+0]
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0x1910             ADDS     R0,R2,R4
   \   0000000E   0x.... 0x....      BL       __iar_Strstr
    578          	if (found == NULL) return -1;
   \   00000012   0xB900             CBNZ.N   R0,??indexOf_7
   \                     ??indexOf_6: (+1)
   \   00000014   0x....             B.N      ?Subroutine9
    579          	return found - buffer;
   \                     ??indexOf_7: (+1)
   \   00000016   0x1B00             SUBS     R0,R0,R4
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    580          }
    581          

   \                                 In section .text, align 2, keep-with-next
    582          int String::lastIndexOf( char theChar ) const
    583          {
    584          	return lastIndexOf(theChar, len - 1);
   \                     _ZNK6String11lastIndexOfEc: (+1)
   \   00000000   0x6882             LDR      R2,[R0, #+8]
   \   00000002   0x1E52             SUBS     R2,R2,#+1
   \   00000004                      REQUIRE _ZNK6String11lastIndexOfEcj
   \   00000004                      ;; // Fall through to label String::lastIndexOf(char, unsigned int) const
    585          }
    586          

   \                                 In section .text, align 2, keep-with-next
    587          int String::lastIndexOf(char ch, unsigned int fromIndex) const
    588          {
   \                     _ZNK6String11lastIndexOfEcj: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4615             MOV      R5,R2
    589          	if (fromIndex >= len) return -1;
   \   00000006   0x68A0             LDR      R0,[R4, #+8]
   \   00000008   0x4285             CMP      R5,R0
   \   0000000A   0xD20C             BCS.N    ??lastIndexOf_0
    590          	char tempchar = buffer[fromIndex + 1];
   \   0000000C   0x6820             LDR      R0,[R4, #+0]
   \   0000000E   0x1828             ADDS     R0,R5,R0
    591          	buffer[fromIndex + 1] = '\0';
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0xF990 0x6001      LDRSB    R6,[R0, #+1]
   \   00000016   0x7042             STRB     R2,[R0, #+1]
    592          	char* temp = strrchr( buffer, ch );
   \   00000018   0x6820             LDR      R0,[R4, #+0]
   \   0000001A   0x.... 0x....      BL       __iar_Strrchr
    593          	buffer[fromIndex + 1] = tempchar;
   \   0000001E   0x6821             LDR      R1,[R4, #+0]
   \   00000020   0x1869             ADDS     R1,R5,R1
   \   00000022   0x704E             STRB     R6,[R1, #+1]
    594          	if (temp == NULL) return -1;
   \   00000024   0xB910             CBNZ.N   R0,??lastIndexOf_1
   \                     ??lastIndexOf_0: (+1)
   \   00000026   0xF04F 0x30FF      MOV      R0,#-1
   \   0000002A   0xBD70             POP      {R4-R6,PC}
    595          	return temp - buffer;
   \                     ??lastIndexOf_1: (+1)
   \   0000002C   0x6821             LDR      R1,[R4, #+0]
   \   0000002E   0x1A40             SUBS     R0,R0,R1
   \   00000030   0xBD70             POP      {R4-R6,PC}       ;; return
    596          }
    597          

   \                                 In section .text, align 2, keep-with-next
    598          int String::lastIndexOf(const String &s2) const
    599          {
    600          	return lastIndexOf(s2, len - s2.len);
   \                     _ZNK6String11lastIndexOfERKS_: (+1)
   \   00000000   0x6882             LDR      R2,[R0, #+8]
   \   00000002   0x688B             LDR      R3,[R1, #+8]
   \   00000004   0x1AD2             SUBS     R2,R2,R3
   \   00000006                      REQUIRE _ZNK6String11lastIndexOfERKS_j
   \   00000006                      ;; // Fall through to label String::lastIndexOf(String const &, unsigned int) const
    601          }
    602          

   \                                 In section .text, align 2, keep-with-next
    603          int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
    604          {
   \                     _ZNK6String11lastIndexOfERKS_j: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x460C             MOV      R4,R1
   \   00000004   0x4615             MOV      R5,R2
    605            	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   \   00000006   0x68A1             LDR      R1,[R4, #+8]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xBF1C             ITT      NE 
   \   0000000C   0x6882             LDRNE    R2,[R0, #+8]
   \   0000000E   0x2A00             CMPNE    R2,#+0
   \   00000010   0xD001             BEQ.N    ??lastIndexOf_2
   \   00000012   0x428A             CMP      R2,R1
   \   00000014   0xD202             BCS.N    ??lastIndexOf_3
   \                     ??lastIndexOf_2: (+1)
   \   00000016   0xF04F 0x30FF      MOV      R0,#-1
   \   0000001A   0xBDF2             POP      {R1,R4-R7,PC}
    606          	if (fromIndex >= len) fromIndex = len - 1;
   \                     ??lastIndexOf_3: (+1)
   \   0000001C   0x4295             CMP      R5,R2
   \   0000001E   0xBF28             IT       CS 
   \   00000020   0x1E55             SUBCS    R5,R2,#+1
    607          	int found = -1;
    608          	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   \   00000022   0x6807             LDR      R7,[R0, #+0]
   \   00000024   0xF04F 0x36FF      MOV      R6,#-1
   \   00000028   0x4638             MOV      R0,R7
   \   0000002A   0xE004             B.N      ??lastIndexOf_4
    609          		p = strstr(p, s2.buffer);
    610          		if (!p) break;
    611          		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
   \                     ??lastIndexOf_5: (+1)
   \   0000002C   0x1BC1             SUBS     R1,R0,R7
   \   0000002E   0x428D             CMP      R5,R1
   \   00000030   0xBF28             IT       CS 
   \   00000032   0x460E             MOVCS    R6,R1
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \                     ??lastIndexOf_4: (+1)
   \   00000036   0x19E9             ADDS     R1,R5,R7
   \   00000038   0x4281             CMP      R1,R0
   \   0000003A   0xD304             BCC.N    ??lastIndexOf_6
   \   0000003C   0x6821             LDR      R1,[R4, #+0]
   \   0000003E   0x.... 0x....      BL       __iar_Strstr
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD1F2             BNE.N    ??lastIndexOf_5
    612          	}
    613          	return found;
   \                     ??lastIndexOf_6: (+1)
   \   00000046   0x4630             MOV      R0,R6
   \   00000048   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    614          }
    615          

   \                                 In section .text, align 2, keep-with-next
    616          String String::substring(unsigned int left, unsigned int right) const
    617          {
   \                     _ZNK6String9substringEjj: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4616             MOV      R6,R2
   \   00000006   0x461F             MOV      R7,R3
   \   00000008   0x4680             MOV      R8,R0
   \   0000000A   0x460D             MOV      R5,R1
    618          	if (left > right) {
   \   0000000C   0x42B7             CMP      R7,R6
   \   0000000E   0xD202             BCS.N    ??substring_0
    619          		unsigned int temp = right;
   \   00000010   0x4638             MOV      R0,R7
    620          		right = left;
   \   00000012   0x4637             MOV      R7,R6
    621          		left = temp;
   \   00000014   0x4606             MOV      R6,R0
    622          	}
    623          	String out;
   \                     ??substring_0: (+1)
   \   00000016   0x....             ADR.N    R1,??DataTable2  ;; ""
   \   00000018   0x4640             MOV      R0,R8
   \   0000001A   0x.... 0x....      BL       _ZN6StringC1EPKc
    624          	if (left > len) return out;
   \   0000001E   0x68A8             LDR      R0,[R5, #+8]
   \   00000020   0x42B0             CMP      R0,R6
   \   00000022   0xD30D             BCC.N    ??substring_1
    625          	if (right > len) right = len;
   \   00000024   0x42B8             CMP      R0,R7
   \   00000026   0xBF98             IT       LS 
   \   00000028   0x4607             MOVLS    R7,R0
    626          	char temp = buffer[right];  // save the replaced character
   \   0000002A   0x6828             LDR      R0,[R5, #+0]
   \   0000002C   0x563C             LDRSB    R4,[R7, R0]
    627          	buffer[right] = '\0';	
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x5439             STRB     R1,[R7, R0]
    628          	out = buffer + left;  // pointer arithmetic
   \   00000032   0x6828             LDR      R0,[R5, #+0]
   \   00000034   0x1831             ADDS     R1,R6,R0
   \   00000036   0x4640             MOV      R0,R8
   \   00000038   0x.... 0x....      BL       _ZN6StringaSEPKc
    629          	buffer[right] = temp;  //restore character
   \   0000003C   0x6828             LDR      R0,[R5, #+0]
   \   0000003E   0x543C             STRB     R4,[R7, R0]
    630          	return out;
   \                     ??substring_1: (+1)
   \   00000040   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    631          }
    632          
    633          /*********************************************/
    634          /*  Modification                             */
    635          /*********************************************/
    636          

   \                                 In section .text, align 2, keep-with-next
    637          void String::replace(char find, char replace)
    638          {
    639          	if (!buffer) return;
   \                     _ZN6String7replaceEcc: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0xB920             CBNZ.N   R0,??replace_0
   \   00000004   0x4770             BX       LR
    640          	for (char *p = buffer; *p; p++) {
    641          		if (*p == find) *p = replace;
   \                     ??replace_1: (+1)
   \   00000006   0x428B             CMP      R3,R1
   \   00000008   0xBF08             IT       EQ 
   \   0000000A   0x7002             STRBEQ   R2,[R0, #+0]
    642          	}
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \                     ??replace_0: (+1)
   \   0000000E   0xF990 0x3000      LDRSB    R3,[R0, #+0]
   \   00000012   0x2B00             CMP      R3,#+0
   \   00000014   0xD1F7             BNE.N    ??replace_1
    643          }
   \   00000016   0x4770             BX       LR               ;; return
    644          

   \                                 In section .text, align 2, keep-with-next
    645          void String::replace(const String& find, const String& replace)
    646          {
   \                     _ZN6String7replaceERKS_S1_: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
    647          	if (len == 0 || find.len == 0) return;
   \   00000008   0xF8D5 0xB008      LDR      R11,[R5, #+8]
   \   0000000C   0x4617             MOV      R7,R2
   \   0000000E   0xF1BB 0x0F00      CMP      R11,#+0
   \   00000012   0xBF1E             ITTT     NE 
   \   00000014   0x68B0             LDRNE    R0,[R6, #+8]
   \   00000016   0x9000             STRNE    R0,[SP, #+0]
   \   00000018   0x2800             CMPNE    R0,#+0
   \   0000001A   0xD076             BEQ.N    ??replace_2
    648          	int diff = replace.len - find.len;
   \   0000001C   0x68B8             LDR      R0,[R7, #+8]
   \   0000001E   0x9900             LDR      R1,[SP, #+0]
    649          	char *readFrom = buffer;
   \   00000020   0x682C             LDR      R4,[R5, #+0]
   \   00000022   0xEBB0 0x0801      SUBS     R8,R0,R1
   \   00000026   0x46A1             MOV      R9,R4
    650          	char *foundAt;
    651          	if (diff == 0) {
   \   00000028   0xD10D             BNE.N    ??replace_3
    652          		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   \                     ??replace_4: (+1)
   \   0000002A   0x6831             LDR      R1,[R6, #+0]
   \   0000002C   0x4648             MOV      R0,R9
   \   0000002E   0x.... 0x....      BL       __iar_Strstr
   \   00000032   0x0004             MOVS     R4,R0
   \   00000034   0xD069             BEQ.N    ??replace_2
    653          			memcpy(foundAt, replace.buffer, replace.len);
   \   00000036   0x68BA             LDR      R2,[R7, #+8]
   \   00000038   0x6839             LDR      R1,[R7, #+0]
   \   0000003A   0x.... 0x....      BL       __aeabi_memcpy
    654          			readFrom = foundAt + replace.len;
   \   0000003E   0x68B8             LDR      R0,[R7, #+8]
   \   00000040   0xEB00 0x0904      ADD      R9,R0,R4
   \   00000044   0xE7F1             B.N      ??replace_4
    655          		}
    656          	} else if (diff < 0) {
   \                     ??replace_3: (+1)
   \   00000046   0xD522             BPL.N    ??replace_5
    657          		char *writeTo = buffer;
   \   00000048   0xE014             B.N      ??replace_6
    658          		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    659          			unsigned int n = foundAt - readFrom;
   \                     ??replace_7: (+1)
   \   0000004A   0xEBAA 0x0B09      SUB      R11,R10,R9
    660          			memcpy(writeTo, readFrom, n);
   \   0000004E   0x465A             MOV      R2,R11
   \   00000050   0x4649             MOV      R1,R9
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       __aeabi_memcpy
    661          			writeTo += n;
   \   00000058   0x445C             ADD      R4,R11,R4
    662          			memcpy(writeTo, replace.buffer, replace.len);
   \   0000005A   0x68BA             LDR      R2,[R7, #+8]
   \   0000005C   0x6839             LDR      R1,[R7, #+0]
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       __aeabi_memcpy
    663          			writeTo += replace.len;
   \   00000064   0x68B8             LDR      R0,[R7, #+8]
   \   00000066   0x1904             ADDS     R4,R0,R4
    664          			readFrom = foundAt + find.len;
   \   00000068   0x68B0             LDR      R0,[R6, #+8]
   \   0000006A   0xEB00 0x090A      ADD      R9,R0,R10
    665          			len += diff;
   \   0000006E   0x68A8             LDR      R0,[R5, #+8]
   \   00000070   0x4440             ADD      R0,R8,R0
   \   00000072   0x60A8             STR      R0,[R5, #+8]
    666          		}
   \                     ??replace_6: (+1)
   \   00000074   0x4648             MOV      R0,R9
   \   00000076   0x6831             LDR      R1,[R6, #+0]
   \   00000078   0x.... 0x....      BL       __iar_Strstr
   \   0000007C   0xEA5F 0x0A00      MOVS     R10,R0
   \   00000080   0xD1E3             BNE.N    ??replace_7
    667          		strcpy(writeTo, readFrom);
   \   00000082   0x4649             MOV      R1,R9
   \   00000084   0x4620             MOV      R0,R4
   \   00000086   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \   0000008A   0x.... 0x....      B.W      strcpy
    668          	} else {
    669          		unsigned int size = len; // compute size needed for result
   \                     ??replace_5: (+1)
   \   0000008E   0x46DA             MOV      R10,R11
   \   00000090   0xE003             B.N      ??replace_8
    670          		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    671          			readFrom = foundAt + find.len;
   \                     ??replace_9: (+1)
   \   00000092   0x9900             LDR      R1,[SP, #+0]
   \   00000094   0xEB01 0x0900      ADD      R9,R1,R0
    672          			size += diff;
   \   00000098   0x44C2             ADD      R10,R8,R10
    673          		}
   \                     ??replace_8: (+1)
   \   0000009A   0x6831             LDR      R1,[R6, #+0]
   \   0000009C   0x4648             MOV      R0,R9
   \   0000009E   0x.... 0x....      BL       __iar_Strstr
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD1F5             BNE.N    ??replace_9
    674          		if (size == len) return;
   \   000000A6   0x45DA             CMP      R10,R11
   \   000000A8   0xD02F             BEQ.N    ??replace_2
    675          		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
   \   000000AA   0x6868             LDR      R0,[R5, #+4]
   \   000000AC   0x4550             CMP      R0,R10
   \   000000AE   0xD208             BCS.N    ??replace_10
   \   000000B0   0xF10A 0x0101      ADD      R1,R10,#+1
   \   000000B4   0x4620             MOV      R0,R4
   \   000000B6   0x.... 0x....      BL       realloc
   \   000000BA   0xB330             CBZ.N    R0,??replace_2
   \   000000BC   0x6028             STR      R0,[R5, #+0]
   \   000000BE   0xF8C5 0xA004      STR      R10,[R5, #+4]
    676          		int index = len - 1;
   \                     ??replace_10: (+1)
   \   000000C2   0x68A8             LDR      R0,[R5, #+8]
   \   000000C4   0x1E42             SUBS     R2,R0,#+1
   \   000000C6   0xE018             B.N      ??replace_11
    677          		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    678          			readFrom = buffer + index + find.len;
   \                     ??replace_12: (+1)
   \   000000C8   0x6828             LDR      R0,[R5, #+0]
   \   000000CA   0x68B1             LDR      R1,[R6, #+8]
   \   000000CC   0x1822             ADDS     R2,R4,R0
   \   000000CE   0x188B             ADDS     R3,R1,R2
    679          			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
   \   000000D0   0x68A9             LDR      R1,[R5, #+8]
   \   000000D2   0x1AC9             SUBS     R1,R1,R3
   \   000000D4   0x1842             ADDS     R2,R0,R1
   \   000000D6   0x4619             MOV      R1,R3
   \   000000D8   0xEB08 0x0003      ADD      R0,R8,R3
   \   000000DC   0x.... 0x....      BL       __aeabi_memmove
    680          			len += diff;
   \   000000E0   0x68A8             LDR      R0,[R5, #+8]
   \   000000E2   0x4440             ADD      R0,R8,R0
   \   000000E4   0x60A8             STR      R0,[R5, #+8]
    681          			buffer[len] = 0;
   \   000000E6   0x2100             MOVS     R1,#+0
   \   000000E8   0x682A             LDR      R2,[R5, #+0]
   \   000000EA   0x5481             STRB     R1,[R0, R2]
    682          			memcpy(buffer + index, replace.buffer, replace.len);
   \   000000EC   0x6828             LDR      R0,[R5, #+0]
   \   000000EE   0x68BA             LDR      R2,[R7, #+8]
   \   000000F0   0x6839             LDR      R1,[R7, #+0]
   \   000000F2   0x1820             ADDS     R0,R4,R0
   \   000000F4   0x.... 0x....      BL       __aeabi_memcpy
    683          			index--;
   \   000000F8   0x1E62             SUBS     R2,R4,#+1
    684          		}
   \                     ??replace_11: (+1)
   \   000000FA   0x2A00             CMP      R2,#+0
   \   000000FC   0xD405             BMI.N    ??replace_2
   \   000000FE   0x4631             MOV      R1,R6
   \   00000100   0x4628             MOV      R0,R5
   \   00000102   0x.... 0x....      BL       _ZNK6String11lastIndexOfERKS_j
   \   00000106   0x0004             MOVS     R4,R0
   \   00000108   0xD5DE             BPL.N    ??replace_12
    685          	}
    686          }
   \                     ??replace_2: (+1)
   \   0000010A   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    687          

   \                                 In section .text, align 2, keep-with-next
    688          void String::remove(unsigned int index){
    689          	if (index >= len) { return; }
   \                     _ZN6String6removeEj: (+1)
   \   00000000   0x6882             LDR      R2,[R0, #+8]
   \   00000002   0x4291             CMP      R1,R2
   \   00000004   0xBF3C             ITT      CC 
    690          	int count = len - index;
    691          	remove(index, count);
   \   00000006   0x1A52             SUBCC    R2,R2,R1
   \   00000008   0x.... 0x....      BCC.W    _ZN6String6removeEjj
    692          }
   \   0000000C   0x4770             BX       LR               ;; return
    693          

   \                                 In section .text, align 2, keep-with-next
    694          void String::remove(unsigned int index, unsigned int count){
   \                     _ZN6String6removeEjj: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4613             MOV      R3,R2
    695          	if (index >= len) { return; }
   \   00000006   0x68A2             LDR      R2,[R4, #+8]
   \   00000008   0x4291             CMP      R1,R2
   \   0000000A   0xD210             BCS.N    ??remove_0
    696          	if (count <= 0) { return; }
   \   0000000C   0xB17B             CBZ.N    R3,??remove_0
    697          	if (index + count > len) { count = len - index; }
   \   0000000E   0x1858             ADDS     R0,R3,R1
   \   00000010   0x4282             CMP      R2,R0
   \   00000012   0xBF38             IT       CC 
   \   00000014   0x1A53             SUBCC    R3,R2,R1
    698          	char *writeTo = buffer + index;
   \   00000016   0x6820             LDR      R0,[R4, #+0]
    699          	len = len - count;
   \   00000018   0x1AD2             SUBS     R2,R2,R3
   \   0000001A   0x60A2             STR      R2,[R4, #+8]
   \   0000001C   0x1808             ADDS     R0,R1,R0
    700          	strncpy(writeTo, buffer + index + count,len - index);
   \   0000001E   0x1A52             SUBS     R2,R2,R1
   \   00000020   0x1819             ADDS     R1,R3,R0
   \   00000022   0x.... 0x....      BL       strncpy
    701          	buffer[len] = 0;
   \   00000026   0x68A1             LDR      R1,[R4, #+8]
   \   00000028   0x6822             LDR      R2,[R4, #+0]
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x5488             STRB     R0,[R1, R2]
    702          }
   \                     ??remove_0: (+1)
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    703          

   \                                 In section .text, align 2, keep-with-next
    704          void String::toLowerCase(void)
    705          {
   \                     _ZN6String11toLowerCaseEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    706          	if (!buffer) return;
   \   00000002   0x6804             LDR      R4,[R0, #+0]
   \   00000004   0xB924             CBNZ.N   R4,??toLowerCase_0
   \   00000006   0xBD10             POP      {R4,PC}
    707          	for (char *p = buffer; *p; p++) {
    708          		*p = tolower(*p);
   \                     ??toLowerCase_1: (+1)
   \   00000008   0x.... 0x....      BL       tolower
   \   0000000C   0xF804 0x0B01      STRB     R0,[R4], #+1
    709          	}
   \                     ??toLowerCase_0: (+1)
   \   00000010   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD1F7             BNE.N    ??toLowerCase_1
    710          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    711          

   \                                 In section .text, align 2, keep-with-next
    712          void String::toUpperCase(void)
    713          {
   \                     _ZN6String11toUpperCaseEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    714          	if (!buffer) return;
   \   00000002   0x6804             LDR      R4,[R0, #+0]
   \   00000004   0xB924             CBNZ.N   R4,??toUpperCase_0
   \   00000006   0xBD10             POP      {R4,PC}
    715          	for (char *p = buffer; *p; p++) {
    716          		*p = toupper(*p);
   \                     ??toUpperCase_1: (+1)
   \   00000008   0x.... 0x....      BL       toupper
   \   0000000C   0xF804 0x0B01      STRB     R0,[R4], #+1
    717          	}
   \                     ??toUpperCase_0: (+1)
   \   00000010   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD1F7             BNE.N    ??toUpperCase_1
    718          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    719          

   \                                 In section .text, align 2, keep-with-next
    720          void String::trim(void)
    721          {
   \                     _ZN6String4trimEv: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    722          	if (!buffer || len == 0) return;
   \   00000004   0x6825             LDR      R5,[R4, #+0]
   \   00000006   0xB31D             CBZ.N    R5,??trim_0
   \   00000008   0x68A0             LDR      R0,[R4, #+8]
   \   0000000A   0xB908             CBNZ.N   R0,??trim_1
   \   0000000C   0xBD73             POP      {R0,R1,R4-R6,PC}
    723          	char *begin = buffer;
    724          	while (isspace(*begin)) begin++;
   \                     ??trim_2: (+1)
   \   0000000E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??trim_1: (+1)
   \   00000010   0xF995 0x0000      LDRSB    R0,[R5, #+0]
   \   00000014   0x.... 0x....      BL       isspace
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD1F8             BNE.N    ??trim_2
    725          	char *end = buffer + len - 1;
   \   0000001C   0x68A0             LDR      R0,[R4, #+8]
   \   0000001E   0x6821             LDR      R1,[R4, #+0]
   \   00000020   0x1840             ADDS     R0,R0,R1
   \   00000022   0x1E46             SUBS     R6,R0,#+1
   \   00000024   0xE000             B.N      ??trim_3
    726          	while (isspace(*end) && end >= begin) end--;
   \                     ??trim_4: (+1)
   \   00000026   0x1E76             SUBS     R6,R6,#+1
   \                     ??trim_3: (+1)
   \   00000028   0xF996 0x0000      LDRSB    R0,[R6, #+0]
   \   0000002C   0x.... 0x....      BL       isspace
   \   00000030   0xB108             CBZ.N    R0,??trim_5
   \   00000032   0x42AE             CMP      R6,R5
   \   00000034   0xD2F7             BCS.N    ??trim_4
    727          	len = end + 1 - begin;
   \                     ??trim_5: (+1)
   \   00000036   0x1C70             ADDS     R0,R6,#+1
   \   00000038   0x1B42             SUBS     R2,R0,R5
   \   0000003A   0x60A2             STR      R2,[R4, #+8]
    728          	if (begin > buffer) memcpy(buffer, begin, len);
   \   0000003C   0x6820             LDR      R0,[R4, #+0]
   \   0000003E   0x42A8             CMP      R0,R5
   \   00000040   0xBF3C             ITT      CC 
   \   00000042   0x4629             MOVCC    R1,R5
   \   00000044   0x.... 0x....      BLCC     __aeabi_memcpy
    729          	buffer[len] = 0;
   \   00000048   0x68A1             LDR      R1,[R4, #+8]
   \   0000004A   0x6822             LDR      R2,[R4, #+0]
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x5488             STRB     R0,[R1, R2]
    730          }
   \                     ??trim_0: (+1)
   \   00000050   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    731          
    732          /*********************************************/
    733          /*  Parsing / Conversion                     */
    734          /*********************************************/
    735          

   \                                 In section .text, align 2, keep-with-next
    736          long String::toInt(void) const
    737          {
    738          	if (buffer) return atol(buffer);
   \                     _ZNK6String5toIntEv: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0xB118             CBZ.N    R0,??toInt_0
   \   00000004   0x220A             MOVS     R2,#+10
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x.... 0x....      B.W      __iar_Stoul
    739          	return 0;
   \                     ??toInt_0: (+1)
   \   0000000C   0x4770             BX       LR               ;; return
    740          }
    741          

   \                                 In section .text, align 2, keep-with-next
    742          float String::toFloat(void) const
    743          {
   \                     _ZNK6String7toFloatEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    744          	if (buffer) return float(atof(buffer));
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xB138             CBZ.N    R0,??toFloat_0
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x.... 0x....      BL       __iar_Stod
   \   0000000E   0xE8BD 0x4004      POP      {R2,LR}
   \   00000012   0x.... 0x....      B.W      __aeabi_d2f
    745          	return 0;
   \                     ??toFloat_0: (+1)
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
    746          }

   \                                 In section .rodata, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000   0x00               DC8 ""

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(char const *)
   \                     _ZN6StringC2EPKc: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1EPKc

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(String const &)
   \                     _ZN6StringC2ERKS_: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine1

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(__FlashStringHelper const *)
   \                     _ZN6StringC2EPK19__FlashStringHelper: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine2

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(char)
   \                     _ZN6StringC2Ec: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1Ec

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(unsigned char, unsigned char)
   \                     _ZN6StringC2Ehh: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1Ehh

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(int, unsigned char)
   \                     _ZN6StringC2Eih: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1Eih

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(unsigned int, unsigned char)
   \                     _ZN6StringC2Ejh: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1Ejh

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(long, unsigned char)
   \                     _ZN6StringC2Elh: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1Elh

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(unsigned long, unsigned char)
   \                     _ZN6StringC2Emh: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1Emh

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(float, unsigned char)
   \                     _ZN6StringC2Efh: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1Efh

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject ~String()
   \                     _ZN6StringD2Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     ??dummy_writable_char

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   String::String(String const &)
         8   -> String::operator=(String const &)
       0   String::String(__FlashStringHelper const *)
         8   -> String::operator=(__FlashStringHelper const *)
      16   String::String(char const *)
        16   -> String::copy(char const *, unsigned int)
        16   -> strlen
      16   String::String(char)
        16   -> String::operator=(char const *)
      48   String::String(double, unsigned char)
        48   -> String::operator=(char const *)
        48   -> dtostrf
      56   String::String(float, unsigned char)
        56   -> String::operator=(char const *)
        56   -> __aeabi_f2d
        56   -> dtostrf
      32   String::String(int, unsigned char)
        32   -> String::operator=(char const *)
        32   -> itoa
      48   String::String(long, unsigned char)
        48   -> String::operator=(char const *)
        48   -> ltoa
      24   String::String(unsigned char, unsigned char)
        24   -> String::operator=(char const *)
        24   -> utoa
      32   String::String(unsigned int, unsigned char)
        32   -> String::operator=(char const *)
        32   -> utoa
      48   String::String(unsigned long, unsigned char)
        48   -> String::operator=(char const *)
        48   -> ultoa
      16   String::changeBuffer(unsigned int)
        16   -> realloc
       0   String::charAt(unsigned int) const
       0   String::compareTo(String const &) const
         0   -> strcmp
      16   String::concat(String const &)
        16   -> realloc
        16   -> strcpy
      16   String::concat(__FlashStringHelper const *)
        16   -> realloc
        16   -> strcpy
        16   -> strlen
      16   String::concat(char const *)
        16   -> realloc
        16   -> strcpy
        16   -> strlen
      16   String::concat(char const *, unsigned int)
        16   -> realloc
        16   -> strcpy
      16   String::concat(char)
        16   -> String::reserve(unsigned int)
        16   -> strcpy
      40   String::concat(double)
        40   -> String::concat(char const *, unsigned int)
        40   -> dtostrf
        40   -> strlen
      40   String::concat(float)
        40   -> String::concat(char const *, unsigned int)
        40   -> __aeabi_f2d
        40   -> dtostrf
        40   -> strlen
      24   String::concat(int)
        24   -> String::concat(char const *, unsigned int)
        24   -> itoa
        24   -> strlen
      24   String::concat(long)
        24   -> String::concat(char const *, unsigned int)
        24   -> ltoa
        24   -> strlen
      16   String::concat(unsigned char)
        16   -> String::concat(char const *, unsigned int)
        16   -> itoa
        16   -> strlen
      24   String::concat(unsigned int)
        24   -> String::concat(char const *, unsigned int)
        24   -> strlen
        24   -> utoa
      24   String::concat(unsigned long)
        24   -> String::concat(char const *, unsigned int)
        24   -> strlen
        24   -> ultoa
      16   String::copy(__FlashStringHelper const *, unsigned int)
        16   -> String::invalidate()
        16   -> realloc
        16   -> strcpy
      16   String::copy(char const *, unsigned int)
        16   -> String::invalidate()
        16   -> realloc
        16   -> strcpy
       8   String::endsWith(String const &) const
         8   -> strcmp
       8   String::equals(String const &) const
         8   -> String::compareTo(String const &) const
       8   String::equals(char const *) const
         8   -> strcmp
      16   String::equalsIgnoreCase(String const &) const
        16   -> tolower
      16   String::getBytes(unsigned char *, unsigned int, unsigned int) const
        16   -> strncpy
       8   String::indexOf(String const &) const
         8   -> __iar_Strstr
       8   String::indexOf(String const &, unsigned int) const
         8   -> __iar_Strstr
       8   String::indexOf(char) const
         8   -> __iar_Strchr
       8   String::indexOf(char, unsigned int) const
         8   -> __iar_Strchr
       8   String::invalidate()
         8   -> free
       0   String::lastIndexOf(String const &) const
         0   -> String::lastIndexOf(String const &, unsigned int) const
      24   String::lastIndexOf(String const &, unsigned int) const
        24   -> __iar_Strstr
       0   String::lastIndexOf(char) const
         0   -> String::lastIndexOf(char, unsigned int) const
      16   String::lastIndexOf(char, unsigned int) const
        16   -> __iar_Strrchr
       8   String::operator<(String const &) const
         8   -> String::compareTo(String const &) const
       8   String::operator<=(String const &) const
         8   -> String::compareTo(String const &) const
       8   String::operator=(String const &)
         8   -> String::copy(char const *, unsigned int)
         8   -> String::invalidate()
      16   String::operator=(__FlashStringHelper const *)
        16   -> String::copy(__FlashStringHelper const *, unsigned int)
        16   -> String::invalidate()
        16   -> strlen
      16   String::operator=(char const *)
        16   -> String::copy(char const *, unsigned int)
        16   -> String::invalidate()
        16   -> strlen
       8   String::operator>(String const &) const
         8   -> String::compareTo(String const &) const
       8   String::operator>=(String const &) const
         8   -> String::compareTo(String const &) const
       0   String::operator[](unsigned int)
       0   String::operator[](unsigned int) const
       0   String::remove(unsigned int)
         0   -> String::remove(unsigned int, unsigned int)
       8   String::remove(unsigned int, unsigned int)
         8   -> strncpy
      40   String::replace(String const &, String const &)
        40   -> String::lastIndexOf(String const &, unsigned int) const
        40   -> __aeabi_memcpy
        40   -> __aeabi_memmove
        40   -> __iar_Strstr
        40   -> realloc
         0   -> strcpy
       0   String::replace(char, char)
      16   String::reserve(unsigned int)
        16   -> realloc
       0   String::setCharAt(unsigned int, char)
       8   String::startsWith(String const &) const
         8   -> strncmp
       8   String::startsWith(String const &, unsigned int) const
         8   -> strncmp
       8   String::subobject String(String const &)
         8   -> String::operator=(String const &)
       8   String::subobject String(__FlashStringHelper const *)
         8   -> String::operator=(__FlashStringHelper const *)
       0   String::subobject String(char const *)
         0   -> String::String(char const *)
       0   String::subobject String(char)
         0   -> String::String(char)
       8   String::subobject String(double, unsigned char)
         8   -> String::String(double, unsigned char)
       0   String::subobject String(float, unsigned char)
         0   -> String::String(float, unsigned char)
       0   String::subobject String(int, unsigned char)
         0   -> String::String(int, unsigned char)
       0   String::subobject String(long, unsigned char)
         0   -> String::String(long, unsigned char)
       0   String::subobject String(unsigned char, unsigned char)
         0   -> String::String(unsigned char, unsigned char)
       0   String::subobject String(unsigned int, unsigned char)
         0   -> String::String(unsigned int, unsigned char)
       0   String::subobject String(unsigned long, unsigned char)
         0   -> String::String(unsigned long, unsigned char)
       8   String::subobject ~String()
         8   -> free
      24   String::substring(unsigned int, unsigned int) const
        24   -> String::String(char const *)
        24   -> String::operator=(char const *)
       8   String::toFloat() const
         0   -> __aeabi_d2f
         8   -> __iar_Stod
       0   String::toInt() const
         0   -> __iar_Stoul
       8   String::toLowerCase()
         8   -> tolower
       8   String::toUpperCase()
         8   -> toupper
      24   String::trim()
        24   -> __aeabi_memcpy
        24   -> isspace
       0   String::~String()
         8   -> free
       8   operator+(StringSumHelper const &, String const &)
         8   -> String::concat(char const *, unsigned int)
         8   -> String::invalidate()
       8   operator+(StringSumHelper const &, __FlashStringHelper const *)
         8   -> String::concat(__FlashStringHelper const *)
         8   -> free
      16   operator+(StringSumHelper const &, char const *)
        16   -> String::concat(char const *, unsigned int)
        16   -> String::invalidate()
        16   -> strlen
      16   operator+(StringSumHelper const &, char)
        16   -> String::invalidate()
        16   -> String::reserve(unsigned int)
        16   -> strcpy
       8   operator+(StringSumHelper const &, double)
         8   -> String::concat(double)
         8   -> free
       8   operator+(StringSumHelper const &, float)
         8   -> String::concat(float)
         8   -> free
       8   operator+(StringSumHelper const &, int)
         8   -> String::concat(int)
         8   -> String::invalidate()
       8   operator+(StringSumHelper const &, long)
         8   -> String::concat(long)
         8   -> String::invalidate()
       8   operator+(StringSumHelper const &, unsigned char)
         8   -> String::concat(unsigned char)
         8   -> String::invalidate()
       8   operator+(StringSumHelper const &, unsigned int)
         8   -> String::concat(unsigned int)
         8   -> String::invalidate()
       8   operator+(StringSumHelper const &, unsigned long)
         8   -> String::concat(unsigned long)
         8   -> String::invalidate()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
       4  ??DataTable2
       4  ??DataTable2_1
       6  ??Subroutine13_0
      22  ?Subroutine0
      20  ?Subroutine1
       8  ?Subroutine10
      50  ?Subroutine11
      28  ?Subroutine12
      20  ?Subroutine2
      20  ?Subroutine3
      14  ?Subroutine4
       8  ?Subroutine5
      12  ?Subroutine6
      12  ?Subroutine7
       6  ?Subroutine8
       6  ?Subroutine9
       2  String::String(String const &)
       2  String::String(__FlashStringHelper const *)
      36  String::String(char const *)
      34  String::String(char)
      42  String::String(double, unsigned char)
      52  String::String(float, unsigned char)
      24  String::String(int, unsigned char)
      24  String::String(long, unsigned char)
      36  String::String(unsigned char, unsigned char)
      22  String::String(unsigned int, unsigned char)
      22  String::String(unsigned long, unsigned char)
      24  String::changeBuffer(unsigned int)
      18  String::charAt(unsigned int) const
      44  String::compareTo(String const &) const
      20  String::concat(String const &)
      72  String::concat(__FlashStringHelper const *)
      22  String::concat(char const *)
      66  String::concat(char const *, unsigned int)
      46  String::concat(char)
      14  String::concat(double)
      18  String::concat(float)
      18  String::concat(int)
      18  String::concat(long)
      34  String::concat(unsigned char)
      16  String::concat(unsigned int)
      18  String::concat(unsigned long)
      60  String::copy(__FlashStringHelper const *, unsigned int)
      60  String::copy(char const *, unsigned int)
      34  String::endsWith(String const &) const
      20  String::equals(String const &) const
      36  String::equals(char const *) const
      56  String::equalsIgnoreCase(String const &) const
      52  String::getBytes(unsigned char *, unsigned int, unsigned int) const
      24  String::indexOf(String const &) const
      26  String::indexOf(String const &, unsigned int) const
      20  String::indexOf(char) const
      24  String::indexOf(char, unsigned int) const
      22  String::invalidate()
       6  String::lastIndexOf(String const &) const
      74  String::lastIndexOf(String const &, unsigned int) const
       4  String::lastIndexOf(char) const
      50  String::lastIndexOf(char, unsigned int) const
      10  String::operator<(String const &) const
      18  String::operator<=(String const &) const
      34  String::operator=(String const &)
      34  String::operator=(__FlashStringHelper const *)
      34  String::operator=(char const *)
      18  String::operator>(String const &) const
      12  String::operator>=(String const &) const
      22  String::operator[](unsigned int)
      18  String::operator[](unsigned int) const
      14  String::remove(unsigned int)
      48  String::remove(unsigned int, unsigned int)
     270  String::replace(String const &, String const &)
      24  String::replace(char, char)
      40  String::reserve(unsigned int)
      12  String::setCharAt(unsigned int, char)
      32  String::startsWith(String const &) const
      44  String::startsWith(String const &, unsigned int) const
       4  String::subobject String(String const &)
       4  String::subobject String(__FlashStringHelper const *)
       2  String::subobject String(char const *)
       2  String::subobject String(char)
      12  String::subobject String(double, unsigned char)
       2  String::subobject String(float, unsigned char)
       2  String::subobject String(int, unsigned char)
       2  String::subobject String(long, unsigned char)
       2  String::subobject String(unsigned char, unsigned char)
       2  String::subobject String(unsigned int, unsigned char)
       2  String::subobject String(unsigned long, unsigned char)
       4  String::subobject ~String()
      68  String::substring(unsigned int, unsigned int) const
      24  String::toFloat() const
      14  String::toInt() const
      26  String::toLowerCase()
      26  String::toUpperCase()
      82  String::trim()
       2  String::~String()
       1  dummy_writable_char
      14  operator+(StringSumHelper const &, String const &)
      10  operator+(StringSumHelper const &, __FlashStringHelper const *)
      36  operator+(StringSumHelper const &, char const *)
      54  operator+(StringSumHelper const &, char)
       8  operator+(StringSumHelper const &, double)
      10  operator+(StringSumHelper const &, float)
      10  operator+(StringSumHelper const &, int)
      10  operator+(StringSumHelper const &, long)
       8  operator+(StringSumHelper const &, unsigned char)
      10  operator+(StringSumHelper const &, unsigned int)
      10  operator+(StringSumHelper const &, unsigned long)

 
     1 byte  in section .bss
     1 byte  in section .rodata
 2 698 bytes in section .text
 
 2 698 bytes of CODE  memory
     1 byte  of CONST memory
     1 byte  of DATA  memory

Errors: none
Warnings: none
