###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        13/Apr/2020  09:25:17
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\serial.cpp
#    Command line =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\serial.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\
#        -lA
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/Obj\
#        --debug --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Src\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/variant\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Drivers/libstmf4/include\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui/Multi_language\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM/../User/ui/QRENCODE\
#        -I
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\..\Middlewares\GUI\
#        -Oh --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/List\serial.lst
#    Object file  =  
#        D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\EWARM\mksRobinNano/Obj\serial.o
#
###############################################################################

D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\Third_Party\Marlin\serial.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          
     23          #include "serial.h"

  #define UNUSED(x) ((void)(x))
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pe047]: 
          incompatible redefinition of macro "UNUSED" (declared at line 101 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\macros.h")

  		volatile volatile float desireBedTempBak;
  		         ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Inc\mks_cfg.h",626  Warning[Pe083]: 
          type qualifier specified more than once

  #define strcpy_P(dest, src) strcpy((dest), (src))
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",23  Warning[Pe047]: 
          incompatible redefinition of macro "strcpy_P" (declared at line 93
          of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

  #define strstr_P(a, b) strstr((a), (b))
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",26  Warning[Pe047]: 
          incompatible redefinition of macro "strstr_P" (declared at line 94
          of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

  #define sprintf_P(s, f, ...) sprintf((s), (f), __VA_ARGS__)
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",28  Warning[Pe047]: 
          incompatible redefinition of macro "sprintf_P" (declared at line 95
          of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

  #define pgm_read_word_near(addr) pgm_read_word(addr)
          ^
"D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",38  Warning[Pe047]: 
          incompatible redefinition of macro "pgm_read_word_near" (declared at
          line 65 of
          "D:\MKS-Robin-Nano-Firmware-v2.x.x\MKS-Robin-Nano-Firmware\Middleware
          s\Third_Party\Marlin\Marlin_export.h")

   \                                 In section .text, align 4
   \   __interwork __softfp void serialprintPGM(char const *)
   \                     _Z14serialprintPGMPKc: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xE003             B.N      ??serialprintPGM_0
   \                     ??serialprintPGM_1: (+1)
   \   00000006   0xB2C9             UXTB     R1,R1
   \   00000008   0x4803             LDR.N    R0,??serialprintPGM_2
   \   0000000A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??serialprintPGM_0: (+1)
   \   0000000E   0xF914 0x1B01      LDRSB    R1,[R4], #+1
   \   00000012   0x0008             MOVS     R0,R1
   \   00000014   0xD1F7             BNE.N    ??serialprintPGM_1
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
   \                     ??serialprintPGM_2:
   \   00000018   0x........         DC32     rx_buffer3+0xD0
     24          

   \                                 In section .rodata, align 4, keep-with-next
     25          const char errormagic[] PROGMEM = "Error:";
   \                     errormagic:
   \   00000000   0x45 0x72          DC8 "Error:"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
     26          const char echomagic[] PROGMEM = "echo:";
   \                     echomagic:
   \   00000000   0x65 0x63          DC8 "echo:"
   \              0x68 0x6F    
   \              0x3A 0x00    
   \   00000006   0x00 0x00          DC8 0, 0
     27          

   \                                 In section .text, align 2, keep-with-next
     28          void serial_echopair_P(const char* s_P, const char *v)   { serialprintPGM(s_P); SERIAL_ECHO(v); }
   \                     _Z17serial_echopair_PPKcS0_: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1
   \   00000004   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   00000008   0x4621             MOV      R1,R4
   \   0000000A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000000E   0x....             LDR.N    R0,??DataTable10_3
   \   00000010   0x.... 0x....      B.W      _ZN5Print5printEPKc

   \                                 In section .text, align 2, keep-with-next
     29          void serial_echopair_P(const char* s_P, char v)          { serialprintPGM(s_P); SERIAL_CHAR(v); }
   \                     _Z17serial_echopair_PPKcc: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1
   \   00000004   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   00000008   0xB2E1             UXTB     R1,R4
   \   0000000A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000000E   0x....             LDR.N    R0,??DataTable10_3
   \   00000010   0x.... 0x....      B.W      _ZN10USARTClass5writeEh

   \                                 In section .text, align 2, keep-with-next
     30          void serial_echopair_P(const char* s_P, int v)           { serialprintPGM(s_P); SERIAL_ECHO(v); }
   \                     _Z17serial_echopair_PPKci: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1
   \   00000004   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   00000008   0x4621             MOV      R1,R4
   \   0000000A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000000E   0x220A             MOVS     R2,#+10
   \   00000010   0x....             LDR.N    R0,??DataTable10_3
   \   00000012   0x.... 0x....      B.W      _ZN5Print5printEii

   \                                 In section .text, align 2, keep-with-next
     31          void serial_echopair_P(const char* s_P, unsigned int v)  { serialprintPGM(s_P); SERIAL_ECHO(v); }
   \                     _Z17serial_echopair_PPKcj: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1
   \   00000004   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   00000008   0x4621             MOV      R1,R4
   \   0000000A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000000E   0x220A             MOVS     R2,#+10
   \   00000010   0x....             LDR.N    R0,??DataTable10_3
   \   00000012   0x.... 0x....      B.W      _ZN5Print5printEji
     32          

   \                                 In section .text, align 2, keep-with-next
     33          void serial_echopair_P(const char* s_P, long v)          { serialprintPGM(s_P); SERIAL_ECHO(v); }
   \                     _Z17serial_echopair_PPKcl: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0xE002             B.N      ??serial_echopair_P_0
   \                     ??serial_echopair_P_1: (+1)
   \   00000008   0xB2C9             UXTB     R1,R1
   \   0000000A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??serial_echopair_P_0: (+1)
   \   0000000E   0xF914 0x1B01      LDRSB    R1,[R4], #+1
   \   00000012   0x....             LDR.N    R0,??DataTable10_3
   \   00000014   0x000A             MOVS     R2,R1
   \   00000016   0xD1F7             BNE.N    ??serial_echopair_P_1
   \   00000018   0x4629             MOV      R1,R5
   \   0000001A   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   0000001E   0x220A             MOVS     R2,#+10
   \   00000020   0x.... 0x....      B.W      _ZN5Print5printEli

   \                                 In section .text, align 2, keep-with-next
     34          void serial_echopair_P(const char* s_P, float v)         { serialprintPGM(s_P); SERIAL_ECHO(v); }
   \                     _Z17serial_echopair_PPKcf: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x....             LDR.N    R4,??DataTable10_3
   \   0000000A   0xE003             B.N      ??serial_echopair_P_2
   \                     ??serial_echopair_P_3: (+1)
   \   0000000C   0xB2C9             UXTB     R1,R1
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??serial_echopair_P_2: (+1)
   \   00000014   0xF915 0x1B01      LDRSB    R1,[R5], #+1
   \   00000018   0x0008             MOVS     R0,R1
   \   0000001A   0xD1F7             BNE.N    ??serial_echopair_P_3
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x4630             MOV      R0,R6
   \   00000022   0x.... 0x....      BL       __aeabi_f2d
   \   00000026   0x4602             MOV      R2,R0
   \   00000028   0x460B             MOV      R3,R1
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x.... 0x....      BL       _ZN5Print5printEdi
   \   00000004   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return

   \                                 In section .text, align 2, keep-with-next
     35          void serial_echopair_P(const char* s_P, double v)        { serialprintPGM(s_P); SERIAL_ECHO(v); }
   \                     _Z17serial_echopair_PPKcd: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x4606             MOV      R6,R0
   \   00000006   0x4614             MOV      R4,R2
   \   00000008   0x461D             MOV      R5,R3
   \   0000000A   0xE002             B.N      ??serial_echopair_P_4
   \                     ??serial_echopair_P_5: (+1)
   \   0000000C   0xB2C9             UXTB     R1,R1
   \   0000000E   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??serial_echopair_P_4: (+1)
   \   00000012   0xF916 0x1B01      LDRSB    R1,[R6], #+1
   \   00000016   0x....             LDR.N    R0,??DataTable10_3
   \   00000018   0x000A             MOVS     R2,R1
   \   0000001A   0xD1F7             BNE.N    ??serial_echopair_P_5
   \   0000001C   0x2102             MOVS     R1,#+2
   \   0000001E   0x9100             STR      R1,[SP, #+0]
   \   00000020   0x4622             MOV      R2,R4
   \   00000022   0x462B             MOV      R3,R5
   \   00000024                      REQUIRE ?Subroutine0
   \   00000024                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
     36          void serial_echopair_P(const char* s_P, unsigned long v) { serialprintPGM(s_P); SERIAL_ECHO(v); }
   \                     _Z17serial_echopair_PPKcm: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0xE002             B.N      ??serial_echopair_P_6
   \                     ??serial_echopair_P_7: (+1)
   \   00000008   0xB2C9             UXTB     R1,R1
   \   0000000A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??serial_echopair_P_6: (+1)
   \   0000000E   0xF914 0x1B01      LDRSB    R1,[R4], #+1
   \   00000012   0x....             LDR.N    R0,??DataTable10_3
   \   00000014   0x000A             MOVS     R2,R1
   \   00000016   0xD1F7             BNE.N    ??serial_echopair_P_7
   \   00000018   0x4629             MOV      R1,R5
   \   0000001A   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   0000001E   0x220A             MOVS     R2,#+10
   \   00000020   0x.... 0x....      B.W      _ZN5Print5printEmi
     37          

   \                                 In section .text, align 2, keep-with-next
     38          void serial_spaces(uint8_t count) { count *= (PROPORTIONAL_FONT_RATIO); while (count--) MYSERIAL.write(' '); }
   \                     _Z13serial_spacesh: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x.... 0x....      BL       __aeabi_ui2d
   \   00000006   0x.... 0x....      BL       __aeabi_d2iz
   \   0000000A   0xB2C4             UXTB     R4,R0
   \   0000000C   0xB12C             CBZ.N    R4,??serial_spaces_0
   \                     ??serial_spaces_1: (+1)
   \   0000000E   0x2120             MOVS     R1,#+32
   \   00000010   0x....             LDR.N    R0,??DataTable10_3
   \   00000012   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   00000016   0x1E64             SUBS     R4,R4,#+1
   \   00000018   0xD1F9             BNE.N    ??serial_spaces_1
   \                     ??serial_spaces_0: (+1)
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
     39          
     40          
     41          /*------------------mks added--------------------------*/
     42          /*
     43           * USART objects
     44           */
     45          #include "USARTClass.h"
     46          #include <math.h>
     47          
     48          
     49          
     50          //USARTClass Serial(USART1, USART1_IRQn, id_serial, &rx_buffer1);
     51          #if defined(MKS_ROBINPRO) 
     52          	RingBuffer rx_buffer3;
     53          	RingBuffer rx_buffer6;
     54          	USARTClass Serial3(USART3, USART3_IRQn, id_serial3, &rx_buffer3);		 
     55          	USARTClass Serial6(USART6, USART6_IRQn, id_serial6, &rx_buffer6);		 
     56          #elif defined(MKS_ROBIN) || defined(MKS_ROBIN2)|| defined(MKS_ROBIN_NANO)

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     57             RingBuffer rx_buffer3;
   \   00000002   0x....             LDR.N    R4,??DataTable10
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      BL       _ZN10RingBufferC1Ev
     58             RingBuffer rx_buffer1;
   \   0000000C   0xF104 0x0068      ADD      R0,R4,#+104
   \   00000010   0x.... 0x....      BL       _ZN10RingBufferC1Ev
     59             USARTClass Serial3(USART3, USART3_IRQn, id_serial3, &rx_buffer3);		
   \   00000014   0x9400             STR      R4,[SP, #+0]
   \   00000016   0x2303             MOVS     R3,#+3
   \   00000018   0x2227             MOVS     R2,#+39
   \   0000001A   0x....             LDR.N    R1,??DataTable10_1  ;; 0x40004800
   \   0000001C   0xF104 0x00D0      ADD      R0,R4,#+208
   \   00000020   0x.... 0x....      BL       _ZN10USARTClassC1EP13USART_TypeDef9IRQn_TypejP10RingBuffer
     60             USARTClass Serial1(USART1, USART1_IRQn, id_serial1, &rx_buffer1);		
   \   00000024   0xF104 0x0068      ADD      R0,R4,#+104
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x2301             MOVS     R3,#+1
   \   0000002C   0x2225             MOVS     R2,#+37
   \   0000002E   0x....             LDR.N    R1,??DataTable10_2  ;; 0x40013800
   \   00000030   0xF504 0x7080      ADD      R0,R4,#+256
   \   00000034   0x.... 0x....      BL       _ZN10USARTClassC1EP13USART_TypeDef9IRQn_TypejP10RingBuffer
   \   00000038   0xBD13             POP      {R0,R1,R4,PC}    ;; return

   \                                 In section .bss, align 4
   \                     rx_buffer3:
   \   00000000                      DS8 104
   \                     rx_buffer1:
   \   00000068                      DS8 104
   \                     Serial3:
   \   000000D0                      DS8 48
   \                     Serial1:
   \   00000100                      DS8 48

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     rx_buffer3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x40004800         DC32     0x40004800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     rx_buffer3+0xD0
     61          #endif
     62          
     63          
     64          
     65          
     66          /*------------------mks added--------------------------*/
     67          
     68          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   __sti__routine()
        16   -> RingBuffer::RingBuffer()
        16   -> USARTClass::USARTClass(USART_TypeDef *, IRQn_Type, uint32_t, RingBuffer *)
       8   serial_echopair_P(char const *, char const *)
         0   -> Print::print(char const *)
         8   -> serialprintPGM(char const *)
       8   serial_echopair_P(char const *, char)
         0   -> USARTClass::write(uint8_t)
         8   -> serialprintPGM(char const *)
      24   serial_echopair_P(char const *, double)
        24   -> Print::print(double, int)
        24   -> USARTClass::write(uint8_t)
      24   serial_echopair_P(char const *, float)
        24   -> Print::print(double, int)
        24   -> USARTClass::write(uint8_t)
        24   -> __aeabi_f2d
       8   serial_echopair_P(char const *, int)
         0   -> Print::print(int, int)
         8   -> serialprintPGM(char const *)
      16   serial_echopair_P(char const *, long)
         0   -> Print::print(long, int)
        16   -> USARTClass::write(uint8_t)
       8   serial_echopair_P(char const *, unsigned int)
         0   -> Print::print(unsigned int, int)
         8   -> serialprintPGM(char const *)
      16   serial_echopair_P(char const *, unsigned long)
         0   -> Print::print(unsigned long, int)
        16   -> USARTClass::write(uint8_t)
       8   serial_spaces(uint8_t)
         8   -> USARTClass::write(uint8_t)
         8   -> __aeabi_d2iz
         8   -> __aeabi_ui2d
       8   serialprintPGM(char const *)
         8   -> USARTClass::write(uint8_t)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       6  ?Subroutine0
      58  __sti__routine()
       8  echomagic
       8  errormagic
     304  rx_buffer3
          rx_buffer1
          Serial3
          Serial1
      20  serial_echopair_P(char const *, char const *)
      20  serial_echopair_P(char const *, char)
      36  serial_echopair_P(char const *, double)
      46  serial_echopair_P(char const *, float)
      22  serial_echopair_P(char const *, int)
      36  serial_echopair_P(char const *, long)
      22  serial_echopair_P(char const *, unsigned int)
      36  serial_echopair_P(char const *, unsigned long)
      28  serial_spaces(uint8_t)
      28  serialprintPGM(char const *)
       5  -- Other

 
 304 bytes in section .bss
   4 bytes in section .init_array
  17 bytes in section .rodata
 374 bytes in section .text
 
 350 bytes of CODE  memory (+ 28 bytes shared)
  16 bytes of CONST memory (+  1 byte  shared)
 304 bytes of DATA  memory

Errors: none
Warnings: 6
